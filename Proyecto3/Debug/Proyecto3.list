
Proyecto3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3b0  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016d0  0800a574  0800a574  0000b574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc44  0800bc44  0000d1bc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bc44  0800bc44  0000cc44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc4c  0800bc4c  0000d1bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc4c  0800bc4c  0000cc4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bc50  0800bc50  0000cc50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001bc  20000000  0800bc54  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013b4  200001bc  0800be10  0000d1bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001570  0800be10  0000d570  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013116  00000000  00000000  0000d1ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d81  00000000  00000000  00020302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  00023088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d0a  00000000  00000000  00024150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002402d  00000000  00000000  00024e5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e70  00000000  00000000  00048e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0de4  00000000  00000000  00061cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00132adb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000454c  00000000  00000000  00132b20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0013706c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200001bc 	.word	0x200001bc
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800a55c 	.word	0x0800a55c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200001c0 	.word	0x200001c0
 8000200:	0800a55c 	.word	0x0800a55c

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b988 	b.w	800053c <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	468e      	mov	lr, r1
 800024c:	4604      	mov	r4, r0
 800024e:	4688      	mov	r8, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14a      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000254:	428a      	cmp	r2, r1
 8000256:	4617      	mov	r7, r2
 8000258:	d962      	bls.n	8000320 <__udivmoddi4+0xdc>
 800025a:	fab2 f682 	clz	r6, r2
 800025e:	b14e      	cbz	r6, 8000274 <__udivmoddi4+0x30>
 8000260:	f1c6 0320 	rsb	r3, r6, #32
 8000264:	fa01 f806 	lsl.w	r8, r1, r6
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	40b7      	lsls	r7, r6
 800026e:	ea43 0808 	orr.w	r8, r3, r8
 8000272:	40b4      	lsls	r4, r6
 8000274:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000278:	fa1f fc87 	uxth.w	ip, r7
 800027c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000280:	0c23      	lsrs	r3, r4, #16
 8000282:	fb0e 8811 	mls	r8, lr, r1, r8
 8000286:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028a:	fb01 f20c 	mul.w	r2, r1, ip
 800028e:	429a      	cmp	r2, r3
 8000290:	d909      	bls.n	80002a6 <__udivmoddi4+0x62>
 8000292:	18fb      	adds	r3, r7, r3
 8000294:	f101 30ff 	add.w	r0, r1, #4294967295
 8000298:	f080 80ea 	bcs.w	8000470 <__udivmoddi4+0x22c>
 800029c:	429a      	cmp	r2, r3
 800029e:	f240 80e7 	bls.w	8000470 <__udivmoddi4+0x22c>
 80002a2:	3902      	subs	r1, #2
 80002a4:	443b      	add	r3, r7
 80002a6:	1a9a      	subs	r2, r3, r2
 80002a8:	b2a3      	uxth	r3, r4
 80002aa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ae:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ba:	459c      	cmp	ip, r3
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0x8e>
 80002be:	18fb      	adds	r3, r7, r3
 80002c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c4:	f080 80d6 	bcs.w	8000474 <__udivmoddi4+0x230>
 80002c8:	459c      	cmp	ip, r3
 80002ca:	f240 80d3 	bls.w	8000474 <__udivmoddi4+0x230>
 80002ce:	443b      	add	r3, r7
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d6:	eba3 030c 	sub.w	r3, r3, ip
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa2>
 80002de:	40f3      	lsrs	r3, r6
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xb6>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb0>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa2>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x14c>
 8000302:	4573      	cmp	r3, lr
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xc8>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 8105 	bhi.w	8000516 <__udivmoddi4+0x2d2>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000312:	2001      	movs	r0, #1
 8000314:	4690      	mov	r8, r2
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e5      	beq.n	80002e6 <__udivmoddi4+0xa2>
 800031a:	e9c5 4800 	strd	r4, r8, [r5]
 800031e:	e7e2      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000320:	2a00      	cmp	r2, #0
 8000322:	f000 8090 	beq.w	8000446 <__udivmoddi4+0x202>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	2e00      	cmp	r6, #0
 800032c:	f040 80a4 	bne.w	8000478 <__udivmoddi4+0x234>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	0c03      	lsrs	r3, r0, #16
 8000334:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000338:	b280      	uxth	r0, r0
 800033a:	b2bc      	uxth	r4, r7
 800033c:	2101      	movs	r1, #1
 800033e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000342:	fb0e 221c 	mls	r2, lr, ip, r2
 8000346:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034a:	fb04 f20c 	mul.w	r2, r4, ip
 800034e:	429a      	cmp	r2, r3
 8000350:	d907      	bls.n	8000362 <__udivmoddi4+0x11e>
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000358:	d202      	bcs.n	8000360 <__udivmoddi4+0x11c>
 800035a:	429a      	cmp	r2, r3
 800035c:	f200 80e0 	bhi.w	8000520 <__udivmoddi4+0x2dc>
 8000360:	46c4      	mov	ip, r8
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	fbb3 f2fe 	udiv	r2, r3, lr
 8000368:	fb0e 3312 	mls	r3, lr, r2, r3
 800036c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000370:	fb02 f404 	mul.w	r4, r2, r4
 8000374:	429c      	cmp	r4, r3
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0x144>
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	f102 30ff 	add.w	r0, r2, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x142>
 8000380:	429c      	cmp	r4, r3
 8000382:	f200 80ca 	bhi.w	800051a <__udivmoddi4+0x2d6>
 8000386:	4602      	mov	r2, r0
 8000388:	1b1b      	subs	r3, r3, r4
 800038a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x98>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa0e f401 	lsl.w	r4, lr, r1
 80003a0:	fa20 f306 	lsr.w	r3, r0, r6
 80003a4:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fa00 f801 	lsl.w	r8, r0, r1
 80003b2:	fa1f fc87 	uxth.w	ip, r7
 80003b6:	fbbe f0f9 	udiv	r0, lr, r9
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x1a0>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d6:	f080 809c 	bcs.w	8000512 <__udivmoddi4+0x2ce>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	f240 8099 	bls.w	8000512 <__udivmoddi4+0x2ce>
 80003e0:	3802      	subs	r0, #2
 80003e2:	443c      	add	r4, r7
 80003e4:	eba4 040e 	sub.w	r4, r4, lr
 80003e8:	fa1f fe83 	uxth.w	lr, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fc:	45a4      	cmp	ip, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1ce>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f103 3eff 	add.w	lr, r3, #4294967295
 8000406:	f080 8082 	bcs.w	800050e <__udivmoddi4+0x2ca>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d97f      	bls.n	800050e <__udivmoddi4+0x2ca>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000416:	eba4 040c 	sub.w	r4, r4, ip
 800041a:	fba0 ec02 	umull	lr, ip, r0, r2
 800041e:	4564      	cmp	r4, ip
 8000420:	4673      	mov	r3, lr
 8000422:	46e1      	mov	r9, ip
 8000424:	d362      	bcc.n	80004ec <__udivmoddi4+0x2a8>
 8000426:	d05f      	beq.n	80004e8 <__udivmoddi4+0x2a4>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x1fe>
 800042a:	ebb8 0203 	subs.w	r2, r8, r3
 800042e:	eb64 0409 	sbc.w	r4, r4, r9
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	fa22 f301 	lsr.w	r3, r2, r1
 800043a:	431e      	orrs	r6, r3
 800043c:	40cc      	lsrs	r4, r1
 800043e:	e9c5 6400 	strd	r6, r4, [r5]
 8000442:	2100      	movs	r1, #0
 8000444:	e74f      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000446:	fbb1 fcf2 	udiv	ip, r1, r2
 800044a:	0c01      	lsrs	r1, r0, #16
 800044c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000450:	b280      	uxth	r0, r0
 8000452:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000456:	463b      	mov	r3, r7
 8000458:	4638      	mov	r0, r7
 800045a:	463c      	mov	r4, r7
 800045c:	46b8      	mov	r8, r7
 800045e:	46be      	mov	lr, r7
 8000460:	2620      	movs	r6, #32
 8000462:	fbb1 f1f7 	udiv	r1, r1, r7
 8000466:	eba2 0208 	sub.w	r2, r2, r8
 800046a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046e:	e766      	b.n	800033e <__udivmoddi4+0xfa>
 8000470:	4601      	mov	r1, r0
 8000472:	e718      	b.n	80002a6 <__udivmoddi4+0x62>
 8000474:	4610      	mov	r0, r2
 8000476:	e72c      	b.n	80002d2 <__udivmoddi4+0x8e>
 8000478:	f1c6 0220 	rsb	r2, r6, #32
 800047c:	fa2e f302 	lsr.w	r3, lr, r2
 8000480:	40b7      	lsls	r7, r6
 8000482:	40b1      	lsls	r1, r6
 8000484:	fa20 f202 	lsr.w	r2, r0, r2
 8000488:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800048c:	430a      	orrs	r2, r1
 800048e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000492:	b2bc      	uxth	r4, r7
 8000494:	fb0e 3318 	mls	r3, lr, r8, r3
 8000498:	0c11      	lsrs	r1, r2, #16
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb08 f904 	mul.w	r9, r8, r4
 80004a2:	40b0      	lsls	r0, r6
 80004a4:	4589      	cmp	r9, r1
 80004a6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004aa:	b280      	uxth	r0, r0
 80004ac:	d93e      	bls.n	800052c <__udivmoddi4+0x2e8>
 80004ae:	1879      	adds	r1, r7, r1
 80004b0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b4:	d201      	bcs.n	80004ba <__udivmoddi4+0x276>
 80004b6:	4589      	cmp	r9, r1
 80004b8:	d81f      	bhi.n	80004fa <__udivmoddi4+0x2b6>
 80004ba:	eba1 0109 	sub.w	r1, r1, r9
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fb09 f804 	mul.w	r8, r9, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	b292      	uxth	r2, r2
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	4542      	cmp	r2, r8
 80004d2:	d229      	bcs.n	8000528 <__udivmoddi4+0x2e4>
 80004d4:	18ba      	adds	r2, r7, r2
 80004d6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004da:	d2c4      	bcs.n	8000466 <__udivmoddi4+0x222>
 80004dc:	4542      	cmp	r2, r8
 80004de:	d2c2      	bcs.n	8000466 <__udivmoddi4+0x222>
 80004e0:	f1a9 0102 	sub.w	r1, r9, #2
 80004e4:	443a      	add	r2, r7
 80004e6:	e7be      	b.n	8000466 <__udivmoddi4+0x222>
 80004e8:	45f0      	cmp	r8, lr
 80004ea:	d29d      	bcs.n	8000428 <__udivmoddi4+0x1e4>
 80004ec:	ebbe 0302 	subs.w	r3, lr, r2
 80004f0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f4:	3801      	subs	r0, #1
 80004f6:	46e1      	mov	r9, ip
 80004f8:	e796      	b.n	8000428 <__udivmoddi4+0x1e4>
 80004fa:	eba7 0909 	sub.w	r9, r7, r9
 80004fe:	4449      	add	r1, r9
 8000500:	f1a8 0c02 	sub.w	ip, r8, #2
 8000504:	fbb1 f9fe 	udiv	r9, r1, lr
 8000508:	fb09 f804 	mul.w	r8, r9, r4
 800050c:	e7db      	b.n	80004c6 <__udivmoddi4+0x282>
 800050e:	4673      	mov	r3, lr
 8000510:	e77f      	b.n	8000412 <__udivmoddi4+0x1ce>
 8000512:	4650      	mov	r0, sl
 8000514:	e766      	b.n	80003e4 <__udivmoddi4+0x1a0>
 8000516:	4608      	mov	r0, r1
 8000518:	e6fd      	b.n	8000316 <__udivmoddi4+0xd2>
 800051a:	443b      	add	r3, r7
 800051c:	3a02      	subs	r2, #2
 800051e:	e733      	b.n	8000388 <__udivmoddi4+0x144>
 8000520:	f1ac 0c02 	sub.w	ip, ip, #2
 8000524:	443b      	add	r3, r7
 8000526:	e71c      	b.n	8000362 <__udivmoddi4+0x11e>
 8000528:	4649      	mov	r1, r9
 800052a:	e79c      	b.n	8000466 <__udivmoddi4+0x222>
 800052c:	eba1 0109 	sub.w	r1, r1, r9
 8000530:	46c4      	mov	ip, r8
 8000532:	fbb1 f9fe 	udiv	r9, r1, lr
 8000536:	fb09 f804 	mul.w	r8, r9, r4
 800053a:	e7c4      	b.n	80004c6 <__udivmoddi4+0x282>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <SELECT>:
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
 8000544:	2200      	movs	r2, #0
 8000546:	2140      	movs	r1, #64	@ 0x40
 8000548:	4803      	ldr	r0, [pc, #12]	@ (8000558 <SELECT+0x18>)
 800054a:	f002 ff21 	bl	8003390 <HAL_GPIO_WritePin>
 800054e:	2001      	movs	r0, #1
 8000550:	f002 fb90 	bl	8002c74 <HAL_Delay>
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40020400 	.word	0x40020400

0800055c <DESELECT>:
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
 8000560:	2201      	movs	r2, #1
 8000562:	2140      	movs	r1, #64	@ 0x40
 8000564:	4803      	ldr	r0, [pc, #12]	@ (8000574 <DESELECT+0x18>)
 8000566:	f002 ff13 	bl	8003390 <HAL_GPIO_WritePin>
 800056a:	2001      	movs	r0, #1
 800056c:	f002 fb82 	bl	8002c74 <HAL_Delay>
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40020400 	.word	0x40020400

08000578 <SPI_TxByte>:
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
 8000582:	bf00      	nop
 8000584:	4b08      	ldr	r3, [pc, #32]	@ (80005a8 <SPI_TxByte+0x30>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	689b      	ldr	r3, [r3, #8]
 800058a:	f003 0302 	and.w	r3, r3, #2
 800058e:	2b02      	cmp	r3, #2
 8000590:	d1f8      	bne.n	8000584 <SPI_TxByte+0xc>
 8000592:	1df9      	adds	r1, r7, #7
 8000594:	2364      	movs	r3, #100	@ 0x64
 8000596:	2201      	movs	r2, #1
 8000598:	4803      	ldr	r0, [pc, #12]	@ (80005a8 <SPI_TxByte+0x30>)
 800059a:	f005 fce0 	bl	8005f5e <HAL_SPI_Transmit>
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20001290 	.word	0x20001290

080005ac <SPI_TxBuffer>:
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	807b      	strh	r3, [r7, #2]
 80005b8:	bf00      	nop
 80005ba:	4b08      	ldr	r3, [pc, #32]	@ (80005dc <SPI_TxBuffer+0x30>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	f003 0302 	and.w	r3, r3, #2
 80005c4:	2b02      	cmp	r3, #2
 80005c6:	d1f8      	bne.n	80005ba <SPI_TxBuffer+0xe>
 80005c8:	887a      	ldrh	r2, [r7, #2]
 80005ca:	2364      	movs	r3, #100	@ 0x64
 80005cc:	6879      	ldr	r1, [r7, #4]
 80005ce:	4803      	ldr	r0, [pc, #12]	@ (80005dc <SPI_TxBuffer+0x30>)
 80005d0:	f005 fcc5 	bl	8005f5e <HAL_SPI_Transmit>
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20001290 	.word	0x20001290

080005e0 <SPI_RxByte>:
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af02      	add	r7, sp, #8
 80005e6:	23ff      	movs	r3, #255	@ 0xff
 80005e8:	71fb      	strb	r3, [r7, #7]
 80005ea:	bf00      	nop
 80005ec:	4b09      	ldr	r3, [pc, #36]	@ (8000614 <SPI_RxByte+0x34>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	f003 0302 	and.w	r3, r3, #2
 80005f6:	2b02      	cmp	r3, #2
 80005f8:	d1f8      	bne.n	80005ec <SPI_RxByte+0xc>
 80005fa:	1dba      	adds	r2, r7, #6
 80005fc:	1df9      	adds	r1, r7, #7
 80005fe:	2364      	movs	r3, #100	@ 0x64
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2301      	movs	r3, #1
 8000604:	4803      	ldr	r0, [pc, #12]	@ (8000614 <SPI_RxByte+0x34>)
 8000606:	f005 fdee 	bl	80061e6 <HAL_SPI_TransmitReceive>
 800060a:	79bb      	ldrb	r3, [r7, #6]
 800060c:	4618      	mov	r0, r3
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20001290 	.word	0x20001290

08000618 <SPI_RxBytePtr>:
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	f7ff ffde 	bl	80005e0 <SPI_RxByte>
 8000624:	4603      	mov	r3, r0
 8000626:	461a      	mov	r2, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	701a      	strb	r2, [r3, #0]
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <SD_ReadyWait>:
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <SD_ReadyWait+0x30>)
 800063c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000640:	801a      	strh	r2, [r3, #0]
 8000642:	f7ff ffcd 	bl	80005e0 <SPI_RxByte>
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	2bff      	cmp	r3, #255	@ 0xff
 800064e:	d003      	beq.n	8000658 <SD_ReadyWait+0x24>
 8000650:	4b04      	ldr	r3, [pc, #16]	@ (8000664 <SD_ReadyWait+0x30>)
 8000652:	881b      	ldrh	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d1f4      	bne.n	8000642 <SD_ReadyWait+0xe>
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	4618      	mov	r0, r3
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	200001da 	.word	0x200001da

08000668 <SD_PowerOn>:
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	f7ff ff72 	bl	800055c <DESELECT>
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	e005      	b.n	800068a <SD_PowerOn+0x22>
 800067e:	20ff      	movs	r0, #255	@ 0xff
 8000680:	f7ff ff7a 	bl	8000578 <SPI_TxByte>
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	3301      	adds	r3, #1
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	2b09      	cmp	r3, #9
 800068e:	ddf6      	ble.n	800067e <SD_PowerOn+0x16>
 8000690:	f7ff ff56 	bl	8000540 <SELECT>
 8000694:	2340      	movs	r3, #64	@ 0x40
 8000696:	703b      	strb	r3, [r7, #0]
 8000698:	2300      	movs	r3, #0
 800069a:	707b      	strb	r3, [r7, #1]
 800069c:	2300      	movs	r3, #0
 800069e:	70bb      	strb	r3, [r7, #2]
 80006a0:	2300      	movs	r3, #0
 80006a2:	70fb      	strb	r3, [r7, #3]
 80006a4:	2300      	movs	r3, #0
 80006a6:	713b      	strb	r3, [r7, #4]
 80006a8:	2395      	movs	r3, #149	@ 0x95
 80006aa:	717b      	strb	r3, [r7, #5]
 80006ac:	463b      	mov	r3, r7
 80006ae:	2106      	movs	r1, #6
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ff7b 	bl	80005ac <SPI_TxBuffer>
 80006b6:	e002      	b.n	80006be <SD_PowerOn+0x56>
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	3b01      	subs	r3, #1
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	f7ff ff8f 	bl	80005e0 <SPI_RxByte>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d002      	beq.n	80006ce <SD_PowerOn+0x66>
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d1f4      	bne.n	80006b8 <SD_PowerOn+0x50>
 80006ce:	f7ff ff45 	bl	800055c <DESELECT>
 80006d2:	20ff      	movs	r0, #255	@ 0xff
 80006d4:	f7ff ff50 	bl	8000578 <SPI_TxByte>
 80006d8:	4b03      	ldr	r3, [pc, #12]	@ (80006e8 <SD_PowerOn+0x80>)
 80006da:	2201      	movs	r2, #1
 80006dc:	701a      	strb	r2, [r3, #0]
 80006de:	bf00      	nop
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200001dd 	.word	0x200001dd

080006ec <SD_PowerOff>:
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	4b03      	ldr	r3, [pc, #12]	@ (8000700 <SD_PowerOff+0x14>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	701a      	strb	r2, [r3, #0]
 80006f6:	bf00      	nop
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	200001dd 	.word	0x200001dd

08000704 <SD_CheckPower>:
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
 8000708:	4b03      	ldr	r3, [pc, #12]	@ (8000718 <SD_CheckPower+0x14>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	4618      	mov	r0, r3
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	200001dd 	.word	0x200001dd

0800071c <SD_RxDataBlock>:
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
 8000726:	4b13      	ldr	r3, [pc, #76]	@ (8000774 <SD_RxDataBlock+0x58>)
 8000728:	22c8      	movs	r2, #200	@ 0xc8
 800072a:	801a      	strh	r2, [r3, #0]
 800072c:	f7ff ff58 	bl	80005e0 <SPI_RxByte>
 8000730:	4603      	mov	r3, r0
 8000732:	73fb      	strb	r3, [r7, #15]
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	2bff      	cmp	r3, #255	@ 0xff
 8000738:	d103      	bne.n	8000742 <SD_RxDataBlock+0x26>
 800073a:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <SD_RxDataBlock+0x58>)
 800073c:	881b      	ldrh	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d1f4      	bne.n	800072c <SD_RxDataBlock+0x10>
 8000742:	7bfb      	ldrb	r3, [r7, #15]
 8000744:	2bfe      	cmp	r3, #254	@ 0xfe
 8000746:	d001      	beq.n	800074c <SD_RxDataBlock+0x30>
 8000748:	2300      	movs	r3, #0
 800074a:	e00f      	b.n	800076c <SD_RxDataBlock+0x50>
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	1c5a      	adds	r2, r3, #1
 8000750:	607a      	str	r2, [r7, #4]
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ff60 	bl	8000618 <SPI_RxBytePtr>
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	1e5a      	subs	r2, r3, #1
 800075c:	603a      	str	r2, [r7, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d1f4      	bne.n	800074c <SD_RxDataBlock+0x30>
 8000762:	f7ff ff3d 	bl	80005e0 <SPI_RxByte>
 8000766:	f7ff ff3b 	bl	80005e0 <SPI_RxByte>
 800076a:	2301      	movs	r3, #1
 800076c:	4618      	mov	r0, r3
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	200001d8 	.word	0x200001d8

08000778 <SD_TxDataBlock>:
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	460b      	mov	r3, r1
 8000782:	70fb      	strb	r3, [r7, #3]
 8000784:	2300      	movs	r3, #0
 8000786:	73bb      	strb	r3, [r7, #14]
 8000788:	f7ff ff54 	bl	8000634 <SD_ReadyWait>
 800078c:	4603      	mov	r3, r0
 800078e:	2bff      	cmp	r3, #255	@ 0xff
 8000790:	d001      	beq.n	8000796 <SD_TxDataBlock+0x1e>
 8000792:	2300      	movs	r3, #0
 8000794:	e02f      	b.n	80007f6 <SD_TxDataBlock+0x7e>
 8000796:	78fb      	ldrb	r3, [r7, #3]
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff feed 	bl	8000578 <SPI_TxByte>
 800079e:	78fb      	ldrb	r3, [r7, #3]
 80007a0:	2bfd      	cmp	r3, #253	@ 0xfd
 80007a2:	d020      	beq.n	80007e6 <SD_TxDataBlock+0x6e>
 80007a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f7ff feff 	bl	80005ac <SPI_TxBuffer>
 80007ae:	f7ff ff17 	bl	80005e0 <SPI_RxByte>
 80007b2:	f7ff ff15 	bl	80005e0 <SPI_RxByte>
 80007b6:	e00b      	b.n	80007d0 <SD_TxDataBlock+0x58>
 80007b8:	f7ff ff12 	bl	80005e0 <SPI_RxByte>
 80007bc:	4603      	mov	r3, r0
 80007be:	73fb      	strb	r3, [r7, #15]
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	f003 031f 	and.w	r3, r3, #31
 80007c6:	2b05      	cmp	r3, #5
 80007c8:	d006      	beq.n	80007d8 <SD_TxDataBlock+0x60>
 80007ca:	7bbb      	ldrb	r3, [r7, #14]
 80007cc:	3301      	adds	r3, #1
 80007ce:	73bb      	strb	r3, [r7, #14]
 80007d0:	7bbb      	ldrb	r3, [r7, #14]
 80007d2:	2b40      	cmp	r3, #64	@ 0x40
 80007d4:	d9f0      	bls.n	80007b8 <SD_TxDataBlock+0x40>
 80007d6:	e000      	b.n	80007da <SD_TxDataBlock+0x62>
 80007d8:	bf00      	nop
 80007da:	bf00      	nop
 80007dc:	f7ff ff00 	bl	80005e0 <SPI_RxByte>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d0fa      	beq.n	80007dc <SD_TxDataBlock+0x64>
 80007e6:	7bfb      	ldrb	r3, [r7, #15]
 80007e8:	f003 031f 	and.w	r3, r3, #31
 80007ec:	2b05      	cmp	r3, #5
 80007ee:	d101      	bne.n	80007f4 <SD_TxDataBlock+0x7c>
 80007f0:	2301      	movs	r3, #1
 80007f2:	e000      	b.n	80007f6 <SD_TxDataBlock+0x7e>
 80007f4:	2300      	movs	r3, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <SD_SendCmd>:
 80007fe:	b580      	push	{r7, lr}
 8000800:	b084      	sub	sp, #16
 8000802:	af00      	add	r7, sp, #0
 8000804:	4603      	mov	r3, r0
 8000806:	6039      	str	r1, [r7, #0]
 8000808:	71fb      	strb	r3, [r7, #7]
 800080a:	f7ff ff13 	bl	8000634 <SD_ReadyWait>
 800080e:	4603      	mov	r3, r0
 8000810:	2bff      	cmp	r3, #255	@ 0xff
 8000812:	d001      	beq.n	8000818 <SD_SendCmd+0x1a>
 8000814:	23ff      	movs	r3, #255	@ 0xff
 8000816:	e042      	b.n	800089e <SD_SendCmd+0xa0>
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff feac 	bl	8000578 <SPI_TxByte>
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	0e1b      	lsrs	r3, r3, #24
 8000824:	b2db      	uxtb	r3, r3
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff fea6 	bl	8000578 <SPI_TxByte>
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	0c1b      	lsrs	r3, r3, #16
 8000830:	b2db      	uxtb	r3, r3
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff fea0 	bl	8000578 <SPI_TxByte>
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	0a1b      	lsrs	r3, r3, #8
 800083c:	b2db      	uxtb	r3, r3
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff fe9a 	bl	8000578 <SPI_TxByte>
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	b2db      	uxtb	r3, r3
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fe95 	bl	8000578 <SPI_TxByte>
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	2b40      	cmp	r3, #64	@ 0x40
 8000852:	d102      	bne.n	800085a <SD_SendCmd+0x5c>
 8000854:	2395      	movs	r3, #149	@ 0x95
 8000856:	73fb      	strb	r3, [r7, #15]
 8000858:	e007      	b.n	800086a <SD_SendCmd+0x6c>
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	2b48      	cmp	r3, #72	@ 0x48
 800085e:	d102      	bne.n	8000866 <SD_SendCmd+0x68>
 8000860:	2387      	movs	r3, #135	@ 0x87
 8000862:	73fb      	strb	r3, [r7, #15]
 8000864:	e001      	b.n	800086a <SD_SendCmd+0x6c>
 8000866:	2301      	movs	r3, #1
 8000868:	73fb      	strb	r3, [r7, #15]
 800086a:	7bfb      	ldrb	r3, [r7, #15]
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fe83 	bl	8000578 <SPI_TxByte>
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	2b4c      	cmp	r3, #76	@ 0x4c
 8000876:	d101      	bne.n	800087c <SD_SendCmd+0x7e>
 8000878:	f7ff feb2 	bl	80005e0 <SPI_RxByte>
 800087c:	230a      	movs	r3, #10
 800087e:	73bb      	strb	r3, [r7, #14]
 8000880:	f7ff feae 	bl	80005e0 <SPI_RxByte>
 8000884:	4603      	mov	r3, r0
 8000886:	737b      	strb	r3, [r7, #13]
 8000888:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800088c:	2b00      	cmp	r3, #0
 800088e:	da05      	bge.n	800089c <SD_SendCmd+0x9e>
 8000890:	7bbb      	ldrb	r3, [r7, #14]
 8000892:	3b01      	subs	r3, #1
 8000894:	73bb      	strb	r3, [r7, #14]
 8000896:	7bbb      	ldrb	r3, [r7, #14]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d1f1      	bne.n	8000880 <SD_SendCmd+0x82>
 800089c:	7b7b      	ldrb	r3, [r7, #13]
 800089e:	4618      	mov	r0, r3
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <SD_disk_initialize>:
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SD_disk_initialize+0x14>
 80008b8:	2301      	movs	r3, #1
 80008ba:	e0d1      	b.n	8000a60 <SD_disk_initialize+0x1b8>
 80008bc:	4b6a      	ldr	r3, [pc, #424]	@ (8000a68 <SD_disk_initialize+0x1c0>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d003      	beq.n	80008d2 <SD_disk_initialize+0x2a>
 80008ca:	4b67      	ldr	r3, [pc, #412]	@ (8000a68 <SD_disk_initialize+0x1c0>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	e0c6      	b.n	8000a60 <SD_disk_initialize+0x1b8>
 80008d2:	f7ff fec9 	bl	8000668 <SD_PowerOn>
 80008d6:	f7ff fe33 	bl	8000540 <SELECT>
 80008da:	2300      	movs	r3, #0
 80008dc:	73bb      	strb	r3, [r7, #14]
 80008de:	2100      	movs	r1, #0
 80008e0:	2040      	movs	r0, #64	@ 0x40
 80008e2:	f7ff ff8c 	bl	80007fe <SD_SendCmd>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	f040 80a1 	bne.w	8000a30 <SD_disk_initialize+0x188>
 80008ee:	4b5f      	ldr	r3, [pc, #380]	@ (8000a6c <SD_disk_initialize+0x1c4>)
 80008f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008f4:	801a      	strh	r2, [r3, #0]
 80008f6:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80008fa:	2048      	movs	r0, #72	@ 0x48
 80008fc:	f7ff ff7f 	bl	80007fe <SD_SendCmd>
 8000900:	4603      	mov	r3, r0
 8000902:	2b01      	cmp	r3, #1
 8000904:	d155      	bne.n	80009b2 <SD_disk_initialize+0x10a>
 8000906:	2300      	movs	r3, #0
 8000908:	73fb      	strb	r3, [r7, #15]
 800090a:	e00c      	b.n	8000926 <SD_disk_initialize+0x7e>
 800090c:	7bfc      	ldrb	r4, [r7, #15]
 800090e:	f7ff fe67 	bl	80005e0 <SPI_RxByte>
 8000912:	4603      	mov	r3, r0
 8000914:	461a      	mov	r2, r3
 8000916:	f104 0310 	add.w	r3, r4, #16
 800091a:	443b      	add	r3, r7
 800091c:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000920:	7bfb      	ldrb	r3, [r7, #15]
 8000922:	3301      	adds	r3, #1
 8000924:	73fb      	strb	r3, [r7, #15]
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	2b03      	cmp	r3, #3
 800092a:	d9ef      	bls.n	800090c <SD_disk_initialize+0x64>
 800092c:	7abb      	ldrb	r3, [r7, #10]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d17e      	bne.n	8000a30 <SD_disk_initialize+0x188>
 8000932:	7afb      	ldrb	r3, [r7, #11]
 8000934:	2baa      	cmp	r3, #170	@ 0xaa
 8000936:	d17b      	bne.n	8000a30 <SD_disk_initialize+0x188>
 8000938:	2100      	movs	r1, #0
 800093a:	2077      	movs	r0, #119	@ 0x77
 800093c:	f7ff ff5f 	bl	80007fe <SD_SendCmd>
 8000940:	4603      	mov	r3, r0
 8000942:	2b01      	cmp	r3, #1
 8000944:	d807      	bhi.n	8000956 <SD_disk_initialize+0xae>
 8000946:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800094a:	2069      	movs	r0, #105	@ 0x69
 800094c:	f7ff ff57 	bl	80007fe <SD_SendCmd>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d004      	beq.n	8000960 <SD_disk_initialize+0xb8>
 8000956:	4b45      	ldr	r3, [pc, #276]	@ (8000a6c <SD_disk_initialize+0x1c4>)
 8000958:	881b      	ldrh	r3, [r3, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d1ec      	bne.n	8000938 <SD_disk_initialize+0x90>
 800095e:	e000      	b.n	8000962 <SD_disk_initialize+0xba>
 8000960:	bf00      	nop
 8000962:	4b42      	ldr	r3, [pc, #264]	@ (8000a6c <SD_disk_initialize+0x1c4>)
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d062      	beq.n	8000a30 <SD_disk_initialize+0x188>
 800096a:	2100      	movs	r1, #0
 800096c:	207a      	movs	r0, #122	@ 0x7a
 800096e:	f7ff ff46 	bl	80007fe <SD_SendCmd>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d15b      	bne.n	8000a30 <SD_disk_initialize+0x188>
 8000978:	2300      	movs	r3, #0
 800097a:	73fb      	strb	r3, [r7, #15]
 800097c:	e00c      	b.n	8000998 <SD_disk_initialize+0xf0>
 800097e:	7bfc      	ldrb	r4, [r7, #15]
 8000980:	f7ff fe2e 	bl	80005e0 <SPI_RxByte>
 8000984:	4603      	mov	r3, r0
 8000986:	461a      	mov	r2, r3
 8000988:	f104 0310 	add.w	r3, r4, #16
 800098c:	443b      	add	r3, r7
 800098e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000992:	7bfb      	ldrb	r3, [r7, #15]
 8000994:	3301      	adds	r3, #1
 8000996:	73fb      	strb	r3, [r7, #15]
 8000998:	7bfb      	ldrb	r3, [r7, #15]
 800099a:	2b03      	cmp	r3, #3
 800099c:	d9ef      	bls.n	800097e <SD_disk_initialize+0xd6>
 800099e:	7a3b      	ldrb	r3, [r7, #8]
 80009a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <SD_disk_initialize+0x104>
 80009a8:	230c      	movs	r3, #12
 80009aa:	e000      	b.n	80009ae <SD_disk_initialize+0x106>
 80009ac:	2304      	movs	r3, #4
 80009ae:	73bb      	strb	r3, [r7, #14]
 80009b0:	e03e      	b.n	8000a30 <SD_disk_initialize+0x188>
 80009b2:	2100      	movs	r1, #0
 80009b4:	2077      	movs	r0, #119	@ 0x77
 80009b6:	f7ff ff22 	bl	80007fe <SD_SendCmd>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d808      	bhi.n	80009d2 <SD_disk_initialize+0x12a>
 80009c0:	2100      	movs	r1, #0
 80009c2:	2069      	movs	r0, #105	@ 0x69
 80009c4:	f7ff ff1b 	bl	80007fe <SD_SendCmd>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d801      	bhi.n	80009d2 <SD_disk_initialize+0x12a>
 80009ce:	2302      	movs	r3, #2
 80009d0:	e000      	b.n	80009d4 <SD_disk_initialize+0x12c>
 80009d2:	2301      	movs	r3, #1
 80009d4:	73bb      	strb	r3, [r7, #14]
 80009d6:	7bbb      	ldrb	r3, [r7, #14]
 80009d8:	2b02      	cmp	r3, #2
 80009da:	d10e      	bne.n	80009fa <SD_disk_initialize+0x152>
 80009dc:	2100      	movs	r1, #0
 80009de:	2077      	movs	r0, #119	@ 0x77
 80009e0:	f7ff ff0d 	bl	80007fe <SD_SendCmd>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d80e      	bhi.n	8000a08 <SD_disk_initialize+0x160>
 80009ea:	2100      	movs	r1, #0
 80009ec:	2069      	movs	r0, #105	@ 0x69
 80009ee:	f7ff ff06 	bl	80007fe <SD_SendCmd>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d107      	bne.n	8000a08 <SD_disk_initialize+0x160>
 80009f8:	e00c      	b.n	8000a14 <SD_disk_initialize+0x16c>
 80009fa:	2100      	movs	r1, #0
 80009fc:	2041      	movs	r0, #65	@ 0x41
 80009fe:	f7ff fefe 	bl	80007fe <SD_SendCmd>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d004      	beq.n	8000a12 <SD_disk_initialize+0x16a>
 8000a08:	4b18      	ldr	r3, [pc, #96]	@ (8000a6c <SD_disk_initialize+0x1c4>)
 8000a0a:	881b      	ldrh	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d1e2      	bne.n	80009d6 <SD_disk_initialize+0x12e>
 8000a10:	e000      	b.n	8000a14 <SD_disk_initialize+0x16c>
 8000a12:	bf00      	nop
 8000a14:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <SD_disk_initialize+0x1c4>)
 8000a16:	881b      	ldrh	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d007      	beq.n	8000a2c <SD_disk_initialize+0x184>
 8000a1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a20:	2050      	movs	r0, #80	@ 0x50
 8000a22:	f7ff feec 	bl	80007fe <SD_SendCmd>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <SD_disk_initialize+0x188>
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	73bb      	strb	r3, [r7, #14]
 8000a30:	4a0f      	ldr	r2, [pc, #60]	@ (8000a70 <SD_disk_initialize+0x1c8>)
 8000a32:	7bbb      	ldrb	r3, [r7, #14]
 8000a34:	7013      	strb	r3, [r2, #0]
 8000a36:	f7ff fd91 	bl	800055c <DESELECT>
 8000a3a:	f7ff fdd1 	bl	80005e0 <SPI_RxByte>
 8000a3e:	7bbb      	ldrb	r3, [r7, #14]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d008      	beq.n	8000a56 <SD_disk_initialize+0x1ae>
 8000a44:	4b08      	ldr	r3, [pc, #32]	@ (8000a68 <SD_disk_initialize+0x1c0>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	f023 0301 	bic.w	r3, r3, #1
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	4b05      	ldr	r3, [pc, #20]	@ (8000a68 <SD_disk_initialize+0x1c0>)
 8000a52:	701a      	strb	r2, [r3, #0]
 8000a54:	e001      	b.n	8000a5a <SD_disk_initialize+0x1b2>
 8000a56:	f7ff fe49 	bl	80006ec <SD_PowerOff>
 8000a5a:	4b03      	ldr	r3, [pc, #12]	@ (8000a68 <SD_disk_initialize+0x1c0>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	4618      	mov	r0, r3
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd90      	pop	{r4, r7, pc}
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	200001d8 	.word	0x200001d8
 8000a70:	200001dc 	.word	0x200001dc

08000a74 <SD_disk_status>:
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <SD_disk_status+0x14>
 8000a84:	2301      	movs	r3, #1
 8000a86:	e002      	b.n	8000a8e <SD_disk_status+0x1a>
 8000a88:	4b04      	ldr	r3, [pc, #16]	@ (8000a9c <SD_disk_status+0x28>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	4618      	mov	r0, r3
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	20000000 	.word	0x20000000

08000aa0 <SD_disk_read>:
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60b9      	str	r1, [r7, #8]
 8000aa8:	607a      	str	r2, [r7, #4]
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	4603      	mov	r3, r0
 8000aae:	73fb      	strb	r3, [r7, #15]
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d102      	bne.n	8000abc <SD_disk_read+0x1c>
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d101      	bne.n	8000ac0 <SD_disk_read+0x20>
 8000abc:	2304      	movs	r3, #4
 8000abe:	e051      	b.n	8000b64 <SD_disk_read+0xc4>
 8000ac0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b6c <SD_disk_read+0xcc>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <SD_disk_read+0x32>
 8000ace:	2303      	movs	r3, #3
 8000ad0:	e048      	b.n	8000b64 <SD_disk_read+0xc4>
 8000ad2:	4b27      	ldr	r3, [pc, #156]	@ (8000b70 <SD_disk_read+0xd0>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	f003 0304 	and.w	r3, r3, #4
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d102      	bne.n	8000ae4 <SD_disk_read+0x44>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	025b      	lsls	r3, r3, #9
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	f7ff fd2c 	bl	8000540 <SELECT>
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d111      	bne.n	8000b12 <SD_disk_read+0x72>
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	2051      	movs	r0, #81	@ 0x51
 8000af2:	f7ff fe84 	bl	80007fe <SD_SendCmd>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d129      	bne.n	8000b50 <SD_disk_read+0xb0>
 8000afc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b00:	68b8      	ldr	r0, [r7, #8]
 8000b02:	f7ff fe0b 	bl	800071c <SD_RxDataBlock>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d021      	beq.n	8000b50 <SD_disk_read+0xb0>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	e01e      	b.n	8000b50 <SD_disk_read+0xb0>
 8000b12:	6879      	ldr	r1, [r7, #4]
 8000b14:	2052      	movs	r0, #82	@ 0x52
 8000b16:	f7ff fe72 	bl	80007fe <SD_SendCmd>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d117      	bne.n	8000b50 <SD_disk_read+0xb0>
 8000b20:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b24:	68b8      	ldr	r0, [r7, #8]
 8000b26:	f7ff fdf9 	bl	800071c <SD_RxDataBlock>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d00a      	beq.n	8000b46 <SD_disk_read+0xa6>
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	603b      	str	r3, [r7, #0]
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d1ed      	bne.n	8000b20 <SD_disk_read+0x80>
 8000b44:	e000      	b.n	8000b48 <SD_disk_read+0xa8>
 8000b46:	bf00      	nop
 8000b48:	2100      	movs	r1, #0
 8000b4a:	204c      	movs	r0, #76	@ 0x4c
 8000b4c:	f7ff fe57 	bl	80007fe <SD_SendCmd>
 8000b50:	f7ff fd04 	bl	800055c <DESELECT>
 8000b54:	f7ff fd44 	bl	80005e0 <SPI_RxByte>
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	bf14      	ite	ne
 8000b5e:	2301      	movne	r3, #1
 8000b60:	2300      	moveq	r3, #0
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	4618      	mov	r0, r3
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	200001dc 	.word	0x200001dc

08000b74 <SD_disk_write>:
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60b9      	str	r1, [r7, #8]
 8000b7c:	607a      	str	r2, [r7, #4]
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	4603      	mov	r3, r0
 8000b82:	73fb      	strb	r3, [r7, #15]
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d102      	bne.n	8000b90 <SD_disk_write+0x1c>
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d101      	bne.n	8000b94 <SD_disk_write+0x20>
 8000b90:	2304      	movs	r3, #4
 8000b92:	e06b      	b.n	8000c6c <SD_disk_write+0xf8>
 8000b94:	4b37      	ldr	r3, [pc, #220]	@ (8000c74 <SD_disk_write+0x100>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <SD_disk_write+0x32>
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	e062      	b.n	8000c6c <SD_disk_write+0xf8>
 8000ba6:	4b33      	ldr	r3, [pc, #204]	@ (8000c74 <SD_disk_write+0x100>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	f003 0304 	and.w	r3, r3, #4
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <SD_disk_write+0x44>
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	e059      	b.n	8000c6c <SD_disk_write+0xf8>
 8000bb8:	4b2f      	ldr	r3, [pc, #188]	@ (8000c78 <SD_disk_write+0x104>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	f003 0304 	and.w	r3, r3, #4
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d102      	bne.n	8000bca <SD_disk_write+0x56>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	025b      	lsls	r3, r3, #9
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	f7ff fcb9 	bl	8000540 <SELECT>
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d110      	bne.n	8000bf6 <SD_disk_write+0x82>
 8000bd4:	6879      	ldr	r1, [r7, #4]
 8000bd6:	2058      	movs	r0, #88	@ 0x58
 8000bd8:	f7ff fe11 	bl	80007fe <SD_SendCmd>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d13a      	bne.n	8000c58 <SD_disk_write+0xe4>
 8000be2:	21fe      	movs	r1, #254	@ 0xfe
 8000be4:	68b8      	ldr	r0, [r7, #8]
 8000be6:	f7ff fdc7 	bl	8000778 <SD_TxDataBlock>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d033      	beq.n	8000c58 <SD_disk_write+0xe4>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	e030      	b.n	8000c58 <SD_disk_write+0xe4>
 8000bf6:	4b20      	ldr	r3, [pc, #128]	@ (8000c78 <SD_disk_write+0x104>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d007      	beq.n	8000c12 <SD_disk_write+0x9e>
 8000c02:	2100      	movs	r1, #0
 8000c04:	2077      	movs	r0, #119	@ 0x77
 8000c06:	f7ff fdfa 	bl	80007fe <SD_SendCmd>
 8000c0a:	6839      	ldr	r1, [r7, #0]
 8000c0c:	2057      	movs	r0, #87	@ 0x57
 8000c0e:	f7ff fdf6 	bl	80007fe <SD_SendCmd>
 8000c12:	6879      	ldr	r1, [r7, #4]
 8000c14:	2059      	movs	r0, #89	@ 0x59
 8000c16:	f7ff fdf2 	bl	80007fe <SD_SendCmd>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d11b      	bne.n	8000c58 <SD_disk_write+0xe4>
 8000c20:	21fc      	movs	r1, #252	@ 0xfc
 8000c22:	68b8      	ldr	r0, [r7, #8]
 8000c24:	f7ff fda8 	bl	8000778 <SD_TxDataBlock>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d00a      	beq.n	8000c44 <SD_disk_write+0xd0>
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d1ee      	bne.n	8000c20 <SD_disk_write+0xac>
 8000c42:	e000      	b.n	8000c46 <SD_disk_write+0xd2>
 8000c44:	bf00      	nop
 8000c46:	21fd      	movs	r1, #253	@ 0xfd
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f7ff fd95 	bl	8000778 <SD_TxDataBlock>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d101      	bne.n	8000c58 <SD_disk_write+0xe4>
 8000c54:	2301      	movs	r3, #1
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	f7ff fc80 	bl	800055c <DESELECT>
 8000c5c:	f7ff fcc0 	bl	80005e0 <SPI_RxByte>
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	bf14      	ite	ne
 8000c66:	2301      	movne	r3, #1
 8000c68:	2300      	moveq	r3, #0
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000000 	.word	0x20000000
 8000c78:	200001dc 	.word	0x200001dc

08000c7c <SD_disk_ioctl>:
 8000c7c:	b590      	push	{r4, r7, lr}
 8000c7e:	b08b      	sub	sp, #44	@ 0x2c
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	603a      	str	r2, [r7, #0]
 8000c86:	71fb      	strb	r3, [r7, #7]
 8000c88:	460b      	mov	r3, r1
 8000c8a:	71bb      	strb	r3, [r7, #6]
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	623b      	str	r3, [r7, #32]
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <SD_disk_ioctl+0x1e>
 8000c96:	2304      	movs	r3, #4
 8000c98:	e113      	b.n	8000ec2 <SD_disk_ioctl+0x246>
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000ca0:	79bb      	ldrb	r3, [r7, #6]
 8000ca2:	2b05      	cmp	r3, #5
 8000ca4:	d124      	bne.n	8000cf0 <SD_disk_ioctl+0x74>
 8000ca6:	6a3b      	ldr	r3, [r7, #32]
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	d012      	beq.n	8000cd4 <SD_disk_ioctl+0x58>
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	dc1a      	bgt.n	8000ce8 <SD_disk_ioctl+0x6c>
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d002      	beq.n	8000cbc <SD_disk_ioctl+0x40>
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d006      	beq.n	8000cc8 <SD_disk_ioctl+0x4c>
 8000cba:	e015      	b.n	8000ce8 <SD_disk_ioctl+0x6c>
 8000cbc:	f7ff fd16 	bl	80006ec <SD_PowerOff>
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000cc6:	e0fa      	b.n	8000ebe <SD_disk_ioctl+0x242>
 8000cc8:	f7ff fcce 	bl	8000668 <SD_PowerOn>
 8000ccc:	2300      	movs	r3, #0
 8000cce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000cd2:	e0f4      	b.n	8000ebe <SD_disk_ioctl+0x242>
 8000cd4:	6a3b      	ldr	r3, [r7, #32]
 8000cd6:	1c5c      	adds	r4, r3, #1
 8000cd8:	f7ff fd14 	bl	8000704 <SD_CheckPower>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	7023      	strb	r3, [r4, #0]
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000ce6:	e0ea      	b.n	8000ebe <SD_disk_ioctl+0x242>
 8000ce8:	2304      	movs	r3, #4
 8000cea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000cee:	e0e6      	b.n	8000ebe <SD_disk_ioctl+0x242>
 8000cf0:	4b76      	ldr	r3, [pc, #472]	@ (8000ecc <SD_disk_ioctl+0x250>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <SD_disk_ioctl+0x86>
 8000cfe:	2303      	movs	r3, #3
 8000d00:	e0df      	b.n	8000ec2 <SD_disk_ioctl+0x246>
 8000d02:	f7ff fc1d 	bl	8000540 <SELECT>
 8000d06:	79bb      	ldrb	r3, [r7, #6]
 8000d08:	2b0d      	cmp	r3, #13
 8000d0a:	f200 80c9 	bhi.w	8000ea0 <SD_disk_ioctl+0x224>
 8000d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8000d14 <SD_disk_ioctl+0x98>)
 8000d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d14:	08000e0b 	.word	0x08000e0b
 8000d18:	08000d4d 	.word	0x08000d4d
 8000d1c:	08000dfb 	.word	0x08000dfb
 8000d20:	08000ea1 	.word	0x08000ea1
 8000d24:	08000ea1 	.word	0x08000ea1
 8000d28:	08000ea1 	.word	0x08000ea1
 8000d2c:	08000ea1 	.word	0x08000ea1
 8000d30:	08000ea1 	.word	0x08000ea1
 8000d34:	08000ea1 	.word	0x08000ea1
 8000d38:	08000ea1 	.word	0x08000ea1
 8000d3c:	08000ea1 	.word	0x08000ea1
 8000d40:	08000e1d 	.word	0x08000e1d
 8000d44:	08000e41 	.word	0x08000e41
 8000d48:	08000e65 	.word	0x08000e65
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2049      	movs	r0, #73	@ 0x49
 8000d50:	f7ff fd55 	bl	80007fe <SD_SendCmd>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f040 80a6 	bne.w	8000ea8 <SD_disk_ioctl+0x22c>
 8000d5c:	f107 030c 	add.w	r3, r7, #12
 8000d60:	2110      	movs	r1, #16
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fcda 	bl	800071c <SD_RxDataBlock>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f000 809c 	beq.w	8000ea8 <SD_disk_ioctl+0x22c>
 8000d70:	7b3b      	ldrb	r3, [r7, #12]
 8000d72:	099b      	lsrs	r3, r3, #6
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d10d      	bne.n	8000d96 <SD_disk_ioctl+0x11a>
 8000d7a:	7d7b      	ldrb	r3, [r7, #21]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	7d3b      	ldrb	r3, [r7, #20]
 8000d80:	021b      	lsls	r3, r3, #8
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	4413      	add	r3, r2
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	3301      	adds	r3, #1
 8000d8a:	83fb      	strh	r3, [r7, #30]
 8000d8c:	8bfb      	ldrh	r3, [r7, #30]
 8000d8e:	029a      	lsls	r2, r3, #10
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	e02d      	b.n	8000df2 <SD_disk_ioctl+0x176>
 8000d96:	7c7b      	ldrb	r3, [r7, #17]
 8000d98:	f003 030f 	and.w	r3, r3, #15
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	7dbb      	ldrb	r3, [r7, #22]
 8000da0:	09db      	lsrs	r3, r3, #7
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	4413      	add	r3, r2
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	7d7b      	ldrb	r3, [r7, #21]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	f003 0306 	and.w	r3, r3, #6
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	4413      	add	r3, r2
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	3302      	adds	r3, #2
 8000dba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000dbe:	7d3b      	ldrb	r3, [r7, #20]
 8000dc0:	099b      	lsrs	r3, r3, #6
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	7cfb      	ldrb	r3, [r7, #19]
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	4413      	add	r3, r2
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	7cbb      	ldrb	r3, [r7, #18]
 8000dd2:	029b      	lsls	r3, r3, #10
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	4413      	add	r3, r2
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	3301      	adds	r3, #1
 8000de2:	83fb      	strh	r3, [r7, #30]
 8000de4:	8bfa      	ldrh	r2, [r7, #30]
 8000de6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000dea:	3b09      	subs	r3, #9
 8000dec:	409a      	lsls	r2, r3
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	2300      	movs	r3, #0
 8000df4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000df8:	e056      	b.n	8000ea8 <SD_disk_ioctl+0x22c>
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e00:	801a      	strh	r2, [r3, #0]
 8000e02:	2300      	movs	r3, #0
 8000e04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000e08:	e055      	b.n	8000eb6 <SD_disk_ioctl+0x23a>
 8000e0a:	f7ff fc13 	bl	8000634 <SD_ReadyWait>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2bff      	cmp	r3, #255	@ 0xff
 8000e12:	d14b      	bne.n	8000eac <SD_disk_ioctl+0x230>
 8000e14:	2300      	movs	r3, #0
 8000e16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000e1a:	e047      	b.n	8000eac <SD_disk_ioctl+0x230>
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	2049      	movs	r0, #73	@ 0x49
 8000e20:	f7ff fced 	bl	80007fe <SD_SendCmd>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d142      	bne.n	8000eb0 <SD_disk_ioctl+0x234>
 8000e2a:	2110      	movs	r1, #16
 8000e2c:	6a38      	ldr	r0, [r7, #32]
 8000e2e:	f7ff fc75 	bl	800071c <SD_RxDataBlock>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d03b      	beq.n	8000eb0 <SD_disk_ioctl+0x234>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000e3e:	e037      	b.n	8000eb0 <SD_disk_ioctl+0x234>
 8000e40:	2100      	movs	r1, #0
 8000e42:	204a      	movs	r0, #74	@ 0x4a
 8000e44:	f7ff fcdb 	bl	80007fe <SD_SendCmd>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d132      	bne.n	8000eb4 <SD_disk_ioctl+0x238>
 8000e4e:	2110      	movs	r1, #16
 8000e50:	6a38      	ldr	r0, [r7, #32]
 8000e52:	f7ff fc63 	bl	800071c <SD_RxDataBlock>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d02b      	beq.n	8000eb4 <SD_disk_ioctl+0x238>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000e62:	e027      	b.n	8000eb4 <SD_disk_ioctl+0x238>
 8000e64:	2100      	movs	r1, #0
 8000e66:	207a      	movs	r0, #122	@ 0x7a
 8000e68:	f7ff fcc9 	bl	80007fe <SD_SendCmd>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d116      	bne.n	8000ea0 <SD_disk_ioctl+0x224>
 8000e72:	2300      	movs	r3, #0
 8000e74:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000e78:	e00b      	b.n	8000e92 <SD_disk_ioctl+0x216>
 8000e7a:	6a3c      	ldr	r4, [r7, #32]
 8000e7c:	1c63      	adds	r3, r4, #1
 8000e7e:	623b      	str	r3, [r7, #32]
 8000e80:	f7ff fbae 	bl	80005e0 <SPI_RxByte>
 8000e84:	4603      	mov	r3, r0
 8000e86:	7023      	strb	r3, [r4, #0]
 8000e88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000e92:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e96:	2b03      	cmp	r3, #3
 8000e98:	d9ef      	bls.n	8000e7a <SD_disk_ioctl+0x1fe>
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000ea6:	e006      	b.n	8000eb6 <SD_disk_ioctl+0x23a>
 8000ea8:	bf00      	nop
 8000eaa:	e004      	b.n	8000eb6 <SD_disk_ioctl+0x23a>
 8000eac:	bf00      	nop
 8000eae:	e002      	b.n	8000eb6 <SD_disk_ioctl+0x23a>
 8000eb0:	bf00      	nop
 8000eb2:	e000      	b.n	8000eb6 <SD_disk_ioctl+0x23a>
 8000eb4:	bf00      	nop
 8000eb6:	f7ff fb51 	bl	800055c <DESELECT>
 8000eba:	f7ff fb91 	bl	80005e0 <SPI_RxByte>
 8000ebe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	372c      	adds	r7, #44	@ 0x2c
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd90      	pop	{r4, r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000000 	.word	0x20000000

08000ed0 <LCD_Init>:


//***************************************************************************************************************************************
// Función para inicializar LCD
//***************************************************************************************************************************************
void LCD_Init(void) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0

	//****************************************
	// Secuencia de Inicialización
	//****************************************
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, SD_SS_Pin, GPIO_PIN_SET);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	2140      	movs	r1, #64	@ 0x40
 8000ed8:	4878      	ldr	r0, [pc, #480]	@ (80010bc <LCD_Init+0x1ec>)
 8000eda:	f002 fa59 	bl	8003390 <HAL_GPIO_WritePin>
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin | LCD_WR_Pin | LCD_RS_Pin,
 8000ede:	2201      	movs	r2, #1
 8000ee0:	2113      	movs	r1, #19
 8000ee2:	4877      	ldr	r0, [pc, #476]	@ (80010c0 <LCD_Init+0x1f0>)
 8000ee4:	f002 fa54 	bl	8003390 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	2102      	movs	r1, #2
 8000eec:	4875      	ldr	r0, [pc, #468]	@ (80010c4 <LCD_Init+0x1f4>)
 8000eee:	f002 fa4f 	bl	8003390 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000ef2:	2005      	movs	r0, #5
 8000ef4:	f001 febe 	bl	8002c74 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2102      	movs	r1, #2
 8000efc:	4871      	ldr	r0, [pc, #452]	@ (80010c4 <LCD_Init+0x1f4>)
 8000efe:	f002 fa47 	bl	8003390 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000f02:	2014      	movs	r0, #20
 8000f04:	f001 feb6 	bl	8002c74 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2102      	movs	r1, #2
 8000f0c:	486d      	ldr	r0, [pc, #436]	@ (80010c4 <LCD_Init+0x1f4>)
 8000f0e:	f002 fa3f 	bl	8003390 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8000f12:	2096      	movs	r0, #150	@ 0x96
 8000f14:	f001 feae 	bl	8002c74 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, SD_SS_Pin, GPIO_PIN_RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2140      	movs	r1, #64	@ 0x40
 8000f1c:	4867      	ldr	r0, [pc, #412]	@ (80010bc <LCD_Init+0x1ec>)
 8000f1e:	f002 fa37 	bl	8003390 <HAL_GPIO_WritePin>

	//****************************************
	LCD_CMD(0xE9);  // SETPANELRELATED
 8000f22:	20e9      	movs	r0, #233	@ 0xe9
 8000f24:	f000 f8d0 	bl	80010c8 <LCD_CMD>
	LCD_DATA(0x20);
 8000f28:	2020      	movs	r0, #32
 8000f2a:	f000 f907 	bl	800113c <LCD_DATA>
	//****************************************
	LCD_CMD(0x11); // Exit Sleep SLEEP OUT (SLPOUT)
 8000f2e:	2011      	movs	r0, #17
 8000f30:	f000 f8ca 	bl	80010c8 <LCD_CMD>
	HAL_Delay(100);
 8000f34:	2064      	movs	r0, #100	@ 0x64
 8000f36:	f001 fe9d 	bl	8002c74 <HAL_Delay>
	//****************************************
	LCD_CMD(0xD1);    // (SETVCOM)
 8000f3a:	20d1      	movs	r0, #209	@ 0xd1
 8000f3c:	f000 f8c4 	bl	80010c8 <LCD_CMD>
	LCD_DATA(0x00);
 8000f40:	2000      	movs	r0, #0
 8000f42:	f000 f8fb 	bl	800113c <LCD_DATA>
	LCD_DATA(0x71);
 8000f46:	2071      	movs	r0, #113	@ 0x71
 8000f48:	f000 f8f8 	bl	800113c <LCD_DATA>
	LCD_DATA(0x19);
 8000f4c:	2019      	movs	r0, #25
 8000f4e:	f000 f8f5 	bl	800113c <LCD_DATA>
	//****************************************
	LCD_CMD(0xD0);   // (SETPOWER)
 8000f52:	20d0      	movs	r0, #208	@ 0xd0
 8000f54:	f000 f8b8 	bl	80010c8 <LCD_CMD>
	LCD_DATA(0x07);
 8000f58:	2007      	movs	r0, #7
 8000f5a:	f000 f8ef 	bl	800113c <LCD_DATA>
	LCD_DATA(0x01);
 8000f5e:	2001      	movs	r0, #1
 8000f60:	f000 f8ec 	bl	800113c <LCD_DATA>
	LCD_DATA(0x08);
 8000f64:	2008      	movs	r0, #8
 8000f66:	f000 f8e9 	bl	800113c <LCD_DATA>
	//****************************************
	LCD_CMD(0x36);  // (MEMORYACCESS)
 8000f6a:	2036      	movs	r0, #54	@ 0x36
 8000f6c:	f000 f8ac 	bl	80010c8 <LCD_CMD>
	LCD_DATA(0x40 | 0x80 | 0x20 | 0x08); // LCD_DATA(0x19);
 8000f70:	20e8      	movs	r0, #232	@ 0xe8
 8000f72:	f000 f8e3 	bl	800113c <LCD_DATA>
	//****************************************
	LCD_CMD(0x3A); // Set_pixel_format (PIXELFORMAT)
 8000f76:	203a      	movs	r0, #58	@ 0x3a
 8000f78:	f000 f8a6 	bl	80010c8 <LCD_CMD>
	LCD_DATA(0x05); // color setings, 05h - 16bit pixel, 11h - 3bit pixel
 8000f7c:	2005      	movs	r0, #5
 8000f7e:	f000 f8dd 	bl	800113c <LCD_DATA>
	//****************************************
	LCD_CMD(0xC1);    // (POWERCONTROL2)
 8000f82:	20c1      	movs	r0, #193	@ 0xc1
 8000f84:	f000 f8a0 	bl	80010c8 <LCD_CMD>
	LCD_DATA(0x10);
 8000f88:	2010      	movs	r0, #16
 8000f8a:	f000 f8d7 	bl	800113c <LCD_DATA>
	LCD_DATA(0x10);
 8000f8e:	2010      	movs	r0, #16
 8000f90:	f000 f8d4 	bl	800113c <LCD_DATA>
	LCD_DATA(0x02);
 8000f94:	2002      	movs	r0, #2
 8000f96:	f000 f8d1 	bl	800113c <LCD_DATA>
	LCD_DATA(0x02);
 8000f9a:	2002      	movs	r0, #2
 8000f9c:	f000 f8ce 	bl	800113c <LCD_DATA>
	//****************************************
	LCD_CMD(0xC0); // Set Default Gamma (POWERCONTROL1)
 8000fa0:	20c0      	movs	r0, #192	@ 0xc0
 8000fa2:	f000 f891 	bl	80010c8 <LCD_CMD>
	LCD_DATA(0x00);
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f000 f8c8 	bl	800113c <LCD_DATA>
	LCD_DATA(0x35);
 8000fac:	2035      	movs	r0, #53	@ 0x35
 8000fae:	f000 f8c5 	bl	800113c <LCD_DATA>
	LCD_DATA(0x00);
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f000 f8c2 	bl	800113c <LCD_DATA>
	LCD_DATA(0x00);
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f000 f8bf 	bl	800113c <LCD_DATA>
	LCD_DATA(0x01);
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f000 f8bc 	bl	800113c <LCD_DATA>
	LCD_DATA(0x02);
 8000fc4:	2002      	movs	r0, #2
 8000fc6:	f000 f8b9 	bl	800113c <LCD_DATA>
	//****************************************
	LCD_CMD(0xC5); // Set Frame Rate (VCOMCONTROL1)
 8000fca:	20c5      	movs	r0, #197	@ 0xc5
 8000fcc:	f000 f87c 	bl	80010c8 <LCD_CMD>
	LCD_DATA(0x04); // 72Hz
 8000fd0:	2004      	movs	r0, #4
 8000fd2:	f000 f8b3 	bl	800113c <LCD_DATA>
	//****************************************
	LCD_CMD(0xD2); // Power Settings  (SETPWRNORMAL)
 8000fd6:	20d2      	movs	r0, #210	@ 0xd2
 8000fd8:	f000 f876 	bl	80010c8 <LCD_CMD>
	LCD_DATA(0x01);
 8000fdc:	2001      	movs	r0, #1
 8000fde:	f000 f8ad 	bl	800113c <LCD_DATA>
	LCD_DATA(0x44);
 8000fe2:	2044      	movs	r0, #68	@ 0x44
 8000fe4:	f000 f8aa 	bl	800113c <LCD_DATA>
	//****************************************
	LCD_CMD(0xC8); //Set Gamma  (GAMMASET)
 8000fe8:	20c8      	movs	r0, #200	@ 0xc8
 8000fea:	f000 f86d 	bl	80010c8 <LCD_CMD>
	LCD_DATA(0x04);
 8000fee:	2004      	movs	r0, #4
 8000ff0:	f000 f8a4 	bl	800113c <LCD_DATA>
	LCD_DATA(0x67);
 8000ff4:	2067      	movs	r0, #103	@ 0x67
 8000ff6:	f000 f8a1 	bl	800113c <LCD_DATA>
	LCD_DATA(0x35);
 8000ffa:	2035      	movs	r0, #53	@ 0x35
 8000ffc:	f000 f89e 	bl	800113c <LCD_DATA>
	LCD_DATA(0x04);
 8001000:	2004      	movs	r0, #4
 8001002:	f000 f89b 	bl	800113c <LCD_DATA>
	LCD_DATA(0x08);
 8001006:	2008      	movs	r0, #8
 8001008:	f000 f898 	bl	800113c <LCD_DATA>
	LCD_DATA(0x06);
 800100c:	2006      	movs	r0, #6
 800100e:	f000 f895 	bl	800113c <LCD_DATA>
	LCD_DATA(0x24);
 8001012:	2024      	movs	r0, #36	@ 0x24
 8001014:	f000 f892 	bl	800113c <LCD_DATA>
	LCD_DATA(0x01);
 8001018:	2001      	movs	r0, #1
 800101a:	f000 f88f 	bl	800113c <LCD_DATA>
	LCD_DATA(0x37);
 800101e:	2037      	movs	r0, #55	@ 0x37
 8001020:	f000 f88c 	bl	800113c <LCD_DATA>
	LCD_DATA(0x40);
 8001024:	2040      	movs	r0, #64	@ 0x40
 8001026:	f000 f889 	bl	800113c <LCD_DATA>
	LCD_DATA(0x03);
 800102a:	2003      	movs	r0, #3
 800102c:	f000 f886 	bl	800113c <LCD_DATA>
	LCD_DATA(0x10);
 8001030:	2010      	movs	r0, #16
 8001032:	f000 f883 	bl	800113c <LCD_DATA>
	LCD_DATA(0x08);
 8001036:	2008      	movs	r0, #8
 8001038:	f000 f880 	bl	800113c <LCD_DATA>
	LCD_DATA(0x80);
 800103c:	2080      	movs	r0, #128	@ 0x80
 800103e:	f000 f87d 	bl	800113c <LCD_DATA>
	LCD_DATA(0x00);
 8001042:	2000      	movs	r0, #0
 8001044:	f000 f87a 	bl	800113c <LCD_DATA>
	//****************************************
	LCD_CMD(0x2A); // Set_column_address 320px (CASET)
 8001048:	202a      	movs	r0, #42	@ 0x2a
 800104a:	f000 f83d 	bl	80010c8 <LCD_CMD>
	LCD_DATA(0x00);
 800104e:	2000      	movs	r0, #0
 8001050:	f000 f874 	bl	800113c <LCD_DATA>
	LCD_DATA(0x00);
 8001054:	2000      	movs	r0, #0
 8001056:	f000 f871 	bl	800113c <LCD_DATA>
	LCD_DATA(0x01);
 800105a:	2001      	movs	r0, #1
 800105c:	f000 f86e 	bl	800113c <LCD_DATA>
	LCD_DATA(0x3F);
 8001060:	203f      	movs	r0, #63	@ 0x3f
 8001062:	f000 f86b 	bl	800113c <LCD_DATA>
	//****************************************
	LCD_CMD(0x2B); // Set_page_address 480px (PASET)
 8001066:	202b      	movs	r0, #43	@ 0x2b
 8001068:	f000 f82e 	bl	80010c8 <LCD_CMD>
	LCD_DATA(0x00);
 800106c:	2000      	movs	r0, #0
 800106e:	f000 f865 	bl	800113c <LCD_DATA>
	LCD_DATA(0x00);
 8001072:	2000      	movs	r0, #0
 8001074:	f000 f862 	bl	800113c <LCD_DATA>
	LCD_DATA(0x01);
 8001078:	2001      	movs	r0, #1
 800107a:	f000 f85f 	bl	800113c <LCD_DATA>
	LCD_DATA(0xE0);
 800107e:	20e0      	movs	r0, #224	@ 0xe0
 8001080:	f000 f85c 	bl	800113c <LCD_DATA>
	//  LCD_DATA(0x8F);
	LCD_CMD(0x29); //display on
 8001084:	2029      	movs	r0, #41	@ 0x29
 8001086:	f000 f81f 	bl	80010c8 <LCD_CMD>
	LCD_CMD(0x2C); //display on
 800108a:	202c      	movs	r0, #44	@ 0x2c
 800108c:	f000 f81c 	bl	80010c8 <LCD_CMD>

	LCD_CMD(ILI9341_INVOFF); //Invert Off
 8001090:	2020      	movs	r0, #32
 8001092:	f000 f819 	bl	80010c8 <LCD_CMD>
	HAL_Delay(120);
 8001096:	2078      	movs	r0, #120	@ 0x78
 8001098:	f001 fdec 	bl	8002c74 <HAL_Delay>
	LCD_CMD(ILI9341_SLPOUT);    //Exit Sleep
 800109c:	2011      	movs	r0, #17
 800109e:	f000 f813 	bl	80010c8 <LCD_CMD>
	HAL_Delay(120);
 80010a2:	2078      	movs	r0, #120	@ 0x78
 80010a4:	f001 fde6 	bl	8002c74 <HAL_Delay>
	LCD_CMD(ILI9341_DISPON);    //Display on
 80010a8:	2029      	movs	r0, #41	@ 0x29
 80010aa:	f000 f80d 	bl	80010c8 <LCD_CMD>
	HAL_GPIO_WritePin(GPIOB, SD_SS_Pin, GPIO_PIN_SET);
 80010ae:	2201      	movs	r2, #1
 80010b0:	2140      	movs	r1, #64	@ 0x40
 80010b2:	4802      	ldr	r0, [pc, #8]	@ (80010bc <LCD_Init+0x1ec>)
 80010b4:	f002 f96c 	bl	8003390 <HAL_GPIO_WritePin>
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40020400 	.word	0x40020400
 80010c0:	40020000 	.word	0x40020000
 80010c4:	40020800 	.word	0x40020800

080010c8 <LCD_CMD>:
//***************************************************************************************************************************************
// Función para enviar comandos a la LCD - parámetro (comando)
//***************************************************************************************************************************************
void LCD_CMD(uint8_t cmd) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2110      	movs	r1, #16
 80010d6:	4816      	ldr	r0, [pc, #88]	@ (8001130 <LCD_CMD+0x68>)
 80010d8:	f002 f95a 	bl	8003390 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	2102      	movs	r1, #2
 80010e0:	4813      	ldr	r0, [pc, #76]	@ (8001130 <LCD_CMD+0x68>)
 80010e2:	f002 f955 	bl	8003390 <HAL_GPIO_WritePin>

	for (int k = 0; k < 8; k++) HAL_GPIO_WritePin(lcd_ports[k], lcd_pins[k], cmd & (1 << k) ? SET:RESET);
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	e015      	b.n	8001118 <LCD_CMD+0x50>
 80010ec:	4a11      	ldr	r2, [pc, #68]	@ (8001134 <LCD_CMD+0x6c>)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010f4:	4a10      	ldr	r2, [pc, #64]	@ (8001138 <LCD_CMD+0x70>)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80010fc:	79fa      	ldrb	r2, [r7, #7]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	fa42 f303 	asr.w	r3, r2, r3
 8001104:	b2db      	uxtb	r3, r3
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	b2db      	uxtb	r3, r3
 800110c:	461a      	mov	r2, r3
 800110e:	f002 f93f 	bl	8003390 <HAL_GPIO_WritePin>
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	3301      	adds	r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2b07      	cmp	r3, #7
 800111c:	dde6      	ble.n	80010ec <LCD_CMD+0x24>

	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 800111e:	2201      	movs	r2, #1
 8001120:	2102      	movs	r1, #2
 8001122:	4803      	ldr	r0, [pc, #12]	@ (8001130 <LCD_CMD+0x68>)
 8001124:	f002 f934 	bl	8003390 <HAL_GPIO_WritePin>

}
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40020000 	.word	0x40020000
 8001134:	20000004 	.word	0x20000004
 8001138:	20000024 	.word	0x20000024

0800113c <LCD_DATA>:
//***************************************************************************************************************************************
// Función para enviar datos a la LCD - parámetro (dato)
//***************************************************************************************************************************************
void LCD_DATA(uint8_t data) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(SD_SS_GPIO_Port, SD_SS_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8001146:	2201      	movs	r2, #1
 8001148:	2110      	movs	r1, #16
 800114a:	4816      	ldr	r0, [pc, #88]	@ (80011a4 <LCD_DATA+0x68>)
 800114c:	f002 f920 	bl	8003390 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8001150:	2200      	movs	r2, #0
 8001152:	2102      	movs	r1, #2
 8001154:	4813      	ldr	r0, [pc, #76]	@ (80011a4 <LCD_DATA+0x68>)
 8001156:	f002 f91b 	bl	8003390 <HAL_GPIO_WritePin>

	for (int k = 0; k < 8; k++) HAL_GPIO_WritePin(lcd_ports[k], lcd_pins[k], data & (1 << k) ? SET:RESET);
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	e015      	b.n	800118c <LCD_DATA+0x50>
 8001160:	4a11      	ldr	r2, [pc, #68]	@ (80011a8 <LCD_DATA+0x6c>)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001168:	4a10      	ldr	r2, [pc, #64]	@ (80011ac <LCD_DATA+0x70>)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001170:	79fa      	ldrb	r2, [r7, #7]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	fa42 f303 	asr.w	r3, r2, r3
 8001178:	b2db      	uxtb	r3, r3
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	b2db      	uxtb	r3, r3
 8001180:	461a      	mov	r2, r3
 8001182:	f002 f905 	bl	8003390 <HAL_GPIO_WritePin>
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	3301      	adds	r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2b07      	cmp	r3, #7
 8001190:	dde6      	ble.n	8001160 <LCD_DATA+0x24>

	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8001192:	2201      	movs	r2, #1
 8001194:	2102      	movs	r1, #2
 8001196:	4803      	ldr	r0, [pc, #12]	@ (80011a4 <LCD_DATA+0x68>)
 8001198:	f002 f8fa 	bl	8003390 <HAL_GPIO_WritePin>
}
 800119c:	bf00      	nop
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40020000 	.word	0x40020000
 80011a8:	20000004 	.word	0x20000004
 80011ac:	20000024 	.word	0x20000024

080011b0 <SetWindows>:
//***************************************************************************************************************************************
// Función para definir rango de direcciones de memoria con las cuales se trabajara (se define una ventana)
//***************************************************************************************************************************************
void SetWindows(unsigned int x1, unsigned int y1, unsigned int x2,
		unsigned int y2) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
 80011bc:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x2a); // Set_column_address 4 parameters
 80011be:	202a      	movs	r0, #42	@ 0x2a
 80011c0:	f7ff ff82 	bl	80010c8 <LCD_CMD>
	LCD_DATA(x1 >> 8);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	0a1b      	lsrs	r3, r3, #8
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff ffb6 	bl	800113c <LCD_DATA>
	LCD_DATA(x1);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ffb1 	bl	800113c <LCD_DATA>
	LCD_DATA(x2 >> 8);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	0a1b      	lsrs	r3, r3, #8
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ffab 	bl	800113c <LCD_DATA>
	LCD_DATA(x2);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff ffa6 	bl	800113c <LCD_DATA>
	LCD_CMD(0x2b); // Set_page_address 4 parameters
 80011f0:	202b      	movs	r0, #43	@ 0x2b
 80011f2:	f7ff ff69 	bl	80010c8 <LCD_CMD>
	LCD_DATA(y1 >> 8);
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	0a1b      	lsrs	r3, r3, #8
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff9d 	bl	800113c <LCD_DATA>
	LCD_DATA(y1);
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff ff98 	bl	800113c <LCD_DATA>
	LCD_DATA(y2 >> 8);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	0a1b      	lsrs	r3, r3, #8
 8001210:	b2db      	uxtb	r3, r3
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff ff92 	bl	800113c <LCD_DATA>
	LCD_DATA(y2);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	b2db      	uxtb	r3, r3
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff8d 	bl	800113c <LCD_DATA>
	LCD_CMD(0x2c); // Write_memory_start
 8001222:	202c      	movs	r0, #44	@ 0x2c
 8001224:	f7ff ff50 	bl	80010c8 <LCD_CMD>
}
 8001228:	bf00      	nop
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <LCD_Clear>:
//***************************************************************************************************************************************
// Función para borrar la pantalla - parámetros (color)
//***************************************************************************************************************************************
void LCD_Clear(unsigned int c) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	unsigned int x, y;
	LCD_CMD(0x02c); // write_memory_start
 8001238:	202c      	movs	r0, #44	@ 0x2c
 800123a:	f7ff ff45 	bl	80010c8 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 800123e:	2201      	movs	r2, #1
 8001240:	2110      	movs	r1, #16
 8001242:	481b      	ldr	r0, [pc, #108]	@ (80012b0 <LCD_Clear+0x80>)
 8001244:	f002 f8a4 	bl	8003390 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SD_SS_GPIO_Port, SD_SS_Pin, GPIO_PIN_RESET);
 8001248:	2200      	movs	r2, #0
 800124a:	2140      	movs	r1, #64	@ 0x40
 800124c:	4819      	ldr	r0, [pc, #100]	@ (80012b4 <LCD_Clear+0x84>)
 800124e:	f002 f89f 	bl	8003390 <HAL_GPIO_WritePin>
	SetWindows(0, 0, 319, 239); // 479, 319);
 8001252:	23ef      	movs	r3, #239	@ 0xef
 8001254:	f240 123f 	movw	r2, #319	@ 0x13f
 8001258:	2100      	movs	r1, #0
 800125a:	2000      	movs	r0, #0
 800125c:	f7ff ffa8 	bl	80011b0 <SetWindows>
	for (x = 0; x < 320; x++)
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	e016      	b.n	8001294 <LCD_Clear+0x64>
		for (y = 0; y < 240; y++) {
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	e00d      	b.n	8001288 <LCD_Clear+0x58>
			LCD_DATA(c >> 8);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	0a1b      	lsrs	r3, r3, #8
 8001270:	b2db      	uxtb	r3, r3
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff ff62 	bl	800113c <LCD_DATA>
			LCD_DATA(c);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff5d 	bl	800113c <LCD_DATA>
		for (y = 0; y < 240; y++) {
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	3301      	adds	r3, #1
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	2bef      	cmp	r3, #239	@ 0xef
 800128c:	d9ee      	bls.n	800126c <LCD_Clear+0x3c>
	for (x = 0; x < 320; x++)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	3301      	adds	r3, #1
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800129a:	d3e4      	bcc.n	8001266 <LCD_Clear+0x36>
		}
	HAL_GPIO_WritePin(SD_SS_GPIO_Port, SD_SS_Pin, GPIO_PIN_SET);
 800129c:	2201      	movs	r2, #1
 800129e:	2140      	movs	r1, #64	@ 0x40
 80012a0:	4804      	ldr	r0, [pc, #16]	@ (80012b4 <LCD_Clear+0x84>)
 80012a2:	f002 f875 	bl	8003390 <HAL_GPIO_WritePin>
}
 80012a6:	bf00      	nop
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40020000 	.word	0x40020000
 80012b4:	40020400 	.word	0x40020400

080012b8 <LCD_Print>:
}
//***************************************************************************************************************************************
// Función para dibujar texto - parámetros ( texto, coordenada x, cordenada y, color, background)
//***************************************************************************************************************************************
void LCD_Print(char *text, int x, int y, int fontSize, int color,
		int background) {
 80012b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012bc:	b093      	sub	sp, #76	@ 0x4c
 80012be:	af00      	add	r7, sp, #0
 80012c0:	60f8      	str	r0, [r7, #12]
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
 80012c6:	603b      	str	r3, [r7, #0]
 80012c8:	466b      	mov	r3, sp
 80012ca:	461e      	mov	r6, r3

	int fontXSize;
	int fontYSize;

	if (fontSize == 1) {
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d103      	bne.n	80012da <LCD_Print+0x22>
		fontXSize = fontXSizeSmal;
 80012d2:	2308      	movs	r3, #8
 80012d4:	647b      	str	r3, [r7, #68]	@ 0x44
		fontYSize = fontYSizeSmal;
 80012d6:	230c      	movs	r3, #12
 80012d8:	643b      	str	r3, [r7, #64]	@ 0x40
	}
	if (fontSize == 2) {
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d103      	bne.n	80012e8 <LCD_Print+0x30>
		fontXSize = fontXSizeBig;
 80012e0:	2310      	movs	r3, #16
 80012e2:	647b      	str	r3, [r7, #68]	@ 0x44
		fontYSize = fontYSizeBig;
 80012e4:	2310      	movs	r3, #16
 80012e6:	643b      	str	r3, [r7, #64]	@ 0x40
	}
	if (fontSize == 3) {
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	2b03      	cmp	r3, #3
 80012ec:	d103      	bne.n	80012f6 <LCD_Print+0x3e>
			fontXSize = fontXSizeNum;
 80012ee:	2320      	movs	r3, #32
 80012f0:	647b      	str	r3, [r7, #68]	@ 0x44
			fontYSize = fontYSizeNum;
 80012f2:	2332      	movs	r3, #50	@ 0x32
 80012f4:	643b      	str	r3, [r7, #64]	@ 0x40
		}

	char charInput;
	int cLength = strlen(text);
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f7fe ff84 	bl	8000204 <strlen>
 80012fc:	4603      	mov	r3, r0
 80012fe:	627b      	str	r3, [r7, #36]	@ 0x24
	//Serial.println(cLength, DEC);
	int charDec;
	int c;
	//int charHex;
	char char_array[cLength + 1];
 8001300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001302:	1c59      	adds	r1, r3, #1
 8001304:	1e4b      	subs	r3, r1, #1
 8001306:	623b      	str	r3, [r7, #32]
 8001308:	460a      	mov	r2, r1
 800130a:	2300      	movs	r3, #0
 800130c:	4690      	mov	r8, r2
 800130e:	4699      	mov	r9, r3
 8001310:	f04f 0200 	mov.w	r2, #0
 8001314:	f04f 0300 	mov.w	r3, #0
 8001318:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800131c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001320:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001324:	460a      	mov	r2, r1
 8001326:	2300      	movs	r3, #0
 8001328:	4614      	mov	r4, r2
 800132a:	461d      	mov	r5, r3
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	f04f 0300 	mov.w	r3, #0
 8001334:	00eb      	lsls	r3, r5, #3
 8001336:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800133a:	00e2      	lsls	r2, r4, #3
 800133c:	460b      	mov	r3, r1
 800133e:	3307      	adds	r3, #7
 8001340:	08db      	lsrs	r3, r3, #3
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	ebad 0d03 	sub.w	sp, sp, r3
 8001348:	466b      	mov	r3, sp
 800134a:	3300      	adds	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
	for(int i = 0; text[i] != '\0'; i++){
 800134e:	2300      	movs	r3, #0
 8001350:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001352:	e00b      	b.n	800136c <LCD_Print+0xb4>
		char_array[i]=text[i];
 8001354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	4413      	add	r3, r2
 800135a:	7819      	ldrb	r1, [r3, #0]
 800135c:	69fa      	ldr	r2, [r7, #28]
 800135e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001360:	4413      	add	r3, r2
 8001362:	460a      	mov	r2, r1
 8001364:	701a      	strb	r2, [r3, #0]
	for(int i = 0; text[i] != '\0'; i++){
 8001366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001368:	3301      	adds	r3, #1
 800136a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800136c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	4413      	add	r3, r2
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1ed      	bne.n	8001354 <LCD_Print+0x9c>
	}

	//text.toCharArray(char_array, cLength + 1);

	for (int i = 0; i < cLength; i++) {
 8001378:	2300      	movs	r3, #0
 800137a:	637b      	str	r3, [r7, #52]	@ 0x34
 800137c:	e077      	b.n	800146e <LCD_Print+0x1b6>
		charInput = char_array[i];
 800137e:	69fa      	ldr	r2, [r7, #28]
 8001380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001382:	4413      	add	r3, r2
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	76fb      	strb	r3, [r7, #27]
		//Serial.println(char_array[i]);
		charDec = (int) charInput;
 8001388:	7efb      	ldrb	r3, [r7, #27]
 800138a:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(SD_SS_GPIO_Port, SD_SS_Pin, GPIO_PIN_RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	2140      	movs	r1, #64	@ 0x40
 8001390:	483c      	ldr	r0, [pc, #240]	@ (8001484 <LCD_Print+0x1cc>)
 8001392:	f001 fffd 	bl	8003390 <HAL_GPIO_WritePin>
		SetWindows(x + (i * fontXSize), y, x + (i * fontXSize) + fontXSize - 1, y + fontYSize);
 8001396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001398:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800139a:	fb03 f202 	mul.w	r2, r3, r2
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	4413      	add	r3, r2
 80013a2:	4618      	mov	r0, r3
 80013a4:	6879      	ldr	r1, [r7, #4]
 80013a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80013aa:	fb03 f202 	mul.w	r2, r3, r2
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	441a      	add	r2, r3
 80013b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013b4:	4413      	add	r3, r2
 80013b6:	3b01      	subs	r3, #1
 80013b8:	461c      	mov	r4, r3
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013be:	4413      	add	r3, r2
 80013c0:	4622      	mov	r2, r4
 80013c2:	f7ff fef5 	bl	80011b0 <SetWindows>
		long charHex1;
		for (int n = 0; n < fontYSize; n++) {
 80013c6:	2300      	movs	r3, #0
 80013c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013ca:	e044      	b.n	8001456 <LCD_Print+0x19e>
			if (fontSize == 1) {
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d10b      	bne.n	80013ea <LCD_Print+0x132>
				charHex1 = pgm_read_word_near(
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	3b20      	subs	r3, #32
 80013d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80013d8:	fb02 f303 	mul.w	r3, r2, r3
 80013dc:	461a      	mov	r2, r3
 80013de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013e0:	4413      	add	r3, r2
 80013e2:	4a29      	ldr	r2, [pc, #164]	@ (8001488 <LCD_Print+0x1d0>)
 80013e4:	4413      	add	r3, r2
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	633b      	str	r3, [r7, #48]	@ 0x30
						smallFont + ((charDec - 32) * fontYSize) + n);
			}
			if (fontSize == 2) {
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d10c      	bne.n	800140a <LCD_Print+0x152>
				charHex1 = pgm_read_word_near(
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	3b20      	subs	r3, #32
 80013f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80013f6:	fb02 f303 	mul.w	r3, r2, r3
 80013fa:	461a      	mov	r2, r3
 80013fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013fe:	4413      	add	r3, r2
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	4a22      	ldr	r2, [pc, #136]	@ (800148c <LCD_Print+0x1d4>)
 8001404:	4413      	add	r3, r2
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	633b      	str	r3, [r7, #48]	@ 0x30
						bigFont + ((charDec - 32) * fontYSize) + n);
			}
			for (int t = 1; t < fontXSize + 1; t++) {
 800140a:	2301      	movs	r3, #1
 800140c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800140e:	e01b      	b.n	8001448 <LCD_Print+0x190>
				if ((charHex1 & (1 << (fontXSize - t))) > 0) {
 8001410:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2201      	movs	r2, #1
 8001418:	409a      	lsls	r2, r3
 800141a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800141c:	4013      	ands	r3, r2
 800141e:	2b00      	cmp	r3, #0
 8001420:	dd02      	ble.n	8001428 <LCD_Print+0x170>
					c = color;
 8001422:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001424:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001426:	e001      	b.n	800142c <LCD_Print+0x174>
				} else {
					c = background;
 8001428:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800142a:	63fb      	str	r3, [r7, #60]	@ 0x3c
				}
				LCD_DATA(c >> 8);
 800142c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800142e:	121b      	asrs	r3, r3, #8
 8001430:	b2db      	uxtb	r3, r3
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff fe82 	bl	800113c <LCD_DATA>
				LCD_DATA(c);
 8001438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800143a:	b2db      	uxtb	r3, r3
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fe7d 	bl	800113c <LCD_DATA>
			for (int t = 1; t < fontXSize + 1; t++) {
 8001442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001444:	3301      	adds	r3, #1
 8001446:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001448:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800144a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800144c:	429a      	cmp	r2, r3
 800144e:	dadf      	bge.n	8001410 <LCD_Print+0x158>
		for (int n = 0; n < fontYSize; n++) {
 8001450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001452:	3301      	adds	r3, #1
 8001454:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001456:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001458:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800145a:	429a      	cmp	r2, r3
 800145c:	dbb6      	blt.n	80013cc <LCD_Print+0x114>
			}
		}
		HAL_GPIO_WritePin(SD_SS_GPIO_Port, SD_SS_Pin, GPIO_PIN_SET);
 800145e:	2201      	movs	r2, #1
 8001460:	2140      	movs	r1, #64	@ 0x40
 8001462:	4808      	ldr	r0, [pc, #32]	@ (8001484 <LCD_Print+0x1cc>)
 8001464:	f001 ff94 	bl	8003390 <HAL_GPIO_WritePin>
	for (int i = 0; i < cLength; i++) {
 8001468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800146a:	3301      	adds	r3, #1
 800146c:	637b      	str	r3, [r7, #52]	@ 0x34
 800146e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001472:	429a      	cmp	r2, r3
 8001474:	db83      	blt.n	800137e <LCD_Print+0xc6>
 8001476:	46b5      	mov	sp, r6
	}
}
 8001478:	bf00      	nop
 800147a:	374c      	adds	r7, #76	@ 0x4c
 800147c:	46bd      	mov	sp, r7
 800147e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001482:	bf00      	nop
 8001484:	40020400 	.word	0x40020400
 8001488:	0800a608 	.word	0x0800a608
 800148c:	0800aa7c 	.word	0x0800aa7c

08001490 <LCD_Bitmap>:
//***************************************************************************************************************************************
// Función para dibujar una imagen a partir de un arreglo de colores (Bitmap) Formato (Color 16bit R 5bits G 6bits B 5bits)
//***************************************************************************************************************************************
void LCD_Bitmap(unsigned int x, unsigned int y, unsigned int width,
		unsigned int height, unsigned char bitmap[]) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	@ 0x28
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
 800149c:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 800149e:	202c      	movs	r0, #44	@ 0x2c
 80014a0:	f7ff fe12 	bl	80010c8 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80014a4:	2201      	movs	r2, #1
 80014a6:	2110      	movs	r1, #16
 80014a8:	4824      	ldr	r0, [pc, #144]	@ (800153c <LCD_Bitmap+0xac>)
 80014aa:	f001 ff71 	bl	8003390 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SD_SS_GPIO_Port, SD_SS_Pin, GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2140      	movs	r1, #64	@ 0x40
 80014b2:	4823      	ldr	r0, [pc, #140]	@ (8001540 <LCD_Bitmap+0xb0>)
 80014b4:	f001 ff6c 	bl	8003390 <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + width;
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
	y2 = y + height;
 80014c0:	68ba      	ldr	r2, [r7, #8]
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	4413      	add	r3, r2
 80014c6:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	1e5a      	subs	r2, r3, #1
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	68b9      	ldr	r1, [r7, #8]
 80014d2:	68f8      	ldr	r0, [r7, #12]
 80014d4:	f7ff fe6c 	bl	80011b0 <SetWindows>
	unsigned int k = 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	627b      	str	r3, [r7, #36]	@ 0x24

	for (int i = 0; i < width; i++) {
 80014dc:	2300      	movs	r3, #0
 80014de:	623b      	str	r3, [r7, #32]
 80014e0:	e01e      	b.n	8001520 <LCD_Bitmap+0x90>
		for (int j = 0; j < height; j++) {
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
 80014e6:	e014      	b.n	8001512 <LCD_Bitmap+0x82>
			LCD_DATA(bitmap[k]);
 80014e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80014ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ec:	4413      	add	r3, r2
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff fe23 	bl	800113c <LCD_DATA>
			LCD_DATA(bitmap[k + 1]);
 80014f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f8:	3301      	adds	r3, #1
 80014fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80014fc:	4413      	add	r3, r2
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fe1b 	bl	800113c <LCD_DATA>
			//LCD_DATA(bitmap[k]);
			k = k + 2;
 8001506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001508:	3302      	adds	r3, #2
 800150a:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int j = 0; j < height; j++) {
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	3301      	adds	r3, #1
 8001510:	61fb      	str	r3, [r7, #28]
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	429a      	cmp	r2, r3
 8001518:	d8e6      	bhi.n	80014e8 <LCD_Bitmap+0x58>
	for (int i = 0; i < width; i++) {
 800151a:	6a3b      	ldr	r3, [r7, #32]
 800151c:	3301      	adds	r3, #1
 800151e:	623b      	str	r3, [r7, #32]
 8001520:	6a3b      	ldr	r3, [r7, #32]
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	429a      	cmp	r2, r3
 8001526:	d8dc      	bhi.n	80014e2 <LCD_Bitmap+0x52>
		}
	}
	HAL_GPIO_WritePin(SD_SS_GPIO_Port, SD_SS_Pin, GPIO_PIN_SET);
 8001528:	2201      	movs	r2, #1
 800152a:	2140      	movs	r1, #64	@ 0x40
 800152c:	4804      	ldr	r0, [pc, #16]	@ (8001540 <LCD_Bitmap+0xb0>)
 800152e:	f001 ff2f 	bl	8003390 <HAL_GPIO_WritePin>
}
 8001532:	bf00      	nop
 8001534:	3728      	adds	r7, #40	@ 0x28
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40020000 	.word	0x40020000
 8001540:	40020400 	.word	0x40020400

08001544 <LCD_ImageFromSD>:
	HAL_GPIO_WritePin(SD_SS_GPIO_Port, SD_SS_Pin, GPIO_PIN_SET);
}



void LCD_ImageFromSD(unsigned int x, unsigned int y, unsigned int width, unsigned int height, char* file) {
 8001544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001548:	f5ad 5d83 	sub.w	sp, sp, #4192	@ 0x1060
 800154c:	af00      	add	r7, sp, #0
 800154e:	f107 0660 	add.w	r6, r7, #96	@ 0x60
 8001552:	f846 0c54 	str.w	r0, [r6, #-84]
 8001556:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 800155a:	f840 1c58 	str.w	r1, [r0, #-88]
 800155e:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8001562:	f841 2c5c 	str.w	r2, [r1, #-92]
 8001566:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 800156a:	f842 3c60 	str.w	r3, [r2, #-96]
 800156e:	466b      	mov	r3, sp
 8001570:	469a      	mov	sl, r3
	FIL fil;
	FRESULT fres;
	UINT bytesRead;
	unsigned char buffer[width];
 8001572:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001576:	f853 6c5c 	ldr.w	r6, [r3, #-92]
 800157a:	4633      	mov	r3, r6
 800157c:	3b01      	subs	r3, #1
 800157e:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8001582:	f102 0210 	add.w	r2, r2, #16
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	2300      	movs	r3, #0
 800158a:	46b0      	mov	r8, r6
 800158c:	4699      	mov	r9, r3
 800158e:	f04f 0200 	mov.w	r2, #0
 8001592:	f04f 0300 	mov.w	r3, #0
 8001596:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800159a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800159e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80015a2:	2300      	movs	r3, #0
 80015a4:	4634      	mov	r4, r6
 80015a6:	461d      	mov	r5, r3
 80015a8:	f04f 0200 	mov.w	r2, #0
 80015ac:	f04f 0300 	mov.w	r3, #0
 80015b0:	00eb      	lsls	r3, r5, #3
 80015b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80015b6:	00e2      	lsls	r2, r4, #3
 80015b8:	1df3      	adds	r3, r6, #7
 80015ba:	08db      	lsrs	r3, r3, #3
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	ebad 0d03 	sub.w	sp, sp, r3
 80015c2:	466b      	mov	r3, sp
 80015c4:	3300      	adds	r3, #0
 80015c6:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80015ca:	f102 020c 	add.w	r2, r2, #12
 80015ce:	6013      	str	r3, [r2, #0]

	fres = f_open(&fil, file, FA_READ);
 80015d0:	f107 0320 	add.w	r3, r7, #32
 80015d4:	3b08      	subs	r3, #8
 80015d6:	2201      	movs	r2, #1
 80015d8:	f507 5184 	add.w	r1, r7, #4224	@ 0x1080
 80015dc:	6809      	ldr	r1, [r1, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f008 fa9e 	bl	8009b20 <f_open>
 80015e4:	4603      	mov	r3, r0
 80015e6:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80015ea:	f102 020b 	add.w	r2, r2, #11
 80015ee:	7013      	strb	r3, [r2, #0]
	if (fres == FR_OK) {
 80015f0:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80015f4:	f103 030b 	add.w	r3, r3, #11
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f040 80df 	bne.w	80017be <LCD_ImageFromSD+0x27a>
		LCD_CMD(0x2C);
 8001600:	202c      	movs	r0, #44	@ 0x2c
 8001602:	f7ff fd61 	bl	80010c8 <LCD_CMD>
		HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8001606:	2201      	movs	r2, #1
 8001608:	2110      	movs	r1, #16
 800160a:	4870      	ldr	r0, [pc, #448]	@ (80017cc <LCD_ImageFromSD+0x288>)
 800160c:	f001 fec0 	bl	8003390 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SD_SS_GPIO_Port, SD_SS_Pin, GPIO_PIN_RESET);
 8001610:	2200      	movs	r2, #0
 8001612:	2140      	movs	r1, #64	@ 0x40
 8001614:	486e      	ldr	r0, [pc, #440]	@ (80017d0 <LCD_ImageFromSD+0x28c>)
 8001616:	f001 febb 	bl	8003390 <HAL_GPIO_WritePin>

		SetWindows(x, y, x + width - 1, y + height - 1);
 800161a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800161e:	461a      	mov	r2, r3
 8001620:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001624:	f852 2c54 	ldr.w	r2, [r2, #-84]
 8001628:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 800162c:	4413      	add	r3, r2
 800162e:	1e59      	subs	r1, r3, #1
 8001630:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001634:	461a      	mov	r2, r3
 8001636:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800163a:	f852 2c58 	ldr.w	r2, [r2, #-88]
 800163e:	f853 3c60 	ldr.w	r3, [r3, #-96]
 8001642:	4413      	add	r3, r2
 8001644:	3b01      	subs	r3, #1
 8001646:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 800164a:	4614      	mov	r4, r2
 800164c:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8001650:	4610      	mov	r0, r2
 8001652:	460a      	mov	r2, r1
 8001654:	f854 1c58 	ldr.w	r1, [r4, #-88]
 8001658:	f850 0c54 	ldr.w	r0, [r0, #-84]
 800165c:	f7ff fda8 	bl	80011b0 <SetWindows>

		for (int row = 0; row < height; row++) {
 8001660:	2300      	movs	r3, #0
 8001662:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8001666:	f102 021c 	add.w	r2, r2, #28
 800166a:	6013      	str	r3, [r2, #0]
 800166c:	e090      	b.n	8001790 <LCD_ImageFromSD+0x24c>
			unsigned int pixelsInRow = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8001674:	f102 0218 	add.w	r2, r2, #24
 8001678:	6013      	str	r3, [r2, #0]
			while (pixelsInRow < width) {
 800167a:	e071      	b.n	8001760 <LCD_ImageFromSD+0x21c>
				f_read(&fil, buffer, sizeof(buffer), &bytesRead);
 800167c:	f107 0320 	add.w	r3, r7, #32
 8001680:	3b0c      	subs	r3, #12
 8001682:	f107 0020 	add.w	r0, r7, #32
 8001686:	3808      	subs	r0, #8
 8001688:	4632      	mov	r2, r6
 800168a:	f507 5182 	add.w	r1, r7, #4160	@ 0x1040
 800168e:	f101 010c 	add.w	r1, r1, #12
 8001692:	6809      	ldr	r1, [r1, #0]
 8001694:	f008 fc0c 	bl	8009eb0 <f_read>
				if (bytesRead > 0)
 8001698:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800169c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d069      	beq.n	8001778 <LCD_ImageFromSD+0x234>
					for (int i = 0; i < bytesRead; i += 2) {
 80016a4:	2300      	movs	r3, #0
 80016a6:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80016aa:	f102 0214 	add.w	r2, r2, #20
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	e04b      	b.n	800174a <LCD_ImageFromSD+0x206>
						if (pixelsInRow < width && i + 1 < bytesRead) {
 80016b2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80016b6:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80016ba:	f102 0218 	add.w	r2, r2, #24
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d24b      	bcs.n	8001760 <LCD_ImageFromSD+0x21c>
 80016c8:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80016cc:	f103 0314 	add.w	r3, r3, #20
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	3301      	adds	r3, #1
 80016d4:	461a      	mov	r2, r3
 80016d6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80016da:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d23e      	bcs.n	8001760 <LCD_ImageFromSD+0x21c>
							LCD_DATA(buffer[i]);
 80016e2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80016e6:	f103 030c 	add.w	r3, r3, #12
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80016f0:	f103 0314 	add.w	r3, r3, #20
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4413      	add	r3, r2
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fd1e 	bl	800113c <LCD_DATA>
							LCD_DATA(buffer[i + 1]);
 8001700:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001704:	f103 0314 	add.w	r3, r3, #20
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	3301      	adds	r3, #1
 800170c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8001710:	f102 020c 	add.w	r2, r2, #12
 8001714:	6812      	ldr	r2, [r2, #0]
 8001716:	5cd3      	ldrb	r3, [r2, r3]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fd0f 	bl	800113c <LCD_DATA>
							pixelsInRow++;
 800171e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001722:	f103 0318 	add.w	r3, r3, #24
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	3301      	adds	r3, #1
 800172a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800172e:	f102 0218 	add.w	r2, r2, #24
 8001732:	6013      	str	r3, [r2, #0]
					for (int i = 0; i < bytesRead; i += 2) {
 8001734:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001738:	f103 0314 	add.w	r3, r3, #20
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	3302      	adds	r3, #2
 8001740:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8001744:	f102 0214 	add.w	r2, r2, #20
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800174e:	f103 0314 	add.w	r3, r3, #20
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001758:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800175c:	429a      	cmp	r2, r3
 800175e:	d3a8      	bcc.n	80016b2 <LCD_ImageFromSD+0x16e>
			while (pixelsInRow < width) {
 8001760:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001764:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8001768:	f102 0218 	add.w	r2, r2, #24
 800176c:	6812      	ldr	r2, [r2, #0]
 800176e:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8001772:	429a      	cmp	r2, r3
 8001774:	d382      	bcc.n	800167c <LCD_ImageFromSD+0x138>
 8001776:	e000      	b.n	800177a <LCD_ImageFromSD+0x236>
						} else break; // Fin de fila o datos incompletos
					}
				else break; // Fin de archivo o error
 8001778:	bf00      	nop
		for (int row = 0; row < height; row++) {
 800177a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800177e:	f103 031c 	add.w	r3, r3, #28
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	3301      	adds	r3, #1
 8001786:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800178a:	f102 021c 	add.w	r2, r2, #28
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001794:	f103 031c 	add.w	r3, r3, #28
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 800179e:	f852 2c60 	ldr.w	r2, [r2, #-96]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	f63f af63 	bhi.w	800166e <LCD_ImageFromSD+0x12a>
			}
		}

	HAL_GPIO_WritePin(SD_SS_GPIO_Port, SD_SS_Pin, GPIO_PIN_SET);
 80017a8:	2201      	movs	r2, #1
 80017aa:	2140      	movs	r1, #64	@ 0x40
 80017ac:	4808      	ldr	r0, [pc, #32]	@ (80017d0 <LCD_ImageFromSD+0x28c>)
 80017ae:	f001 fdef 	bl	8003390 <HAL_GPIO_WritePin>
	f_close(&fil);
 80017b2:	f107 0320 	add.w	r3, r7, #32
 80017b6:	3b08      	subs	r3, #8
 80017b8:	4618      	mov	r0, r3
 80017ba:	f008 fd56 	bl	800a26a <f_close>
 80017be:	46d5      	mov	sp, sl
	}
}
 80017c0:	bf00      	nop
 80017c2:	f507 5783 	add.w	r7, r7, #4192	@ 0x1060
 80017c6:	46bd      	mov	sp, r7
 80017c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017cc:	40020000 	.word	0x40020000
 80017d0:	40020400 	.word	0x40020400

080017d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017da:	f001 f9d9 	bl	8002b90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017de:	f000 fc87 	bl	80020f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017e2:	f000 fd7f 	bl	80022e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80017e6:	f000 fd53 	bl	8002290 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80017ea:	f000 fd1b 	bl	8002224 <MX_SPI1_Init>
  MX_FATFS_Init();
 80017ee:	f005 ff07 	bl	8007600 <MX_FATFS_Init>
  MX_I2C1_Init();
 80017f2:	f000 fce9 	bl	80021c8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, buffer, 1);
 80017f6:	2201      	movs	r2, #1
 80017f8:	49c5      	ldr	r1, [pc, #788]	@ (8001b10 <main+0x33c>)
 80017fa:	48c6      	ldr	r0, [pc, #792]	@ (8001b14 <main+0x340>)
 80017fc:	f004 ffc8 	bl	8006790 <HAL_UART_Receive_IT>

  //I2C Communication
  if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK){
 8001800:	48c5      	ldr	r0, [pc, #788]	@ (8001b18 <main+0x344>)
 8001802:	f002 f836 	bl	8003872 <HAL_I2C_EnableListen_IT>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <main+0x3c>
	  Error_Handler();
 800180c:	f000 ffe0 	bl	80027d0 <Error_Handler>
  }

  LCD_Init();
 8001810:	f7ff fb5e 	bl	8000ed0 <LCD_Init>
  LCD_Clear(0x0000);
 8001814:	2000      	movs	r0, #0
 8001816:	f7ff fd0b 	bl	8001230 <LCD_Clear>
  //LCD_Print("Hola Mundo", 20, 100, 1, 0x001F, 0xCAB9);
  fres = f_mount(&fs, "/", 0);	// Mounting system
 800181a:	2200      	movs	r2, #0
 800181c:	49bf      	ldr	r1, [pc, #764]	@ (8001b1c <main+0x348>)
 800181e:	48c0      	ldr	r0, [pc, #768]	@ (8001b20 <main+0x34c>)
 8001820:	f008 f938 	bl	8009a94 <f_mount>
 8001824:	4603      	mov	r3, r0
 8001826:	461a      	mov	r2, r3
 8001828:	4bbe      	ldr	r3, [pc, #760]	@ (8001b24 <main+0x350>)
 800182a:	701a      	strb	r2, [r3, #0]
  //LCD_Bitmap(0, 0, 320, 240, fondo);
  //LCD_ImageFromSD(0, 0, 240, 240, "prueba.bin");

  //HAL_Delay(1000);
  //LCD_Clear(0x0000);
  LCD_ImageFromSD(0, 0, 320, 240, "parking.bin");
 800182c:	4bbe      	ldr	r3, [pc, #760]	@ (8001b28 <main+0x354>)
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	23f0      	movs	r3, #240	@ 0xf0
 8001832:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001836:	2100      	movs	r1, #0
 8001838:	2000      	movs	r0, #0
 800183a:	f7ff fe83 	bl	8001544 <LCD_ImageFromSD>
  LCD_Print(" Fer-22676 ", 230, 15, 1, 0, 0xffff);
 800183e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001842:	9301      	str	r3, [sp, #4]
 8001844:	2300      	movs	r3, #0
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	2301      	movs	r3, #1
 800184a:	220f      	movs	r2, #15
 800184c:	21e6      	movs	r1, #230	@ 0xe6
 800184e:	48b7      	ldr	r0, [pc, #732]	@ (8001b2c <main+0x358>)
 8001850:	f7ff fd32 	bl	80012b8 <LCD_Print>
  LCD_Print(" Alex-22648", 230, 25, 1, 0, 0xffff);
 8001854:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001858:	9301      	str	r3, [sp, #4]
 800185a:	2300      	movs	r3, #0
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	2301      	movs	r3, #1
 8001860:	2219      	movs	r2, #25
 8001862:	21e6      	movs	r1, #230	@ 0xe6
 8001864:	48b2      	ldr	r0, [pc, #712]	@ (8001b30 <main+0x35c>)
 8001866:	f7ff fd27 	bl	80012b8 <LCD_Print>
  LCD_Print("  Parking  ", 230, 50, 1, 0, 0xffff);
 800186a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800186e:	9301      	str	r3, [sp, #4]
 8001870:	2300      	movs	r3, #0
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	2301      	movs	r3, #1
 8001876:	2232      	movs	r2, #50	@ 0x32
 8001878:	21e6      	movs	r1, #230	@ 0xe6
 800187a:	48ae      	ldr	r0, [pc, #696]	@ (8001b34 <main+0x360>)
 800187c:	f7ff fd1c 	bl	80012b8 <LCD_Print>
  LCD_Print("  spaces   ", 230, 62, 1, 0, 0xffff);
 8001880:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001884:	9301      	str	r3, [sp, #4]
 8001886:	2300      	movs	r3, #0
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	2301      	movs	r3, #1
 800188c:	223e      	movs	r2, #62	@ 0x3e
 800188e:	21e6      	movs	r1, #230	@ 0xe6
 8001890:	48a9      	ldr	r0, [pc, #676]	@ (8001b38 <main+0x364>)
 8001892:	f7ff fd11 	bl	80012b8 <LCD_Print>
  LCD_Print(" available ", 230, 74, 1, 0, 0xffff);
 8001896:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800189a:	9301      	str	r3, [sp, #4]
 800189c:	2300      	movs	r3, #0
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	2301      	movs	r3, #1
 80018a2:	224a      	movs	r2, #74	@ 0x4a
 80018a4:	21e6      	movs	r1, #230	@ 0xe6
 80018a6:	48a5      	ldr	r0, [pc, #660]	@ (8001b3c <main+0x368>)
 80018a8:	f7ff fd06 	bl	80012b8 <LCD_Print>
  LCD_ImageFromSD(76, 140, 40, 80, cars[5]);
  LCD_ImageFromSD(124, 140, 40, 80, cars[6]);
  LCD_ImageFromSD(174, 140, 40, 80, cars[7]);
  */

  LCD_ImageFromSD(26, 20, 40, 80, cars[8]);
 80018ac:	4ba4      	ldr	r3, [pc, #656]	@ (8001b40 <main+0x36c>)
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	2350      	movs	r3, #80	@ 0x50
 80018b2:	2228      	movs	r2, #40	@ 0x28
 80018b4:	2114      	movs	r1, #20
 80018b6:	201a      	movs	r0, #26
 80018b8:	f7ff fe44 	bl	8001544 <LCD_ImageFromSD>
  LCD_ImageFromSD(76, 20, 40, 80, cars[8]);
 80018bc:	4ba0      	ldr	r3, [pc, #640]	@ (8001b40 <main+0x36c>)
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	2350      	movs	r3, #80	@ 0x50
 80018c2:	2228      	movs	r2, #40	@ 0x28
 80018c4:	2114      	movs	r1, #20
 80018c6:	204c      	movs	r0, #76	@ 0x4c
 80018c8:	f7ff fe3c 	bl	8001544 <LCD_ImageFromSD>
  LCD_ImageFromSD(124, 20, 40, 80, cars[8]);
 80018cc:	4b9c      	ldr	r3, [pc, #624]	@ (8001b40 <main+0x36c>)
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	2350      	movs	r3, #80	@ 0x50
 80018d2:	2228      	movs	r2, #40	@ 0x28
 80018d4:	2114      	movs	r1, #20
 80018d6:	207c      	movs	r0, #124	@ 0x7c
 80018d8:	f7ff fe34 	bl	8001544 <LCD_ImageFromSD>
  LCD_ImageFromSD(174, 20, 40, 80, cars[8]);
 80018dc:	4b98      	ldr	r3, [pc, #608]	@ (8001b40 <main+0x36c>)
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	2350      	movs	r3, #80	@ 0x50
 80018e2:	2228      	movs	r2, #40	@ 0x28
 80018e4:	2114      	movs	r1, #20
 80018e6:	20ae      	movs	r0, #174	@ 0xae
 80018e8:	f7ff fe2c 	bl	8001544 <LCD_ImageFromSD>
  LCD_ImageFromSD(26, 140, 40, 80, cars[8]);
 80018ec:	4b94      	ldr	r3, [pc, #592]	@ (8001b40 <main+0x36c>)
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	2350      	movs	r3, #80	@ 0x50
 80018f2:	2228      	movs	r2, #40	@ 0x28
 80018f4:	218c      	movs	r1, #140	@ 0x8c
 80018f6:	201a      	movs	r0, #26
 80018f8:	f7ff fe24 	bl	8001544 <LCD_ImageFromSD>
  LCD_ImageFromSD(76, 140, 40, 80, cars[8]);
 80018fc:	4b90      	ldr	r3, [pc, #576]	@ (8001b40 <main+0x36c>)
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	2350      	movs	r3, #80	@ 0x50
 8001902:	2228      	movs	r2, #40	@ 0x28
 8001904:	218c      	movs	r1, #140	@ 0x8c
 8001906:	204c      	movs	r0, #76	@ 0x4c
 8001908:	f7ff fe1c 	bl	8001544 <LCD_ImageFromSD>
  LCD_ImageFromSD(124, 140, 40, 80, cars[8]);
 800190c:	4b8c      	ldr	r3, [pc, #560]	@ (8001b40 <main+0x36c>)
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	2350      	movs	r3, #80	@ 0x50
 8001912:	2228      	movs	r2, #40	@ 0x28
 8001914:	218c      	movs	r1, #140	@ 0x8c
 8001916:	207c      	movs	r0, #124	@ 0x7c
 8001918:	f7ff fe14 	bl	8001544 <LCD_ImageFromSD>
  LCD_ImageFromSD(174, 140, 40, 80, cars[8]);
 800191c:	4b88      	ldr	r3, [pc, #544]	@ (8001b40 <main+0x36c>)
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	2350      	movs	r3, #80	@ 0x50
 8001922:	2228      	movs	r2, #40	@ 0x28
 8001924:	218c      	movs	r1, #140	@ 0x8c
 8001926:	20ae      	movs	r0, #174	@ 0xae
 8001928:	f7ff fe0c 	bl	8001544 <LCD_ImageFromSD>

  LCD_Bitmap(41, 5, 10, 10, square_red_circle_10x10_max_bytes);
 800192c:	4b85      	ldr	r3, [pc, #532]	@ (8001b44 <main+0x370>)
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	230a      	movs	r3, #10
 8001932:	220a      	movs	r2, #10
 8001934:	2105      	movs	r1, #5
 8001936:	2029      	movs	r0, #41	@ 0x29
 8001938:	f7ff fdaa 	bl	8001490 <LCD_Bitmap>
  LCD_Bitmap(91, 5, 10, 10, square_red_circle_10x10_max_bytes);
 800193c:	4b81      	ldr	r3, [pc, #516]	@ (8001b44 <main+0x370>)
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	230a      	movs	r3, #10
 8001942:	220a      	movs	r2, #10
 8001944:	2105      	movs	r1, #5
 8001946:	205b      	movs	r0, #91	@ 0x5b
 8001948:	f7ff fda2 	bl	8001490 <LCD_Bitmap>
  LCD_Bitmap(139, 5, 10, 10, square_red_circle_10x10_max_bytes);
 800194c:	4b7d      	ldr	r3, [pc, #500]	@ (8001b44 <main+0x370>)
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	230a      	movs	r3, #10
 8001952:	220a      	movs	r2, #10
 8001954:	2105      	movs	r1, #5
 8001956:	208b      	movs	r0, #139	@ 0x8b
 8001958:	f7ff fd9a 	bl	8001490 <LCD_Bitmap>
  LCD_Bitmap(189, 5, 10, 10, square_red_circle_10x10_max_bytes);
 800195c:	4b79      	ldr	r3, [pc, #484]	@ (8001b44 <main+0x370>)
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	230a      	movs	r3, #10
 8001962:	220a      	movs	r2, #10
 8001964:	2105      	movs	r1, #5
 8001966:	20bd      	movs	r0, #189	@ 0xbd
 8001968:	f7ff fd92 	bl	8001490 <LCD_Bitmap>
  LCD_Bitmap(41, 225, 10, 10, square_red_circle_10x10_max_bytes);
 800196c:	4b75      	ldr	r3, [pc, #468]	@ (8001b44 <main+0x370>)
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	230a      	movs	r3, #10
 8001972:	220a      	movs	r2, #10
 8001974:	21e1      	movs	r1, #225	@ 0xe1
 8001976:	2029      	movs	r0, #41	@ 0x29
 8001978:	f7ff fd8a 	bl	8001490 <LCD_Bitmap>
  LCD_Bitmap(91, 225, 10, 10, square_red_circle_10x10_max_bytes);
 800197c:	4b71      	ldr	r3, [pc, #452]	@ (8001b44 <main+0x370>)
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	230a      	movs	r3, #10
 8001982:	220a      	movs	r2, #10
 8001984:	21e1      	movs	r1, #225	@ 0xe1
 8001986:	205b      	movs	r0, #91	@ 0x5b
 8001988:	f7ff fd82 	bl	8001490 <LCD_Bitmap>
  LCD_Bitmap(139, 225, 10, 10, square_red_circle_10x10_max_bytes);
 800198c:	4b6d      	ldr	r3, [pc, #436]	@ (8001b44 <main+0x370>)
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	230a      	movs	r3, #10
 8001992:	220a      	movs	r2, #10
 8001994:	21e1      	movs	r1, #225	@ 0xe1
 8001996:	208b      	movs	r0, #139	@ 0x8b
 8001998:	f7ff fd7a 	bl	8001490 <LCD_Bitmap>
  LCD_Bitmap(189, 225, 10, 10, square_red_circle_10x10_max_bytes);
 800199c:	4b69      	ldr	r3, [pc, #420]	@ (8001b44 <main+0x370>)
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	230a      	movs	r3, #10
 80019a2:	220a      	movs	r2, #10
 80019a4:	21e1      	movs	r1, #225	@ 0xe1
 80019a6:	20bd      	movs	r0, #189	@ 0xbd
 80019a8:	f7ff fd72 	bl	8001490 <LCD_Bitmap>

  LCD_Bitmap(41, 5, 10, 10, square_green_circle_10x10_max_bytes);
 80019ac:	4b66      	ldr	r3, [pc, #408]	@ (8001b48 <main+0x374>)
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	230a      	movs	r3, #10
 80019b2:	220a      	movs	r2, #10
 80019b4:	2105      	movs	r1, #5
 80019b6:	2029      	movs	r0, #41	@ 0x29
 80019b8:	f7ff fd6a 	bl	8001490 <LCD_Bitmap>
  LCD_Bitmap(91, 5, 10, 10, square_green_circle_10x10_max_bytes);
 80019bc:	4b62      	ldr	r3, [pc, #392]	@ (8001b48 <main+0x374>)
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	230a      	movs	r3, #10
 80019c2:	220a      	movs	r2, #10
 80019c4:	2105      	movs	r1, #5
 80019c6:	205b      	movs	r0, #91	@ 0x5b
 80019c8:	f7ff fd62 	bl	8001490 <LCD_Bitmap>
  LCD_Bitmap(139, 5, 10, 10, square_green_circle_10x10_max_bytes);
 80019cc:	4b5e      	ldr	r3, [pc, #376]	@ (8001b48 <main+0x374>)
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	230a      	movs	r3, #10
 80019d2:	220a      	movs	r2, #10
 80019d4:	2105      	movs	r1, #5
 80019d6:	208b      	movs	r0, #139	@ 0x8b
 80019d8:	f7ff fd5a 	bl	8001490 <LCD_Bitmap>
  LCD_Bitmap(189, 5, 10, 10, square_green_circle_10x10_max_bytes);
 80019dc:	4b5a      	ldr	r3, [pc, #360]	@ (8001b48 <main+0x374>)
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	230a      	movs	r3, #10
 80019e2:	220a      	movs	r2, #10
 80019e4:	2105      	movs	r1, #5
 80019e6:	20bd      	movs	r0, #189	@ 0xbd
 80019e8:	f7ff fd52 	bl	8001490 <LCD_Bitmap>
  LCD_Bitmap(41, 225, 10, 10, square_green_circle_10x10_max_bytes);
 80019ec:	4b56      	ldr	r3, [pc, #344]	@ (8001b48 <main+0x374>)
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	230a      	movs	r3, #10
 80019f2:	220a      	movs	r2, #10
 80019f4:	21e1      	movs	r1, #225	@ 0xe1
 80019f6:	2029      	movs	r0, #41	@ 0x29
 80019f8:	f7ff fd4a 	bl	8001490 <LCD_Bitmap>
  LCD_Bitmap(91, 225, 10, 10, square_green_circle_10x10_max_bytes);
 80019fc:	4b52      	ldr	r3, [pc, #328]	@ (8001b48 <main+0x374>)
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	230a      	movs	r3, #10
 8001a02:	220a      	movs	r2, #10
 8001a04:	21e1      	movs	r1, #225	@ 0xe1
 8001a06:	205b      	movs	r0, #91	@ 0x5b
 8001a08:	f7ff fd42 	bl	8001490 <LCD_Bitmap>
  LCD_Bitmap(139, 225, 10, 10, square_green_circle_10x10_max_bytes);
 8001a0c:	4b4e      	ldr	r3, [pc, #312]	@ (8001b48 <main+0x374>)
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	230a      	movs	r3, #10
 8001a12:	220a      	movs	r2, #10
 8001a14:	21e1      	movs	r1, #225	@ 0xe1
 8001a16:	208b      	movs	r0, #139	@ 0x8b
 8001a18:	f7ff fd3a 	bl	8001490 <LCD_Bitmap>
  LCD_Bitmap(189, 225, 10, 10, square_green_circle_10x10_max_bytes);
 8001a1c:	4b4a      	ldr	r3, [pc, #296]	@ (8001b48 <main+0x374>)
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	230a      	movs	r3, #10
 8001a22:	220a      	movs	r2, #10
 8001a24:	21e1      	movs	r1, #225	@ 0xe1
 8001a26:	20bd      	movs	r0, #189	@ 0xbd
 8001a28:	f7ff fd32 	bl	8001490 <LCD_Bitmap>

  LCD_ImageFromSD(255, 100, 40, 80, numbers[0]);
 8001a2c:	4b47      	ldr	r3, [pc, #284]	@ (8001b4c <main+0x378>)
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	2350      	movs	r3, #80	@ 0x50
 8001a32:	2228      	movs	r2, #40	@ 0x28
 8001a34:	2164      	movs	r1, #100	@ 0x64
 8001a36:	20ff      	movs	r0, #255	@ 0xff
 8001a38:	f7ff fd84 	bl	8001544 <LCD_ImageFromSD>
  LCD_ImageFromSD(255, 100, 40, 80, numbers[1]);
 8001a3c:	4b44      	ldr	r3, [pc, #272]	@ (8001b50 <main+0x37c>)
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	2350      	movs	r3, #80	@ 0x50
 8001a42:	2228      	movs	r2, #40	@ 0x28
 8001a44:	2164      	movs	r1, #100	@ 0x64
 8001a46:	20ff      	movs	r0, #255	@ 0xff
 8001a48:	f7ff fd7c 	bl	8001544 <LCD_ImageFromSD>
  LCD_ImageFromSD(255, 100, 40, 80, numbers[2]);
 8001a4c:	4b41      	ldr	r3, [pc, #260]	@ (8001b54 <main+0x380>)
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	2350      	movs	r3, #80	@ 0x50
 8001a52:	2228      	movs	r2, #40	@ 0x28
 8001a54:	2164      	movs	r1, #100	@ 0x64
 8001a56:	20ff      	movs	r0, #255	@ 0xff
 8001a58:	f7ff fd74 	bl	8001544 <LCD_ImageFromSD>
  LCD_ImageFromSD(255, 100, 40, 80, numbers[3]);
 8001a5c:	4b3e      	ldr	r3, [pc, #248]	@ (8001b58 <main+0x384>)
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	2350      	movs	r3, #80	@ 0x50
 8001a62:	2228      	movs	r2, #40	@ 0x28
 8001a64:	2164      	movs	r1, #100	@ 0x64
 8001a66:	20ff      	movs	r0, #255	@ 0xff
 8001a68:	f7ff fd6c 	bl	8001544 <LCD_ImageFromSD>
  LCD_ImageFromSD(255, 100, 40, 80, numbers[4]);
 8001a6c:	4b3b      	ldr	r3, [pc, #236]	@ (8001b5c <main+0x388>)
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	2350      	movs	r3, #80	@ 0x50
 8001a72:	2228      	movs	r2, #40	@ 0x28
 8001a74:	2164      	movs	r1, #100	@ 0x64
 8001a76:	20ff      	movs	r0, #255	@ 0xff
 8001a78:	f7ff fd64 	bl	8001544 <LCD_ImageFromSD>
  LCD_ImageFromSD(255, 100, 40, 80, numbers[5]);
 8001a7c:	4b38      	ldr	r3, [pc, #224]	@ (8001b60 <main+0x38c>)
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	2350      	movs	r3, #80	@ 0x50
 8001a82:	2228      	movs	r2, #40	@ 0x28
 8001a84:	2164      	movs	r1, #100	@ 0x64
 8001a86:	20ff      	movs	r0, #255	@ 0xff
 8001a88:	f7ff fd5c 	bl	8001544 <LCD_ImageFromSD>
  LCD_ImageFromSD(255, 100, 40, 80, numbers[6]);
 8001a8c:	4b35      	ldr	r3, [pc, #212]	@ (8001b64 <main+0x390>)
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	2350      	movs	r3, #80	@ 0x50
 8001a92:	2228      	movs	r2, #40	@ 0x28
 8001a94:	2164      	movs	r1, #100	@ 0x64
 8001a96:	20ff      	movs	r0, #255	@ 0xff
 8001a98:	f7ff fd54 	bl	8001544 <LCD_ImageFromSD>
  LCD_ImageFromSD(255, 100, 40, 80, numbers[7]);
 8001a9c:	4b32      	ldr	r3, [pc, #200]	@ (8001b68 <main+0x394>)
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	2350      	movs	r3, #80	@ 0x50
 8001aa2:	2228      	movs	r2, #40	@ 0x28
 8001aa4:	2164      	movs	r1, #100	@ 0x64
 8001aa6:	20ff      	movs	r0, #255	@ 0xff
 8001aa8:	f7ff fd4c 	bl	8001544 <LCD_ImageFromSD>
  LCD_ImageFromSD(255, 100, 40, 80, numbers[8]);
 8001aac:	4b2f      	ldr	r3, [pc, #188]	@ (8001b6c <main+0x398>)
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	2350      	movs	r3, #80	@ 0x50
 8001ab2:	2228      	movs	r2, #40	@ 0x28
 8001ab4:	2164      	movs	r1, #100	@ 0x64
 8001ab6:	20ff      	movs	r0, #255	@ 0xff
 8001ab8:	f7ff fd44 	bl	8001544 <LCD_ImageFromSD>

  GPIO_PinState currentState = HAL_GPIO_ReadPin(sensor1_GPIO_Port, sensor1_Pin);
 8001abc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ac0:	482b      	ldr	r0, [pc, #172]	@ (8001b70 <main+0x39c>)
 8001ac2:	f001 fc4d 	bl	8003360 <HAL_GPIO_ReadPin>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
  switch (currentState) {
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d005      	beq.n	8001adc <main+0x308>
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d107      	bne.n	8001ae4 <main+0x310>
  	  case GPIO_PIN_SET: key[0] = 2; break;
 8001ad4:	4b27      	ldr	r3, [pc, #156]	@ (8001b74 <main+0x3a0>)
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	701a      	strb	r2, [r3, #0]
 8001ada:	e004      	b.n	8001ae6 <main+0x312>
  	  case GPIO_PIN_RESET: key[0] = 1; break;
 8001adc:	4b25      	ldr	r3, [pc, #148]	@ (8001b74 <main+0x3a0>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	701a      	strb	r2, [r3, #0]
 8001ae2:	e000      	b.n	8001ae6 <main+0x312>
  	  default: break;
 8001ae4:	bf00      	nop
  }

  currentState = HAL_GPIO_ReadPin(sensor2_GPIO_Port, sensor2_Pin);
 8001ae6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001aea:	4823      	ldr	r0, [pc, #140]	@ (8001b78 <main+0x3a4>)
 8001aec:	f001 fc38 	bl	8003360 <HAL_GPIO_ReadPin>
 8001af0:	4603      	mov	r3, r0
 8001af2:	71fb      	strb	r3, [r7, #7]
  switch (currentState) {
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d005      	beq.n	8001b06 <main+0x332>
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d13e      	bne.n	8001b7c <main+0x3a8>
  	  case GPIO_PIN_SET: key[1] = 2; break;
 8001afe:	4b1d      	ldr	r3, [pc, #116]	@ (8001b74 <main+0x3a0>)
 8001b00:	2202      	movs	r2, #2
 8001b02:	705a      	strb	r2, [r3, #1]
 8001b04:	e03b      	b.n	8001b7e <main+0x3aa>
	  case GPIO_PIN_RESET: key[1] = 1; break;
 8001b06:	4b1b      	ldr	r3, [pc, #108]	@ (8001b74 <main+0x3a0>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	705a      	strb	r2, [r3, #1]
 8001b0c:	e037      	b.n	8001b7e <main+0x3aa>
 8001b0e:	bf00      	nop
 8001b10:	2000121c 	.word	0x2000121c
 8001b14:	200012e8 	.word	0x200012e8
 8001b18:	2000123c 	.word	0x2000123c
 8001b1c:	0800a574 	.word	0x0800a574
 8001b20:	200001e0 	.word	0x200001e0
 8001b24:	20001218 	.word	0x20001218
 8001b28:	0800a578 	.word	0x0800a578
 8001b2c:	0800a584 	.word	0x0800a584
 8001b30:	0800a590 	.word	0x0800a590
 8001b34:	0800a59c 	.word	0x0800a59c
 8001b38:	0800a5a8 	.word	0x0800a5a8
 8001b3c:	0800a5b4 	.word	0x0800a5b4
 8001b40:	200000d4 	.word	0x200000d4
 8001b44:	0800b65c 	.word	0x0800b65c
 8001b48:	0800b724 	.word	0x0800b724
 8001b4c:	200000e8 	.word	0x200000e8
 8001b50:	200000fc 	.word	0x200000fc
 8001b54:	20000110 	.word	0x20000110
 8001b58:	20000124 	.word	0x20000124
 8001b5c:	20000138 	.word	0x20000138
 8001b60:	2000014c 	.word	0x2000014c
 8001b64:	20000160 	.word	0x20000160
 8001b68:	20000174 	.word	0x20000174
 8001b6c:	20000188 	.word	0x20000188
 8001b70:	40020800 	.word	0x40020800
 8001b74:	20001220 	.word	0x20001220
 8001b78:	40020000 	.word	0x40020000
	  default: break;
 8001b7c:	bf00      	nop
  }

  currentState = HAL_GPIO_ReadPin(sensor3_GPIO_Port, sensor3_Pin);
 8001b7e:	2104      	movs	r1, #4
 8001b80:	48ab      	ldr	r0, [pc, #684]	@ (8001e30 <main+0x65c>)
 8001b82:	f001 fbed 	bl	8003360 <HAL_GPIO_ReadPin>
 8001b86:	4603      	mov	r3, r0
 8001b88:	71fb      	strb	r3, [r7, #7]
  switch (currentState) {
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d005      	beq.n	8001b9c <main+0x3c8>
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d107      	bne.n	8001ba4 <main+0x3d0>
  	  case GPIO_PIN_SET: key[2] = 2; break;
 8001b94:	4ba7      	ldr	r3, [pc, #668]	@ (8001e34 <main+0x660>)
 8001b96:	2202      	movs	r2, #2
 8001b98:	709a      	strb	r2, [r3, #2]
 8001b9a:	e004      	b.n	8001ba6 <main+0x3d2>
      case GPIO_PIN_RESET: key[2] = 1; break;
 8001b9c:	4ba5      	ldr	r3, [pc, #660]	@ (8001e34 <main+0x660>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	709a      	strb	r2, [r3, #2]
 8001ba2:	e000      	b.n	8001ba6 <main+0x3d2>
      default: break;
 8001ba4:	bf00      	nop
  }

  currentState = HAL_GPIO_ReadPin(sensor4_GPIO_Port, sensor4_Pin);
 8001ba6:	2108      	movs	r1, #8
 8001ba8:	48a1      	ldr	r0, [pc, #644]	@ (8001e30 <main+0x65c>)
 8001baa:	f001 fbd9 	bl	8003360 <HAL_GPIO_ReadPin>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71fb      	strb	r3, [r7, #7]
  switch (currentState) {
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d005      	beq.n	8001bc4 <main+0x3f0>
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d107      	bne.n	8001bcc <main+0x3f8>
	  case GPIO_PIN_SET: key[3] = 2; break;
 8001bbc:	4b9d      	ldr	r3, [pc, #628]	@ (8001e34 <main+0x660>)
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	70da      	strb	r2, [r3, #3]
 8001bc2:	e004      	b.n	8001bce <main+0x3fa>
	  case GPIO_PIN_RESET: key[3] = 1; break;
 8001bc4:	4b9b      	ldr	r3, [pc, #620]	@ (8001e34 <main+0x660>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	70da      	strb	r2, [r3, #3]
 8001bca:	e000      	b.n	8001bce <main+0x3fa>
	  default: break;
 8001bcc:	bf00      	nop
  }

  start = 1;
 8001bce:	4b9a      	ldr	r3, [pc, #616]	@ (8001e38 <main+0x664>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(key[0] == 1){
 8001bd4:	4b97      	ldr	r3, [pc, #604]	@ (8001e34 <main+0x660>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d11d      	bne.n	8001c18 <main+0x444>
		  LCD_ImageFromSD(26, 20, 40, 80, cars[0]);
 8001bdc:	4b97      	ldr	r3, [pc, #604]	@ (8001e3c <main+0x668>)
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	2350      	movs	r3, #80	@ 0x50
 8001be2:	2228      	movs	r2, #40	@ 0x28
 8001be4:	2114      	movs	r1, #20
 8001be6:	201a      	movs	r0, #26
 8001be8:	f7ff fcac 	bl	8001544 <LCD_ImageFromSD>
		  key[0] = 3; HAL_Delay(1);
 8001bec:	4b91      	ldr	r3, [pc, #580]	@ (8001e34 <main+0x660>)
 8001bee:	2203      	movs	r2, #3
 8001bf0:	701a      	strb	r2, [r3, #0]
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	f001 f83e 	bl	8002c74 <HAL_Delay>
		  LCD_Bitmap(41, 5, 10, 10, square_red_circle_10x10_max_bytes);
 8001bf8:	4b91      	ldr	r3, [pc, #580]	@ (8001e40 <main+0x66c>)
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	230a      	movs	r3, #10
 8001bfe:	220a      	movs	r2, #10
 8001c00:	2105      	movs	r1, #5
 8001c02:	2029      	movs	r0, #41	@ 0x29
 8001c04:	f7ff fc44 	bl	8001490 <LCD_Bitmap>
		  spaces |= (1 << 0);
 8001c08:	4b8e      	ldr	r3, [pc, #568]	@ (8001e44 <main+0x670>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	4b8c      	ldr	r3, [pc, #560]	@ (8001e44 <main+0x670>)
 8001c14:	701a      	strb	r2, [r3, #0]
 8001c16:	e020      	b.n	8001c5a <main+0x486>
	  }else if(key[0] == 2){
 8001c18:	4b86      	ldr	r3, [pc, #536]	@ (8001e34 <main+0x660>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d11c      	bne.n	8001c5a <main+0x486>
		  LCD_ImageFromSD(26, 20, 40, 80, cars[8]);
 8001c20:	4b89      	ldr	r3, [pc, #548]	@ (8001e48 <main+0x674>)
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	2350      	movs	r3, #80	@ 0x50
 8001c26:	2228      	movs	r2, #40	@ 0x28
 8001c28:	2114      	movs	r1, #20
 8001c2a:	201a      	movs	r0, #26
 8001c2c:	f7ff fc8a 	bl	8001544 <LCD_ImageFromSD>
		  key[0] = 3; HAL_Delay(1);
 8001c30:	4b80      	ldr	r3, [pc, #512]	@ (8001e34 <main+0x660>)
 8001c32:	2203      	movs	r2, #3
 8001c34:	701a      	strb	r2, [r3, #0]
 8001c36:	2001      	movs	r0, #1
 8001c38:	f001 f81c 	bl	8002c74 <HAL_Delay>
		  LCD_Bitmap(41, 5, 10, 10, square_green_circle_10x10_max_bytes);
 8001c3c:	4b83      	ldr	r3, [pc, #524]	@ (8001e4c <main+0x678>)
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	230a      	movs	r3, #10
 8001c42:	220a      	movs	r2, #10
 8001c44:	2105      	movs	r1, #5
 8001c46:	2029      	movs	r0, #41	@ 0x29
 8001c48:	f7ff fc22 	bl	8001490 <LCD_Bitmap>
		  spaces &= ~(1 << 0);
 8001c4c:	4b7d      	ldr	r3, [pc, #500]	@ (8001e44 <main+0x670>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	f023 0301 	bic.w	r3, r3, #1
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	4b7b      	ldr	r3, [pc, #492]	@ (8001e44 <main+0x670>)
 8001c58:	701a      	strb	r2, [r3, #0]
	  }

	  if(key[1] == 1){
 8001c5a:	4b76      	ldr	r3, [pc, #472]	@ (8001e34 <main+0x660>)
 8001c5c:	785b      	ldrb	r3, [r3, #1]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d11d      	bne.n	8001c9e <main+0x4ca>
		  LCD_ImageFromSD(76, 20, 40, 80, cars[1]);
 8001c62:	4b7b      	ldr	r3, [pc, #492]	@ (8001e50 <main+0x67c>)
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	2350      	movs	r3, #80	@ 0x50
 8001c68:	2228      	movs	r2, #40	@ 0x28
 8001c6a:	2114      	movs	r1, #20
 8001c6c:	204c      	movs	r0, #76	@ 0x4c
 8001c6e:	f7ff fc69 	bl	8001544 <LCD_ImageFromSD>
		  key[1] = 3; HAL_Delay(1);
 8001c72:	4b70      	ldr	r3, [pc, #448]	@ (8001e34 <main+0x660>)
 8001c74:	2203      	movs	r2, #3
 8001c76:	705a      	strb	r2, [r3, #1]
 8001c78:	2001      	movs	r0, #1
 8001c7a:	f000 fffb 	bl	8002c74 <HAL_Delay>
		  LCD_Bitmap(91, 5, 10, 10, square_red_circle_10x10_max_bytes);
 8001c7e:	4b70      	ldr	r3, [pc, #448]	@ (8001e40 <main+0x66c>)
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	230a      	movs	r3, #10
 8001c84:	220a      	movs	r2, #10
 8001c86:	2105      	movs	r1, #5
 8001c88:	205b      	movs	r0, #91	@ 0x5b
 8001c8a:	f7ff fc01 	bl	8001490 <LCD_Bitmap>
		  spaces |= (1 << 1);
 8001c8e:	4b6d      	ldr	r3, [pc, #436]	@ (8001e44 <main+0x670>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	f043 0302 	orr.w	r3, r3, #2
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	4b6a      	ldr	r3, [pc, #424]	@ (8001e44 <main+0x670>)
 8001c9a:	701a      	strb	r2, [r3, #0]
 8001c9c:	e020      	b.n	8001ce0 <main+0x50c>
	  }else if(key[1] == 2){
 8001c9e:	4b65      	ldr	r3, [pc, #404]	@ (8001e34 <main+0x660>)
 8001ca0:	785b      	ldrb	r3, [r3, #1]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d11c      	bne.n	8001ce0 <main+0x50c>
		  LCD_ImageFromSD(76, 20, 40, 80, cars[8]);
 8001ca6:	4b68      	ldr	r3, [pc, #416]	@ (8001e48 <main+0x674>)
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	2350      	movs	r3, #80	@ 0x50
 8001cac:	2228      	movs	r2, #40	@ 0x28
 8001cae:	2114      	movs	r1, #20
 8001cb0:	204c      	movs	r0, #76	@ 0x4c
 8001cb2:	f7ff fc47 	bl	8001544 <LCD_ImageFromSD>
		  key[1] = 3; HAL_Delay(1);
 8001cb6:	4b5f      	ldr	r3, [pc, #380]	@ (8001e34 <main+0x660>)
 8001cb8:	2203      	movs	r2, #3
 8001cba:	705a      	strb	r2, [r3, #1]
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	f000 ffd9 	bl	8002c74 <HAL_Delay>
		  LCD_Bitmap(91, 5, 10, 10, square_green_circle_10x10_max_bytes);
 8001cc2:	4b62      	ldr	r3, [pc, #392]	@ (8001e4c <main+0x678>)
 8001cc4:	9300      	str	r3, [sp, #0]
 8001cc6:	230a      	movs	r3, #10
 8001cc8:	220a      	movs	r2, #10
 8001cca:	2105      	movs	r1, #5
 8001ccc:	205b      	movs	r0, #91	@ 0x5b
 8001cce:	f7ff fbdf 	bl	8001490 <LCD_Bitmap>
		  spaces &= ~(1 << 1);
 8001cd2:	4b5c      	ldr	r3, [pc, #368]	@ (8001e44 <main+0x670>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	f023 0302 	bic.w	r3, r3, #2
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	4b59      	ldr	r3, [pc, #356]	@ (8001e44 <main+0x670>)
 8001cde:	701a      	strb	r2, [r3, #0]
	  }

	  if(key[2] == 1){
 8001ce0:	4b54      	ldr	r3, [pc, #336]	@ (8001e34 <main+0x660>)
 8001ce2:	789b      	ldrb	r3, [r3, #2]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d11d      	bne.n	8001d24 <main+0x550>
		  LCD_ImageFromSD(124, 20, 40, 80, cars[2]);
 8001ce8:	4b5a      	ldr	r3, [pc, #360]	@ (8001e54 <main+0x680>)
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	2350      	movs	r3, #80	@ 0x50
 8001cee:	2228      	movs	r2, #40	@ 0x28
 8001cf0:	2114      	movs	r1, #20
 8001cf2:	207c      	movs	r0, #124	@ 0x7c
 8001cf4:	f7ff fc26 	bl	8001544 <LCD_ImageFromSD>
		  key[2] = 3; HAL_Delay(1);
 8001cf8:	4b4e      	ldr	r3, [pc, #312]	@ (8001e34 <main+0x660>)
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	709a      	strb	r2, [r3, #2]
 8001cfe:	2001      	movs	r0, #1
 8001d00:	f000 ffb8 	bl	8002c74 <HAL_Delay>
		  LCD_Bitmap(139, 5, 10, 10, square_red_circle_10x10_max_bytes);
 8001d04:	4b4e      	ldr	r3, [pc, #312]	@ (8001e40 <main+0x66c>)
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	230a      	movs	r3, #10
 8001d0a:	220a      	movs	r2, #10
 8001d0c:	2105      	movs	r1, #5
 8001d0e:	208b      	movs	r0, #139	@ 0x8b
 8001d10:	f7ff fbbe 	bl	8001490 <LCD_Bitmap>
		  spaces |= (1 << 2);
 8001d14:	4b4b      	ldr	r3, [pc, #300]	@ (8001e44 <main+0x670>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	f043 0304 	orr.w	r3, r3, #4
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4b49      	ldr	r3, [pc, #292]	@ (8001e44 <main+0x670>)
 8001d20:	701a      	strb	r2, [r3, #0]
 8001d22:	e020      	b.n	8001d66 <main+0x592>
	  }else if(key[2] == 2){
 8001d24:	4b43      	ldr	r3, [pc, #268]	@ (8001e34 <main+0x660>)
 8001d26:	789b      	ldrb	r3, [r3, #2]
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d11c      	bne.n	8001d66 <main+0x592>
		  LCD_ImageFromSD(124, 20, 40, 80, cars[8]);
 8001d2c:	4b46      	ldr	r3, [pc, #280]	@ (8001e48 <main+0x674>)
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	2350      	movs	r3, #80	@ 0x50
 8001d32:	2228      	movs	r2, #40	@ 0x28
 8001d34:	2114      	movs	r1, #20
 8001d36:	207c      	movs	r0, #124	@ 0x7c
 8001d38:	f7ff fc04 	bl	8001544 <LCD_ImageFromSD>
		  key[2] = 3; HAL_Delay(1);
 8001d3c:	4b3d      	ldr	r3, [pc, #244]	@ (8001e34 <main+0x660>)
 8001d3e:	2203      	movs	r2, #3
 8001d40:	709a      	strb	r2, [r3, #2]
 8001d42:	2001      	movs	r0, #1
 8001d44:	f000 ff96 	bl	8002c74 <HAL_Delay>
		  LCD_Bitmap(139, 5, 10, 10, square_green_circle_10x10_max_bytes);
 8001d48:	4b40      	ldr	r3, [pc, #256]	@ (8001e4c <main+0x678>)
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	230a      	movs	r3, #10
 8001d4e:	220a      	movs	r2, #10
 8001d50:	2105      	movs	r1, #5
 8001d52:	208b      	movs	r0, #139	@ 0x8b
 8001d54:	f7ff fb9c 	bl	8001490 <LCD_Bitmap>
		  spaces &= ~(1 << 2);
 8001d58:	4b3a      	ldr	r3, [pc, #232]	@ (8001e44 <main+0x670>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	f023 0304 	bic.w	r3, r3, #4
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	4b38      	ldr	r3, [pc, #224]	@ (8001e44 <main+0x670>)
 8001d64:	701a      	strb	r2, [r3, #0]
	  }

	  if(key[3] == 1){
 8001d66:	4b33      	ldr	r3, [pc, #204]	@ (8001e34 <main+0x660>)
 8001d68:	78db      	ldrb	r3, [r3, #3]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d11d      	bne.n	8001daa <main+0x5d6>
		  LCD_ImageFromSD(174, 20, 40, 80, cars[3]);
 8001d6e:	4b3a      	ldr	r3, [pc, #232]	@ (8001e58 <main+0x684>)
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	2350      	movs	r3, #80	@ 0x50
 8001d74:	2228      	movs	r2, #40	@ 0x28
 8001d76:	2114      	movs	r1, #20
 8001d78:	20ae      	movs	r0, #174	@ 0xae
 8001d7a:	f7ff fbe3 	bl	8001544 <LCD_ImageFromSD>
		  key[3] = 3; HAL_Delay(1);
 8001d7e:	4b2d      	ldr	r3, [pc, #180]	@ (8001e34 <main+0x660>)
 8001d80:	2203      	movs	r2, #3
 8001d82:	70da      	strb	r2, [r3, #3]
 8001d84:	2001      	movs	r0, #1
 8001d86:	f000 ff75 	bl	8002c74 <HAL_Delay>
		  LCD_Bitmap(189, 5, 10, 10, square_red_circle_10x10_max_bytes);
 8001d8a:	4b2d      	ldr	r3, [pc, #180]	@ (8001e40 <main+0x66c>)
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	230a      	movs	r3, #10
 8001d90:	220a      	movs	r2, #10
 8001d92:	2105      	movs	r1, #5
 8001d94:	20bd      	movs	r0, #189	@ 0xbd
 8001d96:	f7ff fb7b 	bl	8001490 <LCD_Bitmap>
		  spaces |= (1 << 3);
 8001d9a:	4b2a      	ldr	r3, [pc, #168]	@ (8001e44 <main+0x670>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	f043 0308 	orr.w	r3, r3, #8
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	4b27      	ldr	r3, [pc, #156]	@ (8001e44 <main+0x670>)
 8001da6:	701a      	strb	r2, [r3, #0]
 8001da8:	e020      	b.n	8001dec <main+0x618>
	  }else if(key[3] == 2){
 8001daa:	4b22      	ldr	r3, [pc, #136]	@ (8001e34 <main+0x660>)
 8001dac:	78db      	ldrb	r3, [r3, #3]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d11c      	bne.n	8001dec <main+0x618>
		  LCD_ImageFromSD(174, 20, 40, 80, cars[8]);
 8001db2:	4b25      	ldr	r3, [pc, #148]	@ (8001e48 <main+0x674>)
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	2350      	movs	r3, #80	@ 0x50
 8001db8:	2228      	movs	r2, #40	@ 0x28
 8001dba:	2114      	movs	r1, #20
 8001dbc:	20ae      	movs	r0, #174	@ 0xae
 8001dbe:	f7ff fbc1 	bl	8001544 <LCD_ImageFromSD>
		  key[3] = 3; HAL_Delay(1);
 8001dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e34 <main+0x660>)
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	70da      	strb	r2, [r3, #3]
 8001dc8:	2001      	movs	r0, #1
 8001dca:	f000 ff53 	bl	8002c74 <HAL_Delay>
		  LCD_Bitmap(189, 5, 10, 10, square_green_circle_10x10_max_bytes);
 8001dce:	4b1f      	ldr	r3, [pc, #124]	@ (8001e4c <main+0x678>)
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	230a      	movs	r3, #10
 8001dd4:	220a      	movs	r2, #10
 8001dd6:	2105      	movs	r1, #5
 8001dd8:	20bd      	movs	r0, #189	@ 0xbd
 8001dda:	f7ff fb59 	bl	8001490 <LCD_Bitmap>
		  spaces &= ~(1 << 3);
 8001dde:	4b19      	ldr	r3, [pc, #100]	@ (8001e44 <main+0x670>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	f023 0308 	bic.w	r3, r3, #8
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	4b16      	ldr	r3, [pc, #88]	@ (8001e44 <main+0x670>)
 8001dea:	701a      	strb	r2, [r3, #0]
	  }

	  if(key[4] == 1){
 8001dec:	4b11      	ldr	r3, [pc, #68]	@ (8001e34 <main+0x660>)
 8001dee:	791b      	ldrb	r3, [r3, #4]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d135      	bne.n	8001e60 <main+0x68c>
		  LCD_ImageFromSD(26, 140, 40, 80, cars[4]);
 8001df4:	4b19      	ldr	r3, [pc, #100]	@ (8001e5c <main+0x688>)
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	2350      	movs	r3, #80	@ 0x50
 8001dfa:	2228      	movs	r2, #40	@ 0x28
 8001dfc:	218c      	movs	r1, #140	@ 0x8c
 8001dfe:	201a      	movs	r0, #26
 8001e00:	f7ff fba0 	bl	8001544 <LCD_ImageFromSD>
		  key[4] = 3; HAL_Delay(1);
 8001e04:	4b0b      	ldr	r3, [pc, #44]	@ (8001e34 <main+0x660>)
 8001e06:	2203      	movs	r2, #3
 8001e08:	711a      	strb	r2, [r3, #4]
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	f000 ff32 	bl	8002c74 <HAL_Delay>
		  LCD_Bitmap(41, 225, 10, 10, square_red_circle_10x10_max_bytes);
 8001e10:	4b0b      	ldr	r3, [pc, #44]	@ (8001e40 <main+0x66c>)
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	230a      	movs	r3, #10
 8001e16:	220a      	movs	r2, #10
 8001e18:	21e1      	movs	r1, #225	@ 0xe1
 8001e1a:	2029      	movs	r0, #41	@ 0x29
 8001e1c:	f7ff fb38 	bl	8001490 <LCD_Bitmap>
		  spaces |= (1 << 4);
 8001e20:	4b08      	ldr	r3, [pc, #32]	@ (8001e44 <main+0x670>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	f043 0310 	orr.w	r3, r3, #16
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <main+0x670>)
 8001e2c:	701a      	strb	r2, [r3, #0]
 8001e2e:	e038      	b.n	8001ea2 <main+0x6ce>
 8001e30:	40020800 	.word	0x40020800
 8001e34:	20001220 	.word	0x20001220
 8001e38:	2000121d 	.word	0x2000121d
 8001e3c:	20000034 	.word	0x20000034
 8001e40:	0800b65c 	.word	0x0800b65c
 8001e44:	20001230 	.word	0x20001230
 8001e48:	200000d4 	.word	0x200000d4
 8001e4c:	0800b724 	.word	0x0800b724
 8001e50:	20000048 	.word	0x20000048
 8001e54:	2000005c 	.word	0x2000005c
 8001e58:	20000070 	.word	0x20000070
 8001e5c:	20000084 	.word	0x20000084
	  }else if(key[4] == 2){
 8001e60:	4b99      	ldr	r3, [pc, #612]	@ (80020c8 <main+0x8f4>)
 8001e62:	791b      	ldrb	r3, [r3, #4]
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d11c      	bne.n	8001ea2 <main+0x6ce>
		  LCD_ImageFromSD(26, 140, 40, 80, cars[8]);
 8001e68:	4b98      	ldr	r3, [pc, #608]	@ (80020cc <main+0x8f8>)
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	2350      	movs	r3, #80	@ 0x50
 8001e6e:	2228      	movs	r2, #40	@ 0x28
 8001e70:	218c      	movs	r1, #140	@ 0x8c
 8001e72:	201a      	movs	r0, #26
 8001e74:	f7ff fb66 	bl	8001544 <LCD_ImageFromSD>
		  key[4] = 3; HAL_Delay(1);
 8001e78:	4b93      	ldr	r3, [pc, #588]	@ (80020c8 <main+0x8f4>)
 8001e7a:	2203      	movs	r2, #3
 8001e7c:	711a      	strb	r2, [r3, #4]
 8001e7e:	2001      	movs	r0, #1
 8001e80:	f000 fef8 	bl	8002c74 <HAL_Delay>
		  LCD_Bitmap(41, 225, 10, 10, square_green_circle_10x10_max_bytes);
 8001e84:	4b92      	ldr	r3, [pc, #584]	@ (80020d0 <main+0x8fc>)
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	230a      	movs	r3, #10
 8001e8a:	220a      	movs	r2, #10
 8001e8c:	21e1      	movs	r1, #225	@ 0xe1
 8001e8e:	2029      	movs	r0, #41	@ 0x29
 8001e90:	f7ff fafe 	bl	8001490 <LCD_Bitmap>
		  spaces &= ~(1 << 4);
 8001e94:	4b8f      	ldr	r3, [pc, #572]	@ (80020d4 <main+0x900>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	f023 0310 	bic.w	r3, r3, #16
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	4b8d      	ldr	r3, [pc, #564]	@ (80020d4 <main+0x900>)
 8001ea0:	701a      	strb	r2, [r3, #0]
	  }

	  if(key[5] == 1){
 8001ea2:	4b89      	ldr	r3, [pc, #548]	@ (80020c8 <main+0x8f4>)
 8001ea4:	795b      	ldrb	r3, [r3, #5]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d11d      	bne.n	8001ee6 <main+0x712>
		  LCD_ImageFromSD(76, 140, 40, 80, cars[5]);
 8001eaa:	4b8b      	ldr	r3, [pc, #556]	@ (80020d8 <main+0x904>)
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	2350      	movs	r3, #80	@ 0x50
 8001eb0:	2228      	movs	r2, #40	@ 0x28
 8001eb2:	218c      	movs	r1, #140	@ 0x8c
 8001eb4:	204c      	movs	r0, #76	@ 0x4c
 8001eb6:	f7ff fb45 	bl	8001544 <LCD_ImageFromSD>
		  key[5] = 3; HAL_Delay(1);
 8001eba:	4b83      	ldr	r3, [pc, #524]	@ (80020c8 <main+0x8f4>)
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	715a      	strb	r2, [r3, #5]
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	f000 fed7 	bl	8002c74 <HAL_Delay>
		  LCD_Bitmap(91, 225, 10, 10, square_red_circle_10x10_max_bytes);
 8001ec6:	4b85      	ldr	r3, [pc, #532]	@ (80020dc <main+0x908>)
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	230a      	movs	r3, #10
 8001ecc:	220a      	movs	r2, #10
 8001ece:	21e1      	movs	r1, #225	@ 0xe1
 8001ed0:	205b      	movs	r0, #91	@ 0x5b
 8001ed2:	f7ff fadd 	bl	8001490 <LCD_Bitmap>
		  spaces |= (1 << 5);
 8001ed6:	4b7f      	ldr	r3, [pc, #508]	@ (80020d4 <main+0x900>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	f043 0320 	orr.w	r3, r3, #32
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	4b7c      	ldr	r3, [pc, #496]	@ (80020d4 <main+0x900>)
 8001ee2:	701a      	strb	r2, [r3, #0]
 8001ee4:	e020      	b.n	8001f28 <main+0x754>
	  }else if(key[5] == 2){
 8001ee6:	4b78      	ldr	r3, [pc, #480]	@ (80020c8 <main+0x8f4>)
 8001ee8:	795b      	ldrb	r3, [r3, #5]
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d11c      	bne.n	8001f28 <main+0x754>
		  LCD_ImageFromSD(76, 140, 40, 80, cars[8]);
 8001eee:	4b77      	ldr	r3, [pc, #476]	@ (80020cc <main+0x8f8>)
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	2350      	movs	r3, #80	@ 0x50
 8001ef4:	2228      	movs	r2, #40	@ 0x28
 8001ef6:	218c      	movs	r1, #140	@ 0x8c
 8001ef8:	204c      	movs	r0, #76	@ 0x4c
 8001efa:	f7ff fb23 	bl	8001544 <LCD_ImageFromSD>
		  key[5] = 3; HAL_Delay(1);
 8001efe:	4b72      	ldr	r3, [pc, #456]	@ (80020c8 <main+0x8f4>)
 8001f00:	2203      	movs	r2, #3
 8001f02:	715a      	strb	r2, [r3, #5]
 8001f04:	2001      	movs	r0, #1
 8001f06:	f000 feb5 	bl	8002c74 <HAL_Delay>
		  LCD_Bitmap(91, 225, 10, 10, square_green_circle_10x10_max_bytes);
 8001f0a:	4b71      	ldr	r3, [pc, #452]	@ (80020d0 <main+0x8fc>)
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	230a      	movs	r3, #10
 8001f10:	220a      	movs	r2, #10
 8001f12:	21e1      	movs	r1, #225	@ 0xe1
 8001f14:	205b      	movs	r0, #91	@ 0x5b
 8001f16:	f7ff fabb 	bl	8001490 <LCD_Bitmap>
		  spaces &= ~(1 << 5);
 8001f1a:	4b6e      	ldr	r3, [pc, #440]	@ (80020d4 <main+0x900>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	f023 0320 	bic.w	r3, r3, #32
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	4b6b      	ldr	r3, [pc, #428]	@ (80020d4 <main+0x900>)
 8001f26:	701a      	strb	r2, [r3, #0]
	  }

	  if(key[6] == 1){
 8001f28:	4b67      	ldr	r3, [pc, #412]	@ (80020c8 <main+0x8f4>)
 8001f2a:	799b      	ldrb	r3, [r3, #6]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d11d      	bne.n	8001f6c <main+0x798>
		  LCD_ImageFromSD(124, 140, 40, 80, cars[6]);
 8001f30:	4b6b      	ldr	r3, [pc, #428]	@ (80020e0 <main+0x90c>)
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	2350      	movs	r3, #80	@ 0x50
 8001f36:	2228      	movs	r2, #40	@ 0x28
 8001f38:	218c      	movs	r1, #140	@ 0x8c
 8001f3a:	207c      	movs	r0, #124	@ 0x7c
 8001f3c:	f7ff fb02 	bl	8001544 <LCD_ImageFromSD>
		  key[6] = 3; HAL_Delay(1);
 8001f40:	4b61      	ldr	r3, [pc, #388]	@ (80020c8 <main+0x8f4>)
 8001f42:	2203      	movs	r2, #3
 8001f44:	719a      	strb	r2, [r3, #6]
 8001f46:	2001      	movs	r0, #1
 8001f48:	f000 fe94 	bl	8002c74 <HAL_Delay>
		  LCD_Bitmap(139, 225, 10, 10, square_red_circle_10x10_max_bytes);
 8001f4c:	4b63      	ldr	r3, [pc, #396]	@ (80020dc <main+0x908>)
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	230a      	movs	r3, #10
 8001f52:	220a      	movs	r2, #10
 8001f54:	21e1      	movs	r1, #225	@ 0xe1
 8001f56:	208b      	movs	r0, #139	@ 0x8b
 8001f58:	f7ff fa9a 	bl	8001490 <LCD_Bitmap>
		  spaces |= (1 << 6);
 8001f5c:	4b5d      	ldr	r3, [pc, #372]	@ (80020d4 <main+0x900>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	4b5b      	ldr	r3, [pc, #364]	@ (80020d4 <main+0x900>)
 8001f68:	701a      	strb	r2, [r3, #0]
 8001f6a:	e020      	b.n	8001fae <main+0x7da>
	  }else if(key[6] == 2){
 8001f6c:	4b56      	ldr	r3, [pc, #344]	@ (80020c8 <main+0x8f4>)
 8001f6e:	799b      	ldrb	r3, [r3, #6]
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d11c      	bne.n	8001fae <main+0x7da>
		  LCD_ImageFromSD(124, 140, 40, 80, cars[8]);
 8001f74:	4b55      	ldr	r3, [pc, #340]	@ (80020cc <main+0x8f8>)
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	2350      	movs	r3, #80	@ 0x50
 8001f7a:	2228      	movs	r2, #40	@ 0x28
 8001f7c:	218c      	movs	r1, #140	@ 0x8c
 8001f7e:	207c      	movs	r0, #124	@ 0x7c
 8001f80:	f7ff fae0 	bl	8001544 <LCD_ImageFromSD>
		  key[6] = 3; HAL_Delay(1);
 8001f84:	4b50      	ldr	r3, [pc, #320]	@ (80020c8 <main+0x8f4>)
 8001f86:	2203      	movs	r2, #3
 8001f88:	719a      	strb	r2, [r3, #6]
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	f000 fe72 	bl	8002c74 <HAL_Delay>
		  LCD_Bitmap(139, 225, 10, 10, square_green_circle_10x10_max_bytes);
 8001f90:	4b4f      	ldr	r3, [pc, #316]	@ (80020d0 <main+0x8fc>)
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	230a      	movs	r3, #10
 8001f96:	220a      	movs	r2, #10
 8001f98:	21e1      	movs	r1, #225	@ 0xe1
 8001f9a:	208b      	movs	r0, #139	@ 0x8b
 8001f9c:	f7ff fa78 	bl	8001490 <LCD_Bitmap>
		  spaces &= ~(1 << 6);
 8001fa0:	4b4c      	ldr	r3, [pc, #304]	@ (80020d4 <main+0x900>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	4b4a      	ldr	r3, [pc, #296]	@ (80020d4 <main+0x900>)
 8001fac:	701a      	strb	r2, [r3, #0]
	  }

	  if(key[7] == 1){
 8001fae:	4b46      	ldr	r3, [pc, #280]	@ (80020c8 <main+0x8f4>)
 8001fb0:	79db      	ldrb	r3, [r3, #7]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d11d      	bne.n	8001ff2 <main+0x81e>
		  LCD_ImageFromSD(174, 140, 40, 80, cars[7]);
 8001fb6:	4b4b      	ldr	r3, [pc, #300]	@ (80020e4 <main+0x910>)
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	2350      	movs	r3, #80	@ 0x50
 8001fbc:	2228      	movs	r2, #40	@ 0x28
 8001fbe:	218c      	movs	r1, #140	@ 0x8c
 8001fc0:	20ae      	movs	r0, #174	@ 0xae
 8001fc2:	f7ff fabf 	bl	8001544 <LCD_ImageFromSD>
		  key[7] = 3; HAL_Delay(1);
 8001fc6:	4b40      	ldr	r3, [pc, #256]	@ (80020c8 <main+0x8f4>)
 8001fc8:	2203      	movs	r2, #3
 8001fca:	71da      	strb	r2, [r3, #7]
 8001fcc:	2001      	movs	r0, #1
 8001fce:	f000 fe51 	bl	8002c74 <HAL_Delay>
		  LCD_Bitmap(189, 225, 10, 10, square_red_circle_10x10_max_bytes);
 8001fd2:	4b42      	ldr	r3, [pc, #264]	@ (80020dc <main+0x908>)
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	230a      	movs	r3, #10
 8001fd8:	220a      	movs	r2, #10
 8001fda:	21e1      	movs	r1, #225	@ 0xe1
 8001fdc:	20bd      	movs	r0, #189	@ 0xbd
 8001fde:	f7ff fa57 	bl	8001490 <LCD_Bitmap>
		  spaces |= (1 << 7);
 8001fe2:	4b3c      	ldr	r3, [pc, #240]	@ (80020d4 <main+0x900>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	4b39      	ldr	r3, [pc, #228]	@ (80020d4 <main+0x900>)
 8001fee:	701a      	strb	r2, [r3, #0]
 8001ff0:	e020      	b.n	8002034 <main+0x860>
	  }else if(key[7] == 2){
 8001ff2:	4b35      	ldr	r3, [pc, #212]	@ (80020c8 <main+0x8f4>)
 8001ff4:	79db      	ldrb	r3, [r3, #7]
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d11c      	bne.n	8002034 <main+0x860>
		  LCD_ImageFromSD(174, 140, 40, 80, cars[8]);
 8001ffa:	4b34      	ldr	r3, [pc, #208]	@ (80020cc <main+0x8f8>)
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	2350      	movs	r3, #80	@ 0x50
 8002000:	2228      	movs	r2, #40	@ 0x28
 8002002:	218c      	movs	r1, #140	@ 0x8c
 8002004:	20ae      	movs	r0, #174	@ 0xae
 8002006:	f7ff fa9d 	bl	8001544 <LCD_ImageFromSD>
		  key[7] = 3; HAL_Delay(1);
 800200a:	4b2f      	ldr	r3, [pc, #188]	@ (80020c8 <main+0x8f4>)
 800200c:	2203      	movs	r2, #3
 800200e:	71da      	strb	r2, [r3, #7]
 8002010:	2001      	movs	r0, #1
 8002012:	f000 fe2f 	bl	8002c74 <HAL_Delay>
		  LCD_Bitmap(189, 225, 10, 10, square_green_circle_10x10_max_bytes);
 8002016:	4b2e      	ldr	r3, [pc, #184]	@ (80020d0 <main+0x8fc>)
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	230a      	movs	r3, #10
 800201c:	220a      	movs	r2, #10
 800201e:	21e1      	movs	r1, #225	@ 0xe1
 8002020:	20bd      	movs	r0, #189	@ 0xbd
 8002022:	f7ff fa35 	bl	8001490 <LCD_Bitmap>
		  spaces &= ~(1 << 7);
 8002026:	4b2b      	ldr	r3, [pc, #172]	@ (80020d4 <main+0x900>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800202e:	b2da      	uxtb	r2, r3
 8002030:	4b28      	ldr	r3, [pc, #160]	@ (80020d4 <main+0x900>)
 8002032:	701a      	strb	r2, [r3, #0]
	  }


	  for(int i =  0; i < 8; i++)
 8002034:	2300      	movs	r3, #0
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	e03f      	b.n	80020ba <main+0x8e6>
		  if(key[i] == 3){
 800203a:	4a23      	ldr	r2, [pc, #140]	@ (80020c8 <main+0x8f4>)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4413      	add	r3, r2
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b03      	cmp	r3, #3
 8002044:	d136      	bne.n	80020b4 <main+0x8e0>
			  key[i] = 0;			// restart key
 8002046:	4a20      	ldr	r2, [pc, #128]	@ (80020c8 <main+0x8f4>)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4413      	add	r3, r2
 800204c:	2200      	movs	r2, #0
 800204e:	701a      	strb	r2, [r3, #0]
			  cont = 0;				// restart spaces counter
 8002050:	4b25      	ldr	r3, [pc, #148]	@ (80020e8 <main+0x914>)
 8002052:	2200      	movs	r2, #0
 8002054:	701a      	strb	r2, [r3, #0]
			  for(int j = 0; j < 8; j++) spaces & (1 << j) ? (cont++) : (cont = cont);		// counting from bits
 8002056:	2300      	movs	r3, #0
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	e017      	b.n	800208c <main+0x8b8>
 800205c:	4b1d      	ldr	r3, [pc, #116]	@ (80020d4 <main+0x900>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	461a      	mov	r2, r3
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	fa42 f303 	asr.w	r3, r2, r3
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b00      	cmp	r3, #0
 800206e:	d006      	beq.n	800207e <main+0x8aa>
 8002070:	4b1d      	ldr	r3, [pc, #116]	@ (80020e8 <main+0x914>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	3301      	adds	r3, #1
 8002076:	b2da      	uxtb	r2, r3
 8002078:	4b1b      	ldr	r3, [pc, #108]	@ (80020e8 <main+0x914>)
 800207a:	701a      	strb	r2, [r3, #0]
 800207c:	e003      	b.n	8002086 <main+0x8b2>
 800207e:	4b1a      	ldr	r3, [pc, #104]	@ (80020e8 <main+0x914>)
 8002080:	781a      	ldrb	r2, [r3, #0]
 8002082:	4b19      	ldr	r3, [pc, #100]	@ (80020e8 <main+0x914>)
 8002084:	701a      	strb	r2, [r3, #0]
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	3301      	adds	r3, #1
 800208a:	60bb      	str	r3, [r7, #8]
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	2b07      	cmp	r3, #7
 8002090:	dde4      	ble.n	800205c <main+0x888>
			  LCD_ImageFromSD(255, 100, 40, 80, numbers[8-cont]);
 8002092:	4b15      	ldr	r3, [pc, #84]	@ (80020e8 <main+0x914>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	f1c3 0208 	rsb	r2, r3, #8
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4a12      	ldr	r2, [pc, #72]	@ (80020ec <main+0x918>)
 80020a4:	4413      	add	r3, r2
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	2350      	movs	r3, #80	@ 0x50
 80020aa:	2228      	movs	r2, #40	@ 0x28
 80020ac:	2164      	movs	r1, #100	@ 0x64
 80020ae:	20ff      	movs	r0, #255	@ 0xff
 80020b0:	f7ff fa48 	bl	8001544 <LCD_ImageFromSD>
	  for(int i =  0; i < 8; i++)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	3301      	adds	r3, #1
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2b07      	cmp	r3, #7
 80020be:	ddbc      	ble.n	800203a <main+0x866>
		  }
	  HAL_Delay(1);
 80020c0:	2001      	movs	r0, #1
 80020c2:	f000 fdd7 	bl	8002c74 <HAL_Delay>
	  if(key[0] == 1){
 80020c6:	e585      	b.n	8001bd4 <main+0x400>
 80020c8:	20001220 	.word	0x20001220
 80020cc:	200000d4 	.word	0x200000d4
 80020d0:	0800b724 	.word	0x0800b724
 80020d4:	20001230 	.word	0x20001230
 80020d8:	20000098 	.word	0x20000098
 80020dc:	0800b65c 	.word	0x0800b65c
 80020e0:	200000ac 	.word	0x200000ac
 80020e4:	200000c0 	.word	0x200000c0
 80020e8:	20001231 	.word	0x20001231
 80020ec:	200000e8 	.word	0x200000e8

080020f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b094      	sub	sp, #80	@ 0x50
 80020f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020f6:	f107 031c 	add.w	r3, r7, #28
 80020fa:	2234      	movs	r2, #52	@ 0x34
 80020fc:	2100      	movs	r1, #0
 80020fe:	4618      	mov	r0, r3
 8002100:	f008 fa00 	bl	800a504 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002104:	f107 0308 	add.w	r3, r7, #8
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002114:	2300      	movs	r3, #0
 8002116:	607b      	str	r3, [r7, #4]
 8002118:	4b29      	ldr	r3, [pc, #164]	@ (80021c0 <SystemClock_Config+0xd0>)
 800211a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211c:	4a28      	ldr	r2, [pc, #160]	@ (80021c0 <SystemClock_Config+0xd0>)
 800211e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002122:	6413      	str	r3, [r2, #64]	@ 0x40
 8002124:	4b26      	ldr	r3, [pc, #152]	@ (80021c0 <SystemClock_Config+0xd0>)
 8002126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002128:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800212c:	607b      	str	r3, [r7, #4]
 800212e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002130:	2300      	movs	r3, #0
 8002132:	603b      	str	r3, [r7, #0]
 8002134:	4b23      	ldr	r3, [pc, #140]	@ (80021c4 <SystemClock_Config+0xd4>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a22      	ldr	r2, [pc, #136]	@ (80021c4 <SystemClock_Config+0xd4>)
 800213a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800213e:	6013      	str	r3, [r2, #0]
 8002140:	4b20      	ldr	r3, [pc, #128]	@ (80021c4 <SystemClock_Config+0xd4>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002148:	603b      	str	r3, [r7, #0]
 800214a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800214c:	2302      	movs	r3, #2
 800214e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002150:	2301      	movs	r3, #1
 8002152:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002154:	2310      	movs	r3, #16
 8002156:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002158:	2302      	movs	r3, #2
 800215a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800215c:	2300      	movs	r3, #0
 800215e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002160:	2308      	movs	r3, #8
 8002162:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8002164:	23a0      	movs	r3, #160	@ 0xa0
 8002166:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002168:	2302      	movs	r3, #2
 800216a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800216c:	2302      	movs	r3, #2
 800216e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002170:	2302      	movs	r3, #2
 8002172:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002174:	f107 031c 	add.w	r3, r7, #28
 8002178:	4618      	mov	r0, r3
 800217a:	f003 fbc9 	bl	8005910 <HAL_RCC_OscConfig>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002184:	f000 fb24 	bl	80027d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002188:	230f      	movs	r3, #15
 800218a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800218c:	2302      	movs	r3, #2
 800218e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002190:	2300      	movs	r3, #0
 8002192:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002194:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002198:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800219a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800219e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80021a0:	f107 0308 	add.w	r3, r7, #8
 80021a4:	2105      	movs	r1, #5
 80021a6:	4618      	mov	r0, r3
 80021a8:	f003 f868 	bl	800527c <HAL_RCC_ClockConfig>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80021b2:	f000 fb0d 	bl	80027d0 <Error_Handler>
  }
}
 80021b6:	bf00      	nop
 80021b8:	3750      	adds	r7, #80	@ 0x50
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40007000 	.word	0x40007000

080021c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021cc:	4b12      	ldr	r3, [pc, #72]	@ (8002218 <MX_I2C1_Init+0x50>)
 80021ce:	4a13      	ldr	r2, [pc, #76]	@ (800221c <MX_I2C1_Init+0x54>)
 80021d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80021d2:	4b11      	ldr	r3, [pc, #68]	@ (8002218 <MX_I2C1_Init+0x50>)
 80021d4:	4a12      	ldr	r2, [pc, #72]	@ (8002220 <MX_I2C1_Init+0x58>)
 80021d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002218 <MX_I2C1_Init+0x50>)
 80021da:	2200      	movs	r2, #0
 80021dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 96;
 80021de:	4b0e      	ldr	r3, [pc, #56]	@ (8002218 <MX_I2C1_Init+0x50>)
 80021e0:	2260      	movs	r2, #96	@ 0x60
 80021e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002218 <MX_I2C1_Init+0x50>)
 80021e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80021ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002218 <MX_I2C1_Init+0x50>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021f2:	4b09      	ldr	r3, [pc, #36]	@ (8002218 <MX_I2C1_Init+0x50>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021f8:	4b07      	ldr	r3, [pc, #28]	@ (8002218 <MX_I2C1_Init+0x50>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021fe:	4b06      	ldr	r3, [pc, #24]	@ (8002218 <MX_I2C1_Init+0x50>)
 8002200:	2200      	movs	r2, #0
 8002202:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002204:	4804      	ldr	r0, [pc, #16]	@ (8002218 <MX_I2C1_Init+0x50>)
 8002206:	f001 f8f5 	bl	80033f4 <HAL_I2C_Init>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002210:	f000 fade 	bl	80027d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002214:	bf00      	nop
 8002216:	bd80      	pop	{r7, pc}
 8002218:	2000123c 	.word	0x2000123c
 800221c:	40005400 	.word	0x40005400
 8002220:	000186a0 	.word	0x000186a0

08002224 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002228:	4b17      	ldr	r3, [pc, #92]	@ (8002288 <MX_SPI1_Init+0x64>)
 800222a:	4a18      	ldr	r2, [pc, #96]	@ (800228c <MX_SPI1_Init+0x68>)
 800222c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800222e:	4b16      	ldr	r3, [pc, #88]	@ (8002288 <MX_SPI1_Init+0x64>)
 8002230:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002234:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002236:	4b14      	ldr	r3, [pc, #80]	@ (8002288 <MX_SPI1_Init+0x64>)
 8002238:	2200      	movs	r2, #0
 800223a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800223c:	4b12      	ldr	r3, [pc, #72]	@ (8002288 <MX_SPI1_Init+0x64>)
 800223e:	2200      	movs	r2, #0
 8002240:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002242:	4b11      	ldr	r3, [pc, #68]	@ (8002288 <MX_SPI1_Init+0x64>)
 8002244:	2200      	movs	r2, #0
 8002246:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002248:	4b0f      	ldr	r3, [pc, #60]	@ (8002288 <MX_SPI1_Init+0x64>)
 800224a:	2200      	movs	r2, #0
 800224c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800224e:	4b0e      	ldr	r3, [pc, #56]	@ (8002288 <MX_SPI1_Init+0x64>)
 8002250:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002254:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002256:	4b0c      	ldr	r3, [pc, #48]	@ (8002288 <MX_SPI1_Init+0x64>)
 8002258:	2210      	movs	r2, #16
 800225a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800225c:	4b0a      	ldr	r3, [pc, #40]	@ (8002288 <MX_SPI1_Init+0x64>)
 800225e:	2200      	movs	r2, #0
 8002260:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002262:	4b09      	ldr	r3, [pc, #36]	@ (8002288 <MX_SPI1_Init+0x64>)
 8002264:	2200      	movs	r2, #0
 8002266:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002268:	4b07      	ldr	r3, [pc, #28]	@ (8002288 <MX_SPI1_Init+0x64>)
 800226a:	2200      	movs	r2, #0
 800226c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800226e:	4b06      	ldr	r3, [pc, #24]	@ (8002288 <MX_SPI1_Init+0x64>)
 8002270:	220a      	movs	r2, #10
 8002272:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002274:	4804      	ldr	r0, [pc, #16]	@ (8002288 <MX_SPI1_Init+0x64>)
 8002276:	f003 fde9 	bl	8005e4c <HAL_SPI_Init>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002280:	f000 faa6 	bl	80027d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002284:	bf00      	nop
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20001290 	.word	0x20001290
 800228c:	40013000 	.word	0x40013000

08002290 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002294:	4b11      	ldr	r3, [pc, #68]	@ (80022dc <MX_USART2_UART_Init+0x4c>)
 8002296:	4a12      	ldr	r2, [pc, #72]	@ (80022e0 <MX_USART2_UART_Init+0x50>)
 8002298:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800229a:	4b10      	ldr	r3, [pc, #64]	@ (80022dc <MX_USART2_UART_Init+0x4c>)
 800229c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022a2:	4b0e      	ldr	r3, [pc, #56]	@ (80022dc <MX_USART2_UART_Init+0x4c>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022a8:	4b0c      	ldr	r3, [pc, #48]	@ (80022dc <MX_USART2_UART_Init+0x4c>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022ae:	4b0b      	ldr	r3, [pc, #44]	@ (80022dc <MX_USART2_UART_Init+0x4c>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022b4:	4b09      	ldr	r3, [pc, #36]	@ (80022dc <MX_USART2_UART_Init+0x4c>)
 80022b6:	220c      	movs	r2, #12
 80022b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ba:	4b08      	ldr	r3, [pc, #32]	@ (80022dc <MX_USART2_UART_Init+0x4c>)
 80022bc:	2200      	movs	r2, #0
 80022be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022c0:	4b06      	ldr	r3, [pc, #24]	@ (80022dc <MX_USART2_UART_Init+0x4c>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022c6:	4805      	ldr	r0, [pc, #20]	@ (80022dc <MX_USART2_UART_Init+0x4c>)
 80022c8:	f004 fa12 	bl	80066f0 <HAL_UART_Init>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022d2:	f000 fa7d 	bl	80027d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	200012e8 	.word	0x200012e8
 80022e0:	40004400 	.word	0x40004400

080022e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08a      	sub	sp, #40	@ 0x28
 80022e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ea:	f107 0314 	add.w	r3, r7, #20
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	605a      	str	r2, [r3, #4]
 80022f4:	609a      	str	r2, [r3, #8]
 80022f6:	60da      	str	r2, [r3, #12]
 80022f8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	4b66      	ldr	r3, [pc, #408]	@ (8002498 <MX_GPIO_Init+0x1b4>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002302:	4a65      	ldr	r2, [pc, #404]	@ (8002498 <MX_GPIO_Init+0x1b4>)
 8002304:	f043 0304 	orr.w	r3, r3, #4
 8002308:	6313      	str	r3, [r2, #48]	@ 0x30
 800230a:	4b63      	ldr	r3, [pc, #396]	@ (8002498 <MX_GPIO_Init+0x1b4>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230e:	f003 0304 	and.w	r3, r3, #4
 8002312:	613b      	str	r3, [r7, #16]
 8002314:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	4b5f      	ldr	r3, [pc, #380]	@ (8002498 <MX_GPIO_Init+0x1b4>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231e:	4a5e      	ldr	r2, [pc, #376]	@ (8002498 <MX_GPIO_Init+0x1b4>)
 8002320:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002324:	6313      	str	r3, [r2, #48]	@ 0x30
 8002326:	4b5c      	ldr	r3, [pc, #368]	@ (8002498 <MX_GPIO_Init+0x1b4>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	60bb      	str	r3, [r7, #8]
 8002336:	4b58      	ldr	r3, [pc, #352]	@ (8002498 <MX_GPIO_Init+0x1b4>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233a:	4a57      	ldr	r2, [pc, #348]	@ (8002498 <MX_GPIO_Init+0x1b4>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6313      	str	r3, [r2, #48]	@ 0x30
 8002342:	4b55      	ldr	r3, [pc, #340]	@ (8002498 <MX_GPIO_Init+0x1b4>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	60bb      	str	r3, [r7, #8]
 800234c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	607b      	str	r3, [r7, #4]
 8002352:	4b51      	ldr	r3, [pc, #324]	@ (8002498 <MX_GPIO_Init+0x1b4>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002356:	4a50      	ldr	r2, [pc, #320]	@ (8002498 <MX_GPIO_Init+0x1b4>)
 8002358:	f043 0302 	orr.w	r3, r3, #2
 800235c:	6313      	str	r3, [r2, #48]	@ 0x30
 800235e:	4b4e      	ldr	r3, [pc, #312]	@ (8002498 <MX_GPIO_Init+0x1b4>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	607b      	str	r3, [r7, #4]
 8002368:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|LCD_D1_Pin, GPIO_PIN_RESET);
 800236a:	2200      	movs	r2, #0
 800236c:	2182      	movs	r1, #130	@ 0x82
 800236e:	484b      	ldr	r0, [pc, #300]	@ (800249c <MX_GPIO_Init+0x1b8>)
 8002370:	f001 f80e 	bl	8003390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 8002374:	2200      	movs	r2, #0
 8002376:	f240 7113 	movw	r1, #1811	@ 0x713
 800237a:	4849      	ldr	r0, [pc, #292]	@ (80024a0 <MX_GPIO_Init+0x1bc>)
 800237c:	f001 f808 	bl	8003390 <HAL_GPIO_WritePin>
                          |LCD_D0_Pin|LCD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 8002380:	2200      	movs	r2, #0
 8002382:	f240 4139 	movw	r1, #1081	@ 0x439
 8002386:	4847      	ldr	r0, [pc, #284]	@ (80024a4 <MX_GPIO_Init+0x1c0>)
 8002388:	f001 f802 	bl	8003390 <HAL_GPIO_WritePin>
                          |LCD_D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_SS_GPIO_Port, SD_SS_Pin, GPIO_PIN_SET);
 800238c:	2201      	movs	r2, #1
 800238e:	2140      	movs	r1, #64	@ 0x40
 8002390:	4844      	ldr	r0, [pc, #272]	@ (80024a4 <MX_GPIO_Init+0x1c0>)
 8002392:	f000 fffd 	bl	8003390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002396:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800239a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800239c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80023a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023a6:	f107 0314 	add.w	r3, r7, #20
 80023aa:	4619      	mov	r1, r3
 80023ac:	483b      	ldr	r0, [pc, #236]	@ (800249c <MX_GPIO_Init+0x1b8>)
 80023ae:	f000 fe43 	bl	8003038 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_D1_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_D1_Pin;
 80023b2:	2382      	movs	r3, #130	@ 0x82
 80023b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b6:	2301      	movs	r3, #1
 80023b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ba:	2300      	movs	r3, #0
 80023bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023be:	2300      	movs	r3, #0
 80023c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023c2:	f107 0314 	add.w	r3, r7, #20
 80023c6:	4619      	mov	r1, r3
 80023c8:	4834      	ldr	r0, [pc, #208]	@ (800249c <MX_GPIO_Init+0x1b8>)
 80023ca:	f000 fe35 	bl	8003038 <HAL_GPIO_Init>

  /*Configure GPIO pins : sensor3_Pin sensor4_Pin sensor1_Pin */
  GPIO_InitStruct.Pin = sensor3_Pin|sensor4_Pin|sensor1_Pin;
 80023ce:	f240 430c 	movw	r3, #1036	@ 0x40c
 80023d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80023d4:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80023d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023de:	f107 0314 	add.w	r3, r7, #20
 80023e2:	4619      	mov	r1, r3
 80023e4:	482d      	ldr	r0, [pc, #180]	@ (800249c <MX_GPIO_Init+0x1b8>)
 80023e6:	f000 fe27 	bl	8003038 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LCD_D7_Pin
                           LCD_D0_Pin LCD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 80023ea:	f240 7313 	movw	r3, #1811	@ 0x713
 80023ee:	617b      	str	r3, [r7, #20]
                          |LCD_D0_Pin|LCD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f0:	2301      	movs	r3, #1
 80023f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f8:	2300      	movs	r3, #0
 80023fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fc:	f107 0314 	add.w	r3, r7, #20
 8002400:	4619      	mov	r1, r3
 8002402:	4827      	ldr	r0, [pc, #156]	@ (80024a0 <MX_GPIO_Init+0x1bc>)
 8002404:	f000 fe18 	bl	8003038 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_D6_Pin LCD_D3_Pin LCD_D5_Pin
                           LCD_D4_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 8002408:	f240 4339 	movw	r3, #1081	@ 0x439
 800240c:	617b      	str	r3, [r7, #20]
                          |LCD_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800240e:	2301      	movs	r3, #1
 8002410:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002416:	2300      	movs	r3, #0
 8002418:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241a:	f107 0314 	add.w	r3, r7, #20
 800241e:	4619      	mov	r1, r3
 8002420:	4820      	ldr	r0, [pc, #128]	@ (80024a4 <MX_GPIO_Init+0x1c0>)
 8002422:	f000 fe09 	bl	8003038 <HAL_GPIO_Init>

  /*Configure GPIO pin : sensor2_Pin */
  GPIO_InitStruct.Pin = sensor2_Pin;
 8002426:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800242a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800242c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002430:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(sensor2_GPIO_Port, &GPIO_InitStruct);
 8002436:	f107 0314 	add.w	r3, r7, #20
 800243a:	4619      	mov	r1, r3
 800243c:	4818      	ldr	r0, [pc, #96]	@ (80024a0 <MX_GPIO_Init+0x1bc>)
 800243e:	f000 fdfb 	bl	8003038 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_SS_Pin */
  GPIO_InitStruct.Pin = SD_SS_Pin;
 8002442:	2340      	movs	r3, #64	@ 0x40
 8002444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002446:	2301      	movs	r3, #1
 8002448:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800244e:	2301      	movs	r3, #1
 8002450:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_SS_GPIO_Port, &GPIO_InitStruct);
 8002452:	f107 0314 	add.w	r3, r7, #20
 8002456:	4619      	mov	r1, r3
 8002458:	4812      	ldr	r0, [pc, #72]	@ (80024a4 <MX_GPIO_Init+0x1c0>)
 800245a:	f000 fded 	bl	8003038 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800245e:	2200      	movs	r2, #0
 8002460:	2100      	movs	r1, #0
 8002462:	2008      	movs	r0, #8
 8002464:	f000 fd05 	bl	8002e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002468:	2008      	movs	r0, #8
 800246a:	f000 fd1e 	bl	8002eaa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800246e:	2200      	movs	r2, #0
 8002470:	2100      	movs	r1, #0
 8002472:	2009      	movs	r0, #9
 8002474:	f000 fcfd 	bl	8002e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002478:	2009      	movs	r0, #9
 800247a:	f000 fd16 	bl	8002eaa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800247e:	2200      	movs	r2, #0
 8002480:	2100      	movs	r1, #0
 8002482:	2028      	movs	r0, #40	@ 0x28
 8002484:	f000 fcf5 	bl	8002e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002488:	2028      	movs	r0, #40	@ 0x28
 800248a:	f000 fd0e 	bl	8002eaa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800248e:	bf00      	nop
 8002490:	3728      	adds	r7, #40	@ 0x28
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40023800 	.word	0x40023800
 800249c:	40020800 	.word	0x40020800
 80024a0:	40020000 	.word	0x40020000
 80024a4:	40020400 	.word	0x40020400

080024a8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == sensor1_Pin && start == 1){
 80024b2:	88fb      	ldrh	r3, [r7, #6]
 80024b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024b8:	d118      	bne.n	80024ec <HAL_GPIO_EXTI_Callback+0x44>
 80024ba:	4b38      	ldr	r3, [pc, #224]	@ (800259c <HAL_GPIO_EXTI_Callback+0xf4>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d114      	bne.n	80024ec <HAL_GPIO_EXTI_Callback+0x44>
		GPIO_PinState currentState1 = HAL_GPIO_ReadPin(sensor1_GPIO_Port, sensor1_Pin);
 80024c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80024c6:	4836      	ldr	r0, [pc, #216]	@ (80025a0 <HAL_GPIO_EXTI_Callback+0xf8>)
 80024c8:	f000 ff4a 	bl	8003360 <HAL_GPIO_ReadPin>
 80024cc:	4603      	mov	r3, r0
 80024ce:	73fb      	strb	r3, [r7, #15]
		switch (currentState1) {
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d005      	beq.n	80024e2 <HAL_GPIO_EXTI_Callback+0x3a>
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d107      	bne.n	80024ea <HAL_GPIO_EXTI_Callback+0x42>
			case GPIO_PIN_SET: key[0] = 2; break;
 80024da:	4b32      	ldr	r3, [pc, #200]	@ (80025a4 <HAL_GPIO_EXTI_Callback+0xfc>)
 80024dc:	2202      	movs	r2, #2
 80024de:	701a      	strb	r2, [r3, #0]
 80024e0:	e004      	b.n	80024ec <HAL_GPIO_EXTI_Callback+0x44>
			case GPIO_PIN_RESET: key[0] = 1; break;
 80024e2:	4b30      	ldr	r3, [pc, #192]	@ (80025a4 <HAL_GPIO_EXTI_Callback+0xfc>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	701a      	strb	r2, [r3, #0]
 80024e8:	e000      	b.n	80024ec <HAL_GPIO_EXTI_Callback+0x44>
			default: break;
 80024ea:	bf00      	nop
		}
	}

	if(GPIO_Pin == sensor2_Pin && start == 1){
 80024ec:	88fb      	ldrh	r3, [r7, #6]
 80024ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024f2:	d118      	bne.n	8002526 <HAL_GPIO_EXTI_Callback+0x7e>
 80024f4:	4b29      	ldr	r3, [pc, #164]	@ (800259c <HAL_GPIO_EXTI_Callback+0xf4>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d114      	bne.n	8002526 <HAL_GPIO_EXTI_Callback+0x7e>
		GPIO_PinState currentState2 = HAL_GPIO_ReadPin(sensor2_GPIO_Port, sensor2_Pin);
 80024fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002500:	4829      	ldr	r0, [pc, #164]	@ (80025a8 <HAL_GPIO_EXTI_Callback+0x100>)
 8002502:	f000 ff2d 	bl	8003360 <HAL_GPIO_ReadPin>
 8002506:	4603      	mov	r3, r0
 8002508:	73bb      	strb	r3, [r7, #14]
		switch (currentState2) {
 800250a:	7bbb      	ldrb	r3, [r7, #14]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_GPIO_EXTI_Callback+0x74>
 8002510:	2b01      	cmp	r3, #1
 8002512:	d107      	bne.n	8002524 <HAL_GPIO_EXTI_Callback+0x7c>
			case GPIO_PIN_SET: key[1] = 2; break;
 8002514:	4b23      	ldr	r3, [pc, #140]	@ (80025a4 <HAL_GPIO_EXTI_Callback+0xfc>)
 8002516:	2202      	movs	r2, #2
 8002518:	705a      	strb	r2, [r3, #1]
 800251a:	e004      	b.n	8002526 <HAL_GPIO_EXTI_Callback+0x7e>
			case GPIO_PIN_RESET: key[1] = 1; break;
 800251c:	4b21      	ldr	r3, [pc, #132]	@ (80025a4 <HAL_GPIO_EXTI_Callback+0xfc>)
 800251e:	2201      	movs	r2, #1
 8002520:	705a      	strb	r2, [r3, #1]
 8002522:	e000      	b.n	8002526 <HAL_GPIO_EXTI_Callback+0x7e>
			default: break;
 8002524:	bf00      	nop
		}
	}

	if(GPIO_Pin == sensor3_Pin && start == 1){
 8002526:	88fb      	ldrh	r3, [r7, #6]
 8002528:	2b04      	cmp	r3, #4
 800252a:	d117      	bne.n	800255c <HAL_GPIO_EXTI_Callback+0xb4>
 800252c:	4b1b      	ldr	r3, [pc, #108]	@ (800259c <HAL_GPIO_EXTI_Callback+0xf4>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d113      	bne.n	800255c <HAL_GPIO_EXTI_Callback+0xb4>
		GPIO_PinState currentState3 = HAL_GPIO_ReadPin(sensor3_GPIO_Port, sensor3_Pin);
 8002534:	2104      	movs	r1, #4
 8002536:	481a      	ldr	r0, [pc, #104]	@ (80025a0 <HAL_GPIO_EXTI_Callback+0xf8>)
 8002538:	f000 ff12 	bl	8003360 <HAL_GPIO_ReadPin>
 800253c:	4603      	mov	r3, r0
 800253e:	737b      	strb	r3, [r7, #13]
		switch (currentState3) {
 8002540:	7b7b      	ldrb	r3, [r7, #13]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d005      	beq.n	8002552 <HAL_GPIO_EXTI_Callback+0xaa>
 8002546:	2b01      	cmp	r3, #1
 8002548:	d107      	bne.n	800255a <HAL_GPIO_EXTI_Callback+0xb2>
			case GPIO_PIN_SET: key[2] = 2; break;
 800254a:	4b16      	ldr	r3, [pc, #88]	@ (80025a4 <HAL_GPIO_EXTI_Callback+0xfc>)
 800254c:	2202      	movs	r2, #2
 800254e:	709a      	strb	r2, [r3, #2]
 8002550:	e004      	b.n	800255c <HAL_GPIO_EXTI_Callback+0xb4>
			case GPIO_PIN_RESET: key[2] = 1; break;
 8002552:	4b14      	ldr	r3, [pc, #80]	@ (80025a4 <HAL_GPIO_EXTI_Callback+0xfc>)
 8002554:	2201      	movs	r2, #1
 8002556:	709a      	strb	r2, [r3, #2]
 8002558:	e000      	b.n	800255c <HAL_GPIO_EXTI_Callback+0xb4>
			default: break;
 800255a:	bf00      	nop
		}
	}

	if(GPIO_Pin == sensor4_Pin && start == 1){
 800255c:	88fb      	ldrh	r3, [r7, #6]
 800255e:	2b08      	cmp	r3, #8
 8002560:	d117      	bne.n	8002592 <HAL_GPIO_EXTI_Callback+0xea>
 8002562:	4b0e      	ldr	r3, [pc, #56]	@ (800259c <HAL_GPIO_EXTI_Callback+0xf4>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d113      	bne.n	8002592 <HAL_GPIO_EXTI_Callback+0xea>
		GPIO_PinState currentState4 = HAL_GPIO_ReadPin(sensor4_GPIO_Port, sensor4_Pin);
 800256a:	2108      	movs	r1, #8
 800256c:	480c      	ldr	r0, [pc, #48]	@ (80025a0 <HAL_GPIO_EXTI_Callback+0xf8>)
 800256e:	f000 fef7 	bl	8003360 <HAL_GPIO_ReadPin>
 8002572:	4603      	mov	r3, r0
 8002574:	733b      	strb	r3, [r7, #12]
		switch (currentState4) {
 8002576:	7b3b      	ldrb	r3, [r7, #12]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d005      	beq.n	8002588 <HAL_GPIO_EXTI_Callback+0xe0>
 800257c:	2b01      	cmp	r3, #1
 800257e:	d107      	bne.n	8002590 <HAL_GPIO_EXTI_Callback+0xe8>
			case GPIO_PIN_SET: key[3] = 2; break;
 8002580:	4b08      	ldr	r3, [pc, #32]	@ (80025a4 <HAL_GPIO_EXTI_Callback+0xfc>)
 8002582:	2202      	movs	r2, #2
 8002584:	70da      	strb	r2, [r3, #3]
 8002586:	e004      	b.n	8002592 <HAL_GPIO_EXTI_Callback+0xea>
			case GPIO_PIN_RESET: key[3] = 1; break;
 8002588:	4b06      	ldr	r3, [pc, #24]	@ (80025a4 <HAL_GPIO_EXTI_Callback+0xfc>)
 800258a:	2201      	movs	r2, #1
 800258c:	70da      	strb	r2, [r3, #3]
 800258e:	e000      	b.n	8002592 <HAL_GPIO_EXTI_Callback+0xea>
			default: break;
 8002590:	bf00      	nop
		}
	}
}
 8002592:	bf00      	nop
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	2000121d 	.word	0x2000121d
 80025a0:	40020800 	.word	0x40020800
 80025a4:	20001220 	.word	0x20001220
 80025a8:	40020000 	.word	0x40020000

080025ac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]

	for(int i = 0; i < 4; i++){
 80025b4:	2300      	movs	r3, #0
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	e037      	b.n	800262a <HAL_UART_RxCpltCallback+0x7e>
		currentStateI2C[i] = buffer[0] & (1 << i) ? 1:0;
 80025ba:	4b22      	ldr	r3, [pc, #136]	@ (8002644 <HAL_UART_RxCpltCallback+0x98>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	461a      	mov	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	fa42 f303 	asr.w	r3, r2, r3
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	b2d9      	uxtb	r1, r3
 80025ce:	4a1e      	ldr	r2, [pc, #120]	@ (8002648 <HAL_UART_RxCpltCallback+0x9c>)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4413      	add	r3, r2
 80025d4:	460a      	mov	r2, r1
 80025d6:	701a      	strb	r2, [r3, #0]
		if(previousStateI2C[i] == currentStateI2C[i]) key[i + 4] = 0;		// verifying bits
 80025d8:	4a1c      	ldr	r2, [pc, #112]	@ (800264c <HAL_UART_RxCpltCallback+0xa0>)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	4413      	add	r3, r2
 80025de:	781a      	ldrb	r2, [r3, #0]
 80025e0:	4919      	ldr	r1, [pc, #100]	@ (8002648 <HAL_UART_RxCpltCallback+0x9c>)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	440b      	add	r3, r1
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d105      	bne.n	80025f8 <HAL_UART_RxCpltCallback+0x4c>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	3304      	adds	r3, #4
 80025f0:	4a17      	ldr	r2, [pc, #92]	@ (8002650 <HAL_UART_RxCpltCallback+0xa4>)
 80025f2:	2100      	movs	r1, #0
 80025f4:	54d1      	strb	r1, [r2, r3]
 80025f6:	e015      	b.n	8002624 <HAL_UART_RxCpltCallback+0x78>
		else{																// bit's changed
			previousStateI2C[i] = currentStateI2C[i];						// load new value
 80025f8:	4a13      	ldr	r2, [pc, #76]	@ (8002648 <HAL_UART_RxCpltCallback+0x9c>)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	4413      	add	r3, r2
 80025fe:	7819      	ldrb	r1, [r3, #0]
 8002600:	4a12      	ldr	r2, [pc, #72]	@ (800264c <HAL_UART_RxCpltCallback+0xa0>)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4413      	add	r3, r2
 8002606:	460a      	mov	r2, r1
 8002608:	701a      	strb	r2, [r3, #0]
			key[i + 4] = currentStateI2C[i] == 1 ? 1:2;						// key assignment
 800260a:	4a0f      	ldr	r2, [pc, #60]	@ (8002648 <HAL_UART_RxCpltCallback+0x9c>)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4413      	add	r3, r2
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d101      	bne.n	800261a <HAL_UART_RxCpltCallback+0x6e>
 8002616:	2101      	movs	r1, #1
 8002618:	e000      	b.n	800261c <HAL_UART_RxCpltCallback+0x70>
 800261a:	2102      	movs	r1, #2
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	3304      	adds	r3, #4
 8002620:	4a0b      	ldr	r2, [pc, #44]	@ (8002650 <HAL_UART_RxCpltCallback+0xa4>)
 8002622:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < 4; i++){
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	3301      	adds	r3, #1
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2b03      	cmp	r3, #3
 800262e:	ddc4      	ble.n	80025ba <HAL_UART_RxCpltCallback+0xe>
		}
	}

	HAL_UART_Receive_IT(&huart2, buffer, 1);
 8002630:	2201      	movs	r2, #1
 8002632:	4904      	ldr	r1, [pc, #16]	@ (8002644 <HAL_UART_RxCpltCallback+0x98>)
 8002634:	4807      	ldr	r0, [pc, #28]	@ (8002654 <HAL_UART_RxCpltCallback+0xa8>)
 8002636:	f004 f8ab 	bl	8006790 <HAL_UART_Receive_IT>

}
 800263a:	bf00      	nop
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	2000121c 	.word	0x2000121c
 8002648:	2000122c 	.word	0x2000122c
 800264c:	20001228 	.word	0x20001228
 8002650:	20001220 	.word	0x20001220
 8002654:	200012e8 	.word	0x200012e8

08002658 <HAL_I2C_ListenCpltCallback>:



/* I2C Callbacks */
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c){													//At the end of the firts data analysis
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
	TxData[0] = (spaces &= 0x0F);
 8002660:	4b2a      	ldr	r3, [pc, #168]	@ (800270c <HAL_I2C_ListenCpltCallback+0xb4>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	f003 030f 	and.w	r3, r3, #15
 8002668:	b2da      	uxtb	r2, r3
 800266a:	4b28      	ldr	r3, [pc, #160]	@ (800270c <HAL_I2C_ListenCpltCallback+0xb4>)
 800266c:	701a      	strb	r2, [r3, #0]
 800266e:	4b27      	ldr	r3, [pc, #156]	@ (800270c <HAL_I2C_ListenCpltCallback+0xb4>)
 8002670:	781a      	ldrb	r2, [r3, #0]
 8002672:	4b27      	ldr	r3, [pc, #156]	@ (8002710 <HAL_I2C_ListenCpltCallback+0xb8>)
 8002674:	701a      	strb	r2, [r3, #0]
	buffer[0] = RxData[0];
 8002676:	4b27      	ldr	r3, [pc, #156]	@ (8002714 <HAL_I2C_ListenCpltCallback+0xbc>)
 8002678:	781a      	ldrb	r2, [r3, #0]
 800267a:	4b27      	ldr	r3, [pc, #156]	@ (8002718 <HAL_I2C_ListenCpltCallback+0xc0>)
 800267c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 4; i++){
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	e038      	b.n	80026f6 <HAL_I2C_ListenCpltCallback+0x9e>
		currentStateI2C[i] = buffer[0] & (1 << (i+4)) ? 1:0;
 8002684:	4b24      	ldr	r3, [pc, #144]	@ (8002718 <HAL_I2C_ListenCpltCallback+0xc0>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	461a      	mov	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	3304      	adds	r3, #4
 800268e:	fa42 f303 	asr.w	r3, r2, r3
 8002692:	b2db      	uxtb	r3, r3
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	b2d9      	uxtb	r1, r3
 800269a:	4a20      	ldr	r2, [pc, #128]	@ (800271c <HAL_I2C_ListenCpltCallback+0xc4>)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4413      	add	r3, r2
 80026a0:	460a      	mov	r2, r1
 80026a2:	701a      	strb	r2, [r3, #0]
		if(previousStateI2C[i] == currentStateI2C[i]) key[i + 4] = 0;		// verifying bits
 80026a4:	4a1e      	ldr	r2, [pc, #120]	@ (8002720 <HAL_I2C_ListenCpltCallback+0xc8>)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	4413      	add	r3, r2
 80026aa:	781a      	ldrb	r2, [r3, #0]
 80026ac:	491b      	ldr	r1, [pc, #108]	@ (800271c <HAL_I2C_ListenCpltCallback+0xc4>)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	440b      	add	r3, r1
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d105      	bne.n	80026c4 <HAL_I2C_ListenCpltCallback+0x6c>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	3304      	adds	r3, #4
 80026bc:	4a19      	ldr	r2, [pc, #100]	@ (8002724 <HAL_I2C_ListenCpltCallback+0xcc>)
 80026be:	2100      	movs	r1, #0
 80026c0:	54d1      	strb	r1, [r2, r3]
 80026c2:	e015      	b.n	80026f0 <HAL_I2C_ListenCpltCallback+0x98>
		else{																// bit's changed
			previousStateI2C[i] = currentStateI2C[i];						// load new value
 80026c4:	4a15      	ldr	r2, [pc, #84]	@ (800271c <HAL_I2C_ListenCpltCallback+0xc4>)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4413      	add	r3, r2
 80026ca:	7819      	ldrb	r1, [r3, #0]
 80026cc:	4a14      	ldr	r2, [pc, #80]	@ (8002720 <HAL_I2C_ListenCpltCallback+0xc8>)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	4413      	add	r3, r2
 80026d2:	460a      	mov	r2, r1
 80026d4:	701a      	strb	r2, [r3, #0]
			key[i + 4] = currentStateI2C[i] == 1 ? 1:2;						// key assignment
 80026d6:	4a11      	ldr	r2, [pc, #68]	@ (800271c <HAL_I2C_ListenCpltCallback+0xc4>)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4413      	add	r3, r2
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d101      	bne.n	80026e6 <HAL_I2C_ListenCpltCallback+0x8e>
 80026e2:	2101      	movs	r1, #1
 80026e4:	e000      	b.n	80026e8 <HAL_I2C_ListenCpltCallback+0x90>
 80026e6:	2102      	movs	r1, #2
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	3304      	adds	r3, #4
 80026ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002724 <HAL_I2C_ListenCpltCallback+0xcc>)
 80026ee:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < 4; i++){
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	3301      	adds	r3, #1
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2b03      	cmp	r3, #3
 80026fa:	ddc3      	ble.n	8002684 <HAL_I2C_ListenCpltCallback+0x2c>
		}
	}
	HAL_I2C_EnableListen_IT(hi2c);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f001 f8b8 	bl	8003872 <HAL_I2C_EnableListen_IT>
}
 8002702:	bf00      	nop
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	20001230 	.word	0x20001230
 8002710:	20001238 	.word	0x20001238
 8002714:	20001234 	.word	0x20001234
 8002718:	2000121c 	.word	0x2000121c
 800271c:	2000122c 	.word	0x2000122c
 8002720:	20001228 	.word	0x20001228
 8002724:	20001220 	.word	0x20001220

08002728 <HAL_I2C_SlaveTxCpltCallback>:
void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *I2cHandle){												//Tx Transfer completed callback -> End Transmission
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <HAL_I2C_SlaveRxCpltCallback>:
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHandle){												//Rx Transfer completed callback -> End Receiving
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart2, RxData, 4, 1000);
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <HAL_I2C_AddrCallback>:
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)		// Slave Address Match Callback
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	460b      	mov	r3, r1
 800275a:	70fb      	strb	r3, [r7, #3]
 800275c:	4613      	mov	r3, r2
 800275e:	803b      	strh	r3, [r7, #0]
	if (TransferDirection == I2C_DIRECTION_TRANSMIT)  // if the master wants to transmit the data
 8002760:	78fb      	ldrb	r3, [r7, #3]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d10b      	bne.n	800277e <HAL_I2C_AddrCallback+0x2e>
	{
		if (HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, (uint8_t *) RxData, RxSIZE, I2C_FIRST_AND_LAST_FRAME) != HAL_OK){
 8002766:	2308      	movs	r3, #8
 8002768:	2201      	movs	r2, #1
 800276a:	490e      	ldr	r1, [pc, #56]	@ (80027a4 <HAL_I2C_AddrCallback+0x54>)
 800276c:	480e      	ldr	r0, [pc, #56]	@ (80027a8 <HAL_I2C_AddrCallback+0x58>)
 800276e:	f001 f80d 	bl	800378c <HAL_I2C_Slave_Seq_Receive_IT>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d010      	beq.n	800279a <HAL_I2C_AddrCallback+0x4a>
			Error_Handler();
 8002778:	f000 f82a 	bl	80027d0 <Error_Handler>
	else if (TransferDirection == I2C_DIRECTION_RECEIVE){
		if (HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, (uint8_t *) TxData, TxSIZE, I2C_FIRST_AND_LAST_FRAME) != HAL_OK){
			Error_Handler();
		}
	}
}
 800277c:	e00d      	b.n	800279a <HAL_I2C_AddrCallback+0x4a>
	else if (TransferDirection == I2C_DIRECTION_RECEIVE){
 800277e:	78fb      	ldrb	r3, [r7, #3]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10a      	bne.n	800279a <HAL_I2C_AddrCallback+0x4a>
		if (HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, (uint8_t *) TxData, TxSIZE, I2C_FIRST_AND_LAST_FRAME) != HAL_OK){
 8002784:	2308      	movs	r3, #8
 8002786:	2201      	movs	r2, #1
 8002788:	4908      	ldr	r1, [pc, #32]	@ (80027ac <HAL_I2C_AddrCallback+0x5c>)
 800278a:	4807      	ldr	r0, [pc, #28]	@ (80027a8 <HAL_I2C_AddrCallback+0x58>)
 800278c:	f000 ff8b 	bl	80036a6 <HAL_I2C_Slave_Seq_Transmit_IT>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <HAL_I2C_AddrCallback+0x4a>
			Error_Handler();
 8002796:	f000 f81b 	bl	80027d0 <Error_Handler>
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20001234 	.word	0x20001234
 80027a8:	2000123c 	.word	0x2000123c
 80027ac:	20001238 	.word	0x20001238

080027b0 <HAL_I2C_ErrorCallback>:
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)													// I2C Communication Error callback
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
	if(HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF){
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f001 fada 	bl	8003d72 <HAL_I2C_GetError>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d001      	beq.n	80027c8 <HAL_I2C_ErrorCallback+0x18>
		Error_Handler();
 80027c4:	f000 f804 	bl	80027d0 <Error_Handler>
	}
}
 80027c8:	bf00      	nop
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027d4:	b672      	cpsid	i
}
 80027d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027d8:	bf00      	nop
 80027da:	e7fd      	b.n	80027d8 <Error_Handler+0x8>

080027dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	607b      	str	r3, [r7, #4]
 80027e6:	4b10      	ldr	r3, [pc, #64]	@ (8002828 <HAL_MspInit+0x4c>)
 80027e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ea:	4a0f      	ldr	r2, [pc, #60]	@ (8002828 <HAL_MspInit+0x4c>)
 80027ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80027f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002828 <HAL_MspInit+0x4c>)
 80027f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027fa:	607b      	str	r3, [r7, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	603b      	str	r3, [r7, #0]
 8002802:	4b09      	ldr	r3, [pc, #36]	@ (8002828 <HAL_MspInit+0x4c>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002806:	4a08      	ldr	r2, [pc, #32]	@ (8002828 <HAL_MspInit+0x4c>)
 8002808:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800280c:	6413      	str	r3, [r2, #64]	@ 0x40
 800280e:	4b06      	ldr	r3, [pc, #24]	@ (8002828 <HAL_MspInit+0x4c>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002816:	603b      	str	r3, [r7, #0]
 8002818:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800281a:	2007      	movs	r0, #7
 800281c:	f000 fb1e 	bl	8002e5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002820:	bf00      	nop
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40023800 	.word	0x40023800

0800282c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08a      	sub	sp, #40	@ 0x28
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002834:	f107 0314 	add.w	r3, r7, #20
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	60da      	str	r2, [r3, #12]
 8002842:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a21      	ldr	r2, [pc, #132]	@ (80028d0 <HAL_I2C_MspInit+0xa4>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d13c      	bne.n	80028c8 <HAL_I2C_MspInit+0x9c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	4b20      	ldr	r3, [pc, #128]	@ (80028d4 <HAL_I2C_MspInit+0xa8>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002856:	4a1f      	ldr	r2, [pc, #124]	@ (80028d4 <HAL_I2C_MspInit+0xa8>)
 8002858:	f043 0302 	orr.w	r3, r3, #2
 800285c:	6313      	str	r3, [r2, #48]	@ 0x30
 800285e:	4b1d      	ldr	r3, [pc, #116]	@ (80028d4 <HAL_I2C_MspInit+0xa8>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800286a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800286e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002870:	2312      	movs	r3, #18
 8002872:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002878:	2303      	movs	r3, #3
 800287a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800287c:	2304      	movs	r3, #4
 800287e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002880:	f107 0314 	add.w	r3, r7, #20
 8002884:	4619      	mov	r1, r3
 8002886:	4814      	ldr	r0, [pc, #80]	@ (80028d8 <HAL_I2C_MspInit+0xac>)
 8002888:	f000 fbd6 	bl	8003038 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800288c:	2300      	movs	r3, #0
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	4b10      	ldr	r3, [pc, #64]	@ (80028d4 <HAL_I2C_MspInit+0xa8>)
 8002892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002894:	4a0f      	ldr	r2, [pc, #60]	@ (80028d4 <HAL_I2C_MspInit+0xa8>)
 8002896:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800289a:	6413      	str	r3, [r2, #64]	@ 0x40
 800289c:	4b0d      	ldr	r3, [pc, #52]	@ (80028d4 <HAL_I2C_MspInit+0xa8>)
 800289e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80028a8:	2200      	movs	r2, #0
 80028aa:	2100      	movs	r1, #0
 80028ac:	201f      	movs	r0, #31
 80028ae:	f000 fae0 	bl	8002e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80028b2:	201f      	movs	r0, #31
 80028b4:	f000 faf9 	bl	8002eaa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80028b8:	2200      	movs	r2, #0
 80028ba:	2100      	movs	r1, #0
 80028bc:	2020      	movs	r0, #32
 80028be:	f000 fad8 	bl	8002e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80028c2:	2020      	movs	r0, #32
 80028c4:	f000 faf1 	bl	8002eaa <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80028c8:	bf00      	nop
 80028ca:	3728      	adds	r7, #40	@ 0x28
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40005400 	.word	0x40005400
 80028d4:	40023800 	.word	0x40023800
 80028d8:	40020400 	.word	0x40020400

080028dc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08a      	sub	sp, #40	@ 0x28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e4:	f107 0314 	add.w	r3, r7, #20
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	609a      	str	r2, [r3, #8]
 80028f0:	60da      	str	r2, [r3, #12]
 80028f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a19      	ldr	r2, [pc, #100]	@ (8002960 <HAL_SPI_MspInit+0x84>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d12b      	bne.n	8002956 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	4b18      	ldr	r3, [pc, #96]	@ (8002964 <HAL_SPI_MspInit+0x88>)
 8002904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002906:	4a17      	ldr	r2, [pc, #92]	@ (8002964 <HAL_SPI_MspInit+0x88>)
 8002908:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800290c:	6453      	str	r3, [r2, #68]	@ 0x44
 800290e:	4b15      	ldr	r3, [pc, #84]	@ (8002964 <HAL_SPI_MspInit+0x88>)
 8002910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002912:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002916:	613b      	str	r3, [r7, #16]
 8002918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	4b11      	ldr	r3, [pc, #68]	@ (8002964 <HAL_SPI_MspInit+0x88>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002922:	4a10      	ldr	r2, [pc, #64]	@ (8002964 <HAL_SPI_MspInit+0x88>)
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	6313      	str	r3, [r2, #48]	@ 0x30
 800292a:	4b0e      	ldr	r3, [pc, #56]	@ (8002964 <HAL_SPI_MspInit+0x88>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002936:	23e0      	movs	r3, #224	@ 0xe0
 8002938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293a:	2302      	movs	r3, #2
 800293c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293e:	2300      	movs	r3, #0
 8002940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002942:	2303      	movs	r3, #3
 8002944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002946:	2305      	movs	r3, #5
 8002948:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800294a:	f107 0314 	add.w	r3, r7, #20
 800294e:	4619      	mov	r1, r3
 8002950:	4805      	ldr	r0, [pc, #20]	@ (8002968 <HAL_SPI_MspInit+0x8c>)
 8002952:	f000 fb71 	bl	8003038 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002956:	bf00      	nop
 8002958:	3728      	adds	r7, #40	@ 0x28
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40013000 	.word	0x40013000
 8002964:	40023800 	.word	0x40023800
 8002968:	40020000 	.word	0x40020000

0800296c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08a      	sub	sp, #40	@ 0x28
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002974:	f107 0314 	add.w	r3, r7, #20
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	605a      	str	r2, [r3, #4]
 800297e:	609a      	str	r2, [r3, #8]
 8002980:	60da      	str	r2, [r3, #12]
 8002982:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a1d      	ldr	r2, [pc, #116]	@ (8002a00 <HAL_UART_MspInit+0x94>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d133      	bne.n	80029f6 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	613b      	str	r3, [r7, #16]
 8002992:	4b1c      	ldr	r3, [pc, #112]	@ (8002a04 <HAL_UART_MspInit+0x98>)
 8002994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002996:	4a1b      	ldr	r2, [pc, #108]	@ (8002a04 <HAL_UART_MspInit+0x98>)
 8002998:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800299c:	6413      	str	r3, [r2, #64]	@ 0x40
 800299e:	4b19      	ldr	r3, [pc, #100]	@ (8002a04 <HAL_UART_MspInit+0x98>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a6:	613b      	str	r3, [r7, #16]
 80029a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	4b15      	ldr	r3, [pc, #84]	@ (8002a04 <HAL_UART_MspInit+0x98>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b2:	4a14      	ldr	r2, [pc, #80]	@ (8002a04 <HAL_UART_MspInit+0x98>)
 80029b4:	f043 0301 	orr.w	r3, r3, #1
 80029b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ba:	4b12      	ldr	r3, [pc, #72]	@ (8002a04 <HAL_UART_MspInit+0x98>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80029c6:	230c      	movs	r3, #12
 80029c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ca:	2302      	movs	r3, #2
 80029cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ce:	2300      	movs	r3, #0
 80029d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d2:	2303      	movs	r3, #3
 80029d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029d6:	2307      	movs	r3, #7
 80029d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029da:	f107 0314 	add.w	r3, r7, #20
 80029de:	4619      	mov	r1, r3
 80029e0:	4809      	ldr	r0, [pc, #36]	@ (8002a08 <HAL_UART_MspInit+0x9c>)
 80029e2:	f000 fb29 	bl	8003038 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80029e6:	2200      	movs	r2, #0
 80029e8:	2100      	movs	r1, #0
 80029ea:	2026      	movs	r0, #38	@ 0x26
 80029ec:	f000 fa41 	bl	8002e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029f0:	2026      	movs	r0, #38	@ 0x26
 80029f2:	f000 fa5a 	bl	8002eaa <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80029f6:	bf00      	nop
 80029f8:	3728      	adds	r7, #40	@ 0x28
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40004400 	.word	0x40004400
 8002a04:	40023800 	.word	0x40023800
 8002a08:	40020000 	.word	0x40020000

08002a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a10:	bf00      	nop
 8002a12:	e7fd      	b.n	8002a10 <NMI_Handler+0x4>

08002a14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a18:	bf00      	nop
 8002a1a:	e7fd      	b.n	8002a18 <HardFault_Handler+0x4>

08002a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a20:	bf00      	nop
 8002a22:	e7fd      	b.n	8002a20 <MemManage_Handler+0x4>

08002a24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a28:	bf00      	nop
 8002a2a:	e7fd      	b.n	8002a28 <BusFault_Handler+0x4>

08002a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a30:	bf00      	nop
 8002a32:	e7fd      	b.n	8002a30 <UsageFault_Handler+0x4>

08002a34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a38:	bf00      	nop
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a42:	b480      	push	{r7}
 8002a44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a46:	bf00      	nop
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a54:	bf00      	nop
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
	...

08002a60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0) Timer1--;
 8002a64:	4b0c      	ldr	r3, [pc, #48]	@ (8002a98 <SysTick_Handler+0x38>)
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d005      	beq.n	8002a78 <SysTick_Handler+0x18>
 8002a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a98 <SysTick_Handler+0x38>)
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	3b01      	subs	r3, #1
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	4b08      	ldr	r3, [pc, #32]	@ (8002a98 <SysTick_Handler+0x38>)
 8002a76:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0) Timer2--;
 8002a78:	4b08      	ldr	r3, [pc, #32]	@ (8002a9c <SysTick_Handler+0x3c>)
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d005      	beq.n	8002a8c <SysTick_Handler+0x2c>
 8002a80:	4b06      	ldr	r3, [pc, #24]	@ (8002a9c <SysTick_Handler+0x3c>)
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	3b01      	subs	r3, #1
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	4b04      	ldr	r3, [pc, #16]	@ (8002a9c <SysTick_Handler+0x3c>)
 8002a8a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a8c:	f000 f8d2 	bl	8002c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8002a90:	f000 fa25 	bl	8002ede <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002a94:	bf00      	nop
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	200001d8 	.word	0x200001d8
 8002a9c:	200001da 	.word	0x200001da

08002aa0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sensor3_Pin);
 8002aa4:	2004      	movs	r0, #4
 8002aa6:	f000 fc8d 	bl	80033c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002aaa:	bf00      	nop
 8002aac:	bd80      	pop	{r7, pc}

08002aae <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sensor4_Pin);
 8002ab2:	2008      	movs	r0, #8
 8002ab4:	f000 fc86 	bl	80033c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002ab8:	bf00      	nop
 8002aba:	bd80      	pop	{r7, pc}

08002abc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002ac0:	4802      	ldr	r0, [pc, #8]	@ (8002acc <I2C1_EV_IRQHandler+0x10>)
 8002ac2:	f000 ff0c 	bl	80038de <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	2000123c 	.word	0x2000123c

08002ad0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002ad4:	4802      	ldr	r0, [pc, #8]	@ (8002ae0 <I2C1_ER_IRQHandler+0x10>)
 8002ad6:	f001 f873 	bl	8003bc0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002ada:	bf00      	nop
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	2000123c 	.word	0x2000123c

08002ae4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002ae8:	4802      	ldr	r0, [pc, #8]	@ (8002af4 <USART2_IRQHandler+0x10>)
 8002aea:	f003 fe77 	bl	80067dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002aee:	bf00      	nop
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	200012e8 	.word	0x200012e8

08002af8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sensor1_Pin);
 8002afc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002b00:	f000 fc60 	bl	80033c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002b04:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002b08:	f000 fc5c 	bl	80033c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(sensor2_Pin);
 8002b0c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002b10:	f000 fc58 	bl	80033c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002b14:	bf00      	nop
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <SystemInit>:
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	4b06      	ldr	r3, [pc, #24]	@ (8002b38 <SystemInit+0x20>)
 8002b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b22:	4a05      	ldr	r2, [pc, #20]	@ (8002b38 <SystemInit+0x20>)
 8002b24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8002b2c:	bf00      	nop
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	e000ed00 	.word	0xe000ed00

08002b3c <Reset_Handler>:
 8002b3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b74 <LoopFillZerobss+0xe>
 8002b40:	f7ff ffea 	bl	8002b18 <SystemInit>
 8002b44:	480c      	ldr	r0, [pc, #48]	@ (8002b78 <LoopFillZerobss+0x12>)
 8002b46:	490d      	ldr	r1, [pc, #52]	@ (8002b7c <LoopFillZerobss+0x16>)
 8002b48:	4a0d      	ldr	r2, [pc, #52]	@ (8002b80 <LoopFillZerobss+0x1a>)
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	e002      	b.n	8002b54 <LoopCopyDataInit>

08002b4e <CopyDataInit>:
 8002b4e:	58d4      	ldr	r4, [r2, r3]
 8002b50:	50c4      	str	r4, [r0, r3]
 8002b52:	3304      	adds	r3, #4

08002b54 <LoopCopyDataInit>:
 8002b54:	18c4      	adds	r4, r0, r3
 8002b56:	428c      	cmp	r4, r1
 8002b58:	d3f9      	bcc.n	8002b4e <CopyDataInit>
 8002b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b84 <LoopFillZerobss+0x1e>)
 8002b5c:	4c0a      	ldr	r4, [pc, #40]	@ (8002b88 <LoopFillZerobss+0x22>)
 8002b5e:	2300      	movs	r3, #0
 8002b60:	e001      	b.n	8002b66 <LoopFillZerobss>

08002b62 <FillZerobss>:
 8002b62:	6013      	str	r3, [r2, #0]
 8002b64:	3204      	adds	r2, #4

08002b66 <LoopFillZerobss>:
 8002b66:	42a2      	cmp	r2, r4
 8002b68:	d3fb      	bcc.n	8002b62 <FillZerobss>
 8002b6a:	f007 fcd3 	bl	800a514 <__libc_init_array>
 8002b6e:	f7fe fe31 	bl	80017d4 <main>
 8002b72:	4770      	bx	lr
 8002b74:	20020000 	.word	0x20020000
 8002b78:	20000000 	.word	0x20000000
 8002b7c:	200001bc 	.word	0x200001bc
 8002b80:	0800bc54 	.word	0x0800bc54
 8002b84:	200001bc 	.word	0x200001bc
 8002b88:	20001570 	.word	0x20001570

08002b8c <ADC_IRQHandler>:
 8002b8c:	e7fe      	b.n	8002b8c <ADC_IRQHandler>
	...

08002b90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b94:	4b0e      	ldr	r3, [pc, #56]	@ (8002bd0 <HAL_Init+0x40>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a0d      	ldr	r2, [pc, #52]	@ (8002bd0 <HAL_Init+0x40>)
 8002b9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd0 <HAL_Init+0x40>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd0 <HAL_Init+0x40>)
 8002ba6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002baa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bac:	4b08      	ldr	r3, [pc, #32]	@ (8002bd0 <HAL_Init+0x40>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a07      	ldr	r2, [pc, #28]	@ (8002bd0 <HAL_Init+0x40>)
 8002bb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bb8:	2003      	movs	r0, #3
 8002bba:	f000 f94f 	bl	8002e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	f000 f808 	bl	8002bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bc4:	f7ff fe0a 	bl	80027dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40023c00 	.word	0x40023c00

08002bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bdc:	4b12      	ldr	r3, [pc, #72]	@ (8002c28 <HAL_InitTick+0x54>)
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	4b12      	ldr	r3, [pc, #72]	@ (8002c2c <HAL_InitTick+0x58>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	4619      	mov	r1, r3
 8002be6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 f967 	bl	8002ec6 <HAL_SYSTICK_Config>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e00e      	b.n	8002c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b0f      	cmp	r3, #15
 8002c06:	d80a      	bhi.n	8002c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c08:	2200      	movs	r2, #0
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c10:	f000 f92f 	bl	8002e72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c14:	4a06      	ldr	r2, [pc, #24]	@ (8002c30 <HAL_InitTick+0x5c>)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	e000      	b.n	8002c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	2000019c 	.word	0x2000019c
 8002c2c:	200001a4 	.word	0x200001a4
 8002c30:	200001a0 	.word	0x200001a0

08002c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c38:	4b06      	ldr	r3, [pc, #24]	@ (8002c54 <HAL_IncTick+0x20>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	4b06      	ldr	r3, [pc, #24]	@ (8002c58 <HAL_IncTick+0x24>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4413      	add	r3, r2
 8002c44:	4a04      	ldr	r2, [pc, #16]	@ (8002c58 <HAL_IncTick+0x24>)
 8002c46:	6013      	str	r3, [r2, #0]
}
 8002c48:	bf00      	nop
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	200001a4 	.word	0x200001a4
 8002c58:	20001330 	.word	0x20001330

08002c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c60:	4b03      	ldr	r3, [pc, #12]	@ (8002c70 <HAL_GetTick+0x14>)
 8002c62:	681b      	ldr	r3, [r3, #0]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	20001330 	.word	0x20001330

08002c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c7c:	f7ff ffee 	bl	8002c5c <HAL_GetTick>
 8002c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8c:	d005      	beq.n	8002c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb8 <HAL_Delay+0x44>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	461a      	mov	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4413      	add	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c9a:	bf00      	nop
 8002c9c:	f7ff ffde 	bl	8002c5c <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d8f7      	bhi.n	8002c9c <HAL_Delay+0x28>
  {
  }
}
 8002cac:	bf00      	nop
 8002cae:	bf00      	nop
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	200001a4 	.word	0x200001a4

08002cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8002d00 <__NVIC_SetPriorityGrouping+0x44>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cd8:	4013      	ands	r3, r2
 8002cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ce4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ce8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cee:	4a04      	ldr	r2, [pc, #16]	@ (8002d00 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	60d3      	str	r3, [r2, #12]
}
 8002cf4:	bf00      	nop
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	e000ed00 	.word	0xe000ed00

08002d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d08:	4b04      	ldr	r3, [pc, #16]	@ (8002d1c <__NVIC_GetPriorityGrouping+0x18>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	0a1b      	lsrs	r3, r3, #8
 8002d0e:	f003 0307 	and.w	r3, r3, #7
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	4603      	mov	r3, r0
 8002d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	db0b      	blt.n	8002d4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	f003 021f 	and.w	r2, r3, #31
 8002d38:	4907      	ldr	r1, [pc, #28]	@ (8002d58 <__NVIC_EnableIRQ+0x38>)
 8002d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	2001      	movs	r0, #1
 8002d42:	fa00 f202 	lsl.w	r2, r0, r2
 8002d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	e000e100 	.word	0xe000e100

08002d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	6039      	str	r1, [r7, #0]
 8002d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	db0a      	blt.n	8002d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	490c      	ldr	r1, [pc, #48]	@ (8002da8 <__NVIC_SetPriority+0x4c>)
 8002d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7a:	0112      	lsls	r2, r2, #4
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	440b      	add	r3, r1
 8002d80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d84:	e00a      	b.n	8002d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	4908      	ldr	r1, [pc, #32]	@ (8002dac <__NVIC_SetPriority+0x50>)
 8002d8c:	79fb      	ldrb	r3, [r7, #7]
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	3b04      	subs	r3, #4
 8002d94:	0112      	lsls	r2, r2, #4
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	440b      	add	r3, r1
 8002d9a:	761a      	strb	r2, [r3, #24]
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000e100 	.word	0xe000e100
 8002dac:	e000ed00 	.word	0xe000ed00

08002db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b089      	sub	sp, #36	@ 0x24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	f1c3 0307 	rsb	r3, r3, #7
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	bf28      	it	cs
 8002dce:	2304      	movcs	r3, #4
 8002dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	2b06      	cmp	r3, #6
 8002dd8:	d902      	bls.n	8002de0 <NVIC_EncodePriority+0x30>
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3b03      	subs	r3, #3
 8002dde:	e000      	b.n	8002de2 <NVIC_EncodePriority+0x32>
 8002de0:	2300      	movs	r3, #0
 8002de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de4:	f04f 32ff 	mov.w	r2, #4294967295
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43da      	mvns	r2, r3
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	401a      	ands	r2, r3
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002df8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002e02:	43d9      	mvns	r1, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e08:	4313      	orrs	r3, r2
         );
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3724      	adds	r7, #36	@ 0x24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
	...

08002e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e28:	d301      	bcc.n	8002e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e00f      	b.n	8002e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e58 <SysTick_Config+0x40>)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e36:	210f      	movs	r1, #15
 8002e38:	f04f 30ff 	mov.w	r0, #4294967295
 8002e3c:	f7ff ff8e 	bl	8002d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e40:	4b05      	ldr	r3, [pc, #20]	@ (8002e58 <SysTick_Config+0x40>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e46:	4b04      	ldr	r3, [pc, #16]	@ (8002e58 <SysTick_Config+0x40>)
 8002e48:	2207      	movs	r2, #7
 8002e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	e000e010 	.word	0xe000e010

08002e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7ff ff29 	bl	8002cbc <__NVIC_SetPriorityGrouping>
}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b086      	sub	sp, #24
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	4603      	mov	r3, r0
 8002e7a:	60b9      	str	r1, [r7, #8]
 8002e7c:	607a      	str	r2, [r7, #4]
 8002e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e84:	f7ff ff3e 	bl	8002d04 <__NVIC_GetPriorityGrouping>
 8002e88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	68b9      	ldr	r1, [r7, #8]
 8002e8e:	6978      	ldr	r0, [r7, #20]
 8002e90:	f7ff ff8e 	bl	8002db0 <NVIC_EncodePriority>
 8002e94:	4602      	mov	r2, r0
 8002e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e9a:	4611      	mov	r1, r2
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff ff5d 	bl	8002d5c <__NVIC_SetPriority>
}
 8002ea2:	bf00      	nop
 8002ea4:	3718      	adds	r7, #24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b082      	sub	sp, #8
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff ff31 	bl	8002d20 <__NVIC_EnableIRQ>
}
 8002ebe:	bf00      	nop
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7ff ffa2 	bl	8002e18 <SysTick_Config>
 8002ed4:	4603      	mov	r3, r0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002ee2:	f000 f802 	bl	8002eea <HAL_SYSTICK_Callback>
}
 8002ee6:	bf00      	nop
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002eea:	b480      	push	{r7}
 8002eec:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002eee:	bf00      	nop
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f04:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f06:	f7ff fea9 	bl	8002c5c <HAL_GetTick>
 8002f0a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d008      	beq.n	8002f2a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2280      	movs	r2, #128	@ 0x80
 8002f1c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e052      	b.n	8002fd0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0216 	bic.w	r2, r2, #22
 8002f38:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695a      	ldr	r2, [r3, #20]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f48:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d103      	bne.n	8002f5a <HAL_DMA_Abort+0x62>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d007      	beq.n	8002f6a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0208 	bic.w	r2, r2, #8
 8002f68:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0201 	bic.w	r2, r2, #1
 8002f78:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f7a:	e013      	b.n	8002fa4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f7c:	f7ff fe6e 	bl	8002c5c <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b05      	cmp	r3, #5
 8002f88:	d90c      	bls.n	8002fa4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2203      	movs	r2, #3
 8002f94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e015      	b.n	8002fd0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1e4      	bne.n	8002f7c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb6:	223f      	movs	r2, #63	@ 0x3f
 8002fb8:	409a      	lsls	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d004      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2280      	movs	r2, #128	@ 0x80
 8002ff0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e00c      	b.n	8003010 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2205      	movs	r2, #5
 8002ffa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0201 	bic.w	r2, r2, #1
 800300c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800302a:	b2db      	uxtb	r3, r3
}
 800302c:	4618      	mov	r0, r3
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_GPIO_Init>:
 8003038:	b480      	push	{r7}
 800303a:	b089      	sub	sp, #36	@ 0x24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
 8003042:	2300      	movs	r3, #0
 8003044:	617b      	str	r3, [r7, #20]
 8003046:	2300      	movs	r3, #0
 8003048:	613b      	str	r3, [r7, #16]
 800304a:	2300      	movs	r3, #0
 800304c:	61bb      	str	r3, [r7, #24]
 800304e:	2300      	movs	r3, #0
 8003050:	61fb      	str	r3, [r7, #28]
 8003052:	e165      	b.n	8003320 <HAL_GPIO_Init+0x2e8>
 8003054:	2201      	movs	r2, #1
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	4013      	ands	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	429a      	cmp	r2, r3
 800306e:	f040 8154 	bne.w	800331a <HAL_GPIO_Init+0x2e2>
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	2b01      	cmp	r3, #1
 800307c:	d005      	beq.n	800308a <HAL_GPIO_Init+0x52>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d130      	bne.n	80030ec <HAL_GPIO_Init+0xb4>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	61bb      	str	r3, [r7, #24]
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	2203      	movs	r2, #3
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	43db      	mvns	r3, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4013      	ands	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	609a      	str	r2, [r3, #8]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	61bb      	str	r3, [r7, #24]
 80030c0:	2201      	movs	r2, #1
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4013      	ands	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	091b      	lsrs	r3, r3, #4
 80030d6:	f003 0201 	and.w	r2, r3, #1
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	605a      	str	r2, [r3, #4]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 0303 	and.w	r3, r3, #3
 80030f4:	2b03      	cmp	r3, #3
 80030f6:	d017      	beq.n	8003128 <HAL_GPIO_Init+0xf0>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	61bb      	str	r3, [r7, #24]
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	2203      	movs	r2, #3
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	43db      	mvns	r3, r3
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4013      	ands	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4313      	orrs	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	60da      	str	r2, [r3, #12]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f003 0303 	and.w	r3, r3, #3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d123      	bne.n	800317c <HAL_GPIO_Init+0x144>
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	08da      	lsrs	r2, r3, #3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3208      	adds	r2, #8
 800313c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003140:	61bb      	str	r3, [r7, #24]
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	220f      	movs	r2, #15
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	43db      	mvns	r3, r3
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	4013      	ands	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4313      	orrs	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	08da      	lsrs	r2, r3, #3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	3208      	adds	r2, #8
 8003176:	69b9      	ldr	r1, [r7, #24]
 8003178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	61bb      	str	r3, [r7, #24]
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	2203      	movs	r2, #3
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	43db      	mvns	r3, r3
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4013      	ands	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f003 0203 	and.w	r2, r3, #3
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 80ae 	beq.w	800331a <HAL_GPIO_Init+0x2e2>
 80031be:	2300      	movs	r3, #0
 80031c0:	60fb      	str	r3, [r7, #12]
 80031c2:	4b5d      	ldr	r3, [pc, #372]	@ (8003338 <HAL_GPIO_Init+0x300>)
 80031c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c6:	4a5c      	ldr	r2, [pc, #368]	@ (8003338 <HAL_GPIO_Init+0x300>)
 80031c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80031ce:	4b5a      	ldr	r3, [pc, #360]	@ (8003338 <HAL_GPIO_Init+0x300>)
 80031d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4a58      	ldr	r2, [pc, #352]	@ (800333c <HAL_GPIO_Init+0x304>)
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	089b      	lsrs	r3, r3, #2
 80031e0:	3302      	adds	r3, #2
 80031e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e6:	61bb      	str	r3, [r7, #24]
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f003 0303 	and.w	r3, r3, #3
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	220f      	movs	r2, #15
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43db      	mvns	r3, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4013      	ands	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a4f      	ldr	r2, [pc, #316]	@ (8003340 <HAL_GPIO_Init+0x308>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d025      	beq.n	8003252 <HAL_GPIO_Init+0x21a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a4e      	ldr	r2, [pc, #312]	@ (8003344 <HAL_GPIO_Init+0x30c>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d01f      	beq.n	800324e <HAL_GPIO_Init+0x216>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a4d      	ldr	r2, [pc, #308]	@ (8003348 <HAL_GPIO_Init+0x310>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d019      	beq.n	800324a <HAL_GPIO_Init+0x212>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a4c      	ldr	r2, [pc, #304]	@ (800334c <HAL_GPIO_Init+0x314>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d013      	beq.n	8003246 <HAL_GPIO_Init+0x20e>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a4b      	ldr	r2, [pc, #300]	@ (8003350 <HAL_GPIO_Init+0x318>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d00d      	beq.n	8003242 <HAL_GPIO_Init+0x20a>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a4a      	ldr	r2, [pc, #296]	@ (8003354 <HAL_GPIO_Init+0x31c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d007      	beq.n	800323e <HAL_GPIO_Init+0x206>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a49      	ldr	r2, [pc, #292]	@ (8003358 <HAL_GPIO_Init+0x320>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d101      	bne.n	800323a <HAL_GPIO_Init+0x202>
 8003236:	2306      	movs	r3, #6
 8003238:	e00c      	b.n	8003254 <HAL_GPIO_Init+0x21c>
 800323a:	2307      	movs	r3, #7
 800323c:	e00a      	b.n	8003254 <HAL_GPIO_Init+0x21c>
 800323e:	2305      	movs	r3, #5
 8003240:	e008      	b.n	8003254 <HAL_GPIO_Init+0x21c>
 8003242:	2304      	movs	r3, #4
 8003244:	e006      	b.n	8003254 <HAL_GPIO_Init+0x21c>
 8003246:	2303      	movs	r3, #3
 8003248:	e004      	b.n	8003254 <HAL_GPIO_Init+0x21c>
 800324a:	2302      	movs	r3, #2
 800324c:	e002      	b.n	8003254 <HAL_GPIO_Init+0x21c>
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <HAL_GPIO_Init+0x21c>
 8003252:	2300      	movs	r3, #0
 8003254:	69fa      	ldr	r2, [r7, #28]
 8003256:	f002 0203 	and.w	r2, r2, #3
 800325a:	0092      	lsls	r2, r2, #2
 800325c:	4093      	lsls	r3, r2
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4313      	orrs	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
 8003264:	4935      	ldr	r1, [pc, #212]	@ (800333c <HAL_GPIO_Init+0x304>)
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	089b      	lsrs	r3, r3, #2
 800326a:	3302      	adds	r3, #2
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003272:	4b3a      	ldr	r3, [pc, #232]	@ (800335c <HAL_GPIO_Init+0x324>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	61bb      	str	r3, [r7, #24]
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	43db      	mvns	r3, r3
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	4013      	ands	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_GPIO_Init+0x25e>
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	4313      	orrs	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
 8003296:	4a31      	ldr	r2, [pc, #196]	@ (800335c <HAL_GPIO_Init+0x324>)
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	6093      	str	r3, [r2, #8]
 800329c:	4b2f      	ldr	r3, [pc, #188]	@ (800335c <HAL_GPIO_Init+0x324>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	61bb      	str	r3, [r7, #24]
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	43db      	mvns	r3, r3
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	4013      	ands	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d003      	beq.n	80032c0 <HAL_GPIO_Init+0x288>
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	4313      	orrs	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
 80032c0:	4a26      	ldr	r2, [pc, #152]	@ (800335c <HAL_GPIO_Init+0x324>)
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	60d3      	str	r3, [r2, #12]
 80032c6:	4b25      	ldr	r3, [pc, #148]	@ (800335c <HAL_GPIO_Init+0x324>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	61bb      	str	r3, [r7, #24]
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	43db      	mvns	r3, r3
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	4013      	ands	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_GPIO_Init+0x2b2>
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
 80032ea:	4a1c      	ldr	r2, [pc, #112]	@ (800335c <HAL_GPIO_Init+0x324>)
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	6053      	str	r3, [r2, #4]
 80032f0:	4b1a      	ldr	r3, [pc, #104]	@ (800335c <HAL_GPIO_Init+0x324>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	61bb      	str	r3, [r7, #24]
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	43db      	mvns	r3, r3
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4013      	ands	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d003      	beq.n	8003314 <HAL_GPIO_Init+0x2dc>
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	4313      	orrs	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
 8003314:	4a11      	ldr	r2, [pc, #68]	@ (800335c <HAL_GPIO_Init+0x324>)
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	3301      	adds	r3, #1
 800331e:	61fb      	str	r3, [r7, #28]
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	2b0f      	cmp	r3, #15
 8003324:	f67f ae96 	bls.w	8003054 <HAL_GPIO_Init+0x1c>
 8003328:	bf00      	nop
 800332a:	bf00      	nop
 800332c:	3724      	adds	r7, #36	@ 0x24
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	40023800 	.word	0x40023800
 800333c:	40013800 	.word	0x40013800
 8003340:	40020000 	.word	0x40020000
 8003344:	40020400 	.word	0x40020400
 8003348:	40020800 	.word	0x40020800
 800334c:	40020c00 	.word	0x40020c00
 8003350:	40021000 	.word	0x40021000
 8003354:	40021400 	.word	0x40021400
 8003358:	40021800 	.word	0x40021800
 800335c:	40013c00 	.word	0x40013c00

08003360 <HAL_GPIO_ReadPin>:
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	460b      	mov	r3, r1
 800336a:	807b      	strh	r3, [r7, #2]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	887b      	ldrh	r3, [r7, #2]
 8003372:	4013      	ands	r3, r2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d002      	beq.n	800337e <HAL_GPIO_ReadPin+0x1e>
 8003378:	2301      	movs	r3, #1
 800337a:	73fb      	strb	r3, [r7, #15]
 800337c:	e001      	b.n	8003382 <HAL_GPIO_ReadPin+0x22>
 800337e:	2300      	movs	r3, #0
 8003380:	73fb      	strb	r3, [r7, #15]
 8003382:	7bfb      	ldrb	r3, [r7, #15]
 8003384:	4618      	mov	r0, r3
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_GPIO_WritePin>:
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	807b      	strh	r3, [r7, #2]
 800339c:	4613      	mov	r3, r2
 800339e:	707b      	strb	r3, [r7, #1]
 80033a0:	787b      	ldrb	r3, [r7, #1]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_GPIO_WritePin+0x1e>
 80033a6:	887a      	ldrh	r2, [r7, #2]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	619a      	str	r2, [r3, #24]
 80033ac:	e003      	b.n	80033b6 <HAL_GPIO_WritePin+0x26>
 80033ae:	887b      	ldrh	r3, [r7, #2]
 80033b0:	041a      	lsls	r2, r3, #16
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	619a      	str	r2, [r3, #24]
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
	...

080033c4 <HAL_GPIO_EXTI_IRQHandler>:
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	80fb      	strh	r3, [r7, #6]
 80033ce:	4b08      	ldr	r3, [pc, #32]	@ (80033f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033d0:	695a      	ldr	r2, [r3, #20]
 80033d2:	88fb      	ldrh	r3, [r7, #6]
 80033d4:	4013      	ands	r3, r2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d006      	beq.n	80033e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
 80033da:	4a05      	ldr	r2, [pc, #20]	@ (80033f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033dc:	88fb      	ldrh	r3, [r7, #6]
 80033de:	6153      	str	r3, [r2, #20]
 80033e0:	88fb      	ldrh	r3, [r7, #6]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff f860 	bl	80024a8 <HAL_GPIO_EXTI_Callback>
 80033e8:	bf00      	nop
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40013c00 	.word	0x40013c00

080033f4 <HAL_I2C_Init>:
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_I2C_Init+0x12>
 8003402:	2301      	movs	r3, #1
 8003404:	e12b      	b.n	800365e <HAL_I2C_Init+0x26a>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d106      	bne.n	8003420 <HAL_I2C_Init+0x2c>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7ff fa06 	bl	800282c <HAL_I2C_MspInit>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2224      	movs	r2, #36	@ 0x24
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0201 	bic.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	f002 f802 	bl	8005460 <HAL_RCC_GetPCLK1Freq>
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	4a81      	ldr	r2, [pc, #516]	@ (8003668 <HAL_I2C_Init+0x274>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d807      	bhi.n	8003478 <HAL_I2C_Init+0x84>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4a80      	ldr	r2, [pc, #512]	@ (800366c <HAL_I2C_Init+0x278>)
 800346c:	4293      	cmp	r3, r2
 800346e:	bf94      	ite	ls
 8003470:	2301      	movls	r3, #1
 8003472:	2300      	movhi	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	e006      	b.n	8003486 <HAL_I2C_Init+0x92>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4a7d      	ldr	r2, [pc, #500]	@ (8003670 <HAL_I2C_Init+0x27c>)
 800347c:	4293      	cmp	r3, r2
 800347e:	bf94      	ite	ls
 8003480:	2301      	movls	r3, #1
 8003482:	2300      	movhi	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_I2C_Init+0x9a>
 800348a:	2301      	movs	r3, #1
 800348c:	e0e7      	b.n	800365e <HAL_I2C_Init+0x26a>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	4a78      	ldr	r2, [pc, #480]	@ (8003674 <HAL_I2C_Init+0x280>)
 8003492:	fba2 2303 	umull	r2, r3, r2, r3
 8003496:	0c9b      	lsrs	r3, r3, #18
 8003498:	60bb      	str	r3, [r7, #8]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	605a      	str	r2, [r3, #4]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	4a6a      	ldr	r2, [pc, #424]	@ (8003668 <HAL_I2C_Init+0x274>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d802      	bhi.n	80034c8 <HAL_I2C_Init+0xd4>
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	3301      	adds	r3, #1
 80034c6:	e009      	b.n	80034dc <HAL_I2C_Init+0xe8>
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80034ce:	fb02 f303 	mul.w	r3, r2, r3
 80034d2:	4a69      	ldr	r2, [pc, #420]	@ (8003678 <HAL_I2C_Init+0x284>)
 80034d4:	fba2 2303 	umull	r2, r3, r2, r3
 80034d8:	099b      	lsrs	r3, r3, #6
 80034da:	3301      	adds	r3, #1
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	6812      	ldr	r2, [r2, #0]
 80034e0:	430b      	orrs	r3, r1
 80034e2:	6213      	str	r3, [r2, #32]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80034ee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	495c      	ldr	r1, [pc, #368]	@ (8003668 <HAL_I2C_Init+0x274>)
 80034f8:	428b      	cmp	r3, r1
 80034fa:	d819      	bhi.n	8003530 <HAL_I2C_Init+0x13c>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	1e59      	subs	r1, r3, #1
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	fbb1 f3f3 	udiv	r3, r1, r3
 800350a:	1c59      	adds	r1, r3, #1
 800350c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003510:	400b      	ands	r3, r1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00a      	beq.n	800352c <HAL_I2C_Init+0x138>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	1e59      	subs	r1, r3, #1
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	fbb1 f3f3 	udiv	r3, r1, r3
 8003524:	3301      	adds	r3, #1
 8003526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800352a:	e051      	b.n	80035d0 <HAL_I2C_Init+0x1dc>
 800352c:	2304      	movs	r3, #4
 800352e:	e04f      	b.n	80035d0 <HAL_I2C_Init+0x1dc>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d111      	bne.n	800355c <HAL_I2C_Init+0x168>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	1e58      	subs	r0, r3, #1
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6859      	ldr	r1, [r3, #4]
 8003540:	460b      	mov	r3, r1
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	440b      	add	r3, r1
 8003546:	fbb0 f3f3 	udiv	r3, r0, r3
 800354a:	3301      	adds	r3, #1
 800354c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003550:	2b00      	cmp	r3, #0
 8003552:	bf0c      	ite	eq
 8003554:	2301      	moveq	r3, #1
 8003556:	2300      	movne	r3, #0
 8003558:	b2db      	uxtb	r3, r3
 800355a:	e012      	b.n	8003582 <HAL_I2C_Init+0x18e>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	1e58      	subs	r0, r3, #1
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6859      	ldr	r1, [r3, #4]
 8003564:	460b      	mov	r3, r1
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	0099      	lsls	r1, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003572:	3301      	adds	r3, #1
 8003574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003578:	2b00      	cmp	r3, #0
 800357a:	bf0c      	ite	eq
 800357c:	2301      	moveq	r3, #1
 800357e:	2300      	movne	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <HAL_I2C_Init+0x196>
 8003586:	2301      	movs	r3, #1
 8003588:	e022      	b.n	80035d0 <HAL_I2C_Init+0x1dc>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10e      	bne.n	80035b0 <HAL_I2C_Init+0x1bc>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	1e58      	subs	r0, r3, #1
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6859      	ldr	r1, [r3, #4]
 800359a:	460b      	mov	r3, r1
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	440b      	add	r3, r1
 80035a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80035a4:	3301      	adds	r3, #1
 80035a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035ae:	e00f      	b.n	80035d0 <HAL_I2C_Init+0x1dc>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	1e58      	subs	r0, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6859      	ldr	r1, [r3, #4]
 80035b8:	460b      	mov	r3, r1
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	0099      	lsls	r1, r3, #2
 80035c0:	440b      	add	r3, r1
 80035c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035c6:	3301      	adds	r3, #1
 80035c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	6809      	ldr	r1, [r1, #0]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	61cb      	str	r3, [r1, #28]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69da      	ldr	r2, [r3, #28]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80035fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	6911      	ldr	r1, [r2, #16]
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	68d2      	ldr	r2, [r2, #12]
 800360a:	4311      	orrs	r1, r2
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6812      	ldr	r2, [r2, #0]
 8003610:	430b      	orrs	r3, r1
 8003612:	6093      	str	r3, [r2, #8]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	695a      	ldr	r2, [r3, #20]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	431a      	orrs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	60da      	str	r2, [r3, #12]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0201 	orr.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	641a      	str	r2, [r3, #64]	@ 0x40
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	631a      	str	r2, [r3, #48]	@ 0x30
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800365c:	2300      	movs	r3, #0
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	000186a0 	.word	0x000186a0
 800366c:	001e847f 	.word	0x001e847f
 8003670:	003d08ff 	.word	0x003d08ff
 8003674:	431bde83 	.word	0x431bde83
 8003678:	10624dd3 	.word	0x10624dd3

0800367c <I2C_Flush_DR>:
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800368e:	2b80      	cmp	r3, #128	@ 0x80
 8003690:	d103      	bne.n	800369a <I2C_Flush_DR+0x1e>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2200      	movs	r2, #0
 8003698:	611a      	str	r2, [r3, #16]
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <HAL_I2C_Slave_Seq_Transmit_IT>:
 80036a6:	b480      	push	{r7}
 80036a8:	b087      	sub	sp, #28
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	60f8      	str	r0, [r7, #12]
 80036ae:	60b9      	str	r1, [r7, #8]
 80036b0:	603b      	str	r3, [r7, #0]
 80036b2:	4613      	mov	r3, r2
 80036b4:	80fb      	strh	r3, [r7, #6]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80036c2:	2b28      	cmp	r3, #40	@ 0x28
 80036c4:	d15b      	bne.n	800377e <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d002      	beq.n	80036d2 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 80036cc:	88fb      	ldrh	r3, [r7, #6]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
 80036d2:	2301      	movs	r3, #1
 80036d4:	e054      	b.n	8003780 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d101      	bne.n	80036e4 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 80036e0:	2302      	movs	r3, #2
 80036e2:	e04d      	b.n	8003780 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d007      	beq.n	800370a <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f042 0201 	orr.w	r2, r2, #1
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2229      	movs	r2, #41	@ 0x29
 800371e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2220      	movs	r2, #32
 8003726:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	625a      	str	r2, [r3, #36]	@ 0x24
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	88fa      	ldrh	r2, [r7, #6]
 800373a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003740:	b29a      	uxth	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800374c:	2300      	movs	r3, #0
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	617b      	str	r3, [r7, #20]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	617b      	str	r3, [r7, #20]
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8003778:	605a      	str	r2, [r3, #4]
 800377a:	2300      	movs	r3, #0
 800377c:	e000      	b.n	8003780 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 800377e:	2302      	movs	r3, #2
 8003780:	4618      	mov	r0, r3
 8003782:	371c      	adds	r7, #28
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_I2C_Slave_Seq_Receive_IT>:
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	603b      	str	r3, [r7, #0]
 8003798:	4613      	mov	r3, r2
 800379a:	80fb      	strh	r3, [r7, #6]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80037a8:	2b28      	cmp	r3, #40	@ 0x28
 80037aa:	d15b      	bne.n	8003864 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d002      	beq.n	80037b8 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 80037b2:	88fb      	ldrh	r3, [r7, #6]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <HAL_I2C_Slave_Seq_Receive_IT+0x30>
 80037b8:	2301      	movs	r3, #1
 80037ba:	e054      	b.n	8003866 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d101      	bne.n	80037ca <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 80037c6:	2302      	movs	r3, #2
 80037c8:	e04d      	b.n	8003866 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d007      	beq.n	80037f0 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0201 	orr.w	r2, r2, #1
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	222a      	movs	r2, #42	@ 0x2a
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2220      	movs	r2, #32
 800380c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	641a      	str	r2, [r3, #64]	@ 0x40
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	625a      	str	r2, [r3, #36]	@ 0x24
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	88fa      	ldrh	r2, [r7, #6]
 8003820:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003826:	b29a      	uxth	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003832:	2300      	movs	r3, #0
 8003834:	617b      	str	r3, [r7, #20]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	617b      	str	r3, [r7, #20]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	617b      	str	r3, [r7, #20]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800385e:	605a      	str	r2, [r3, #4]
 8003860:	2300      	movs	r3, #0
 8003862:	e000      	b.n	8003866 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8003864:	2302      	movs	r3, #2
 8003866:	4618      	mov	r0, r3
 8003868:	371c      	adds	r7, #28
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <HAL_I2C_EnableListen_IT>:
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b20      	cmp	r3, #32
 8003884:	d124      	bne.n	80038d0 <HAL_I2C_EnableListen_IT+0x5e>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2228      	movs	r2, #40	@ 0x28
 800388a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b01      	cmp	r3, #1
 800389a:	d007      	beq.n	80038ac <HAL_I2C_EnableListen_IT+0x3a>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0201 	orr.w	r2, r2, #1
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80038ca:	605a      	str	r2, [r3, #4]
 80038cc:	2300      	movs	r3, #0
 80038ce:	e000      	b.n	80038d2 <HAL_I2C_EnableListen_IT+0x60>
 80038d0:	2302      	movs	r3, #2
 80038d2:	4618      	mov	r0, r3
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <HAL_I2C_EV_IRQHandler>:
 80038de:	b580      	push	{r7, lr}
 80038e0:	b088      	sub	sp, #32
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
 80038e6:	2300      	movs	r3, #0
 80038e8:	61bb      	str	r3, [r7, #24]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	617b      	str	r3, [r7, #20]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f6:	613b      	str	r3, [r7, #16]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038fe:	73fb      	strb	r3, [r7, #15]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003906:	73bb      	strb	r3, [r7, #14]
 8003908:	7bfb      	ldrb	r3, [r7, #15]
 800390a:	2b10      	cmp	r3, #16
 800390c:	d003      	beq.n	8003916 <HAL_I2C_EV_IRQHandler+0x38>
 800390e:	7bfb      	ldrb	r3, [r7, #15]
 8003910:	2b40      	cmp	r3, #64	@ 0x40
 8003912:	f040 80c1 	bne.w	8003a98 <HAL_I2C_EV_IRQHandler+0x1ba>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	61bb      	str	r3, [r7, #24]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	61fb      	str	r3, [r7, #28]
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10d      	bne.n	800394c <HAL_I2C_EV_IRQHandler+0x6e>
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003936:	d003      	beq.n	8003940 <HAL_I2C_EV_IRQHandler+0x62>
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800393e:	d101      	bne.n	8003944 <HAL_I2C_EV_IRQHandler+0x66>
 8003940:	2301      	movs	r3, #1
 8003942:	e000      	b.n	8003946 <HAL_I2C_EV_IRQHandler+0x68>
 8003944:	2300      	movs	r3, #0
 8003946:	2b01      	cmp	r3, #1
 8003948:	f000 8132 	beq.w	8003bb0 <HAL_I2C_EV_IRQHandler+0x2d2>
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00c      	beq.n	8003970 <HAL_I2C_EV_IRQHandler+0x92>
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	0a5b      	lsrs	r3, r3, #9
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d006      	beq.n	8003970 <HAL_I2C_EV_IRQHandler+0x92>
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f001 fc6e 	bl	8005244 <I2C_ConvertOtherXferOptions>
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 fd71 	bl	8004450 <I2C_Master_SB>
 800396e:	e092      	b.n	8003a96 <HAL_I2C_EV_IRQHandler+0x1b8>
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	08db      	lsrs	r3, r3, #3
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b00      	cmp	r3, #0
 800397a:	d009      	beq.n	8003990 <HAL_I2C_EV_IRQHandler+0xb2>
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	0a5b      	lsrs	r3, r3, #9
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <HAL_I2C_EV_IRQHandler+0xb2>
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 fde7 	bl	800455c <I2C_Master_ADD10>
 800398e:	e082      	b.n	8003a96 <HAL_I2C_EV_IRQHandler+0x1b8>
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	085b      	lsrs	r3, r3, #1
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b00      	cmp	r3, #0
 800399a:	d009      	beq.n	80039b0 <HAL_I2C_EV_IRQHandler+0xd2>
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	0a5b      	lsrs	r3, r3, #9
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_I2C_EV_IRQHandler+0xd2>
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 fe01 	bl	80045b0 <I2C_Master_ADDR>
 80039ae:	e072      	b.n	8003a96 <HAL_I2C_EV_IRQHandler+0x1b8>
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	089b      	lsrs	r3, r3, #2
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d03b      	beq.n	8003a34 <HAL_I2C_EV_IRQHandler+0x156>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039ca:	f000 80f3 	beq.w	8003bb4 <HAL_I2C_EV_IRQHandler+0x2d6>
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	09db      	lsrs	r3, r3, #7
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00f      	beq.n	80039fa <HAL_I2C_EV_IRQHandler+0x11c>
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	0a9b      	lsrs	r3, r3, #10
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d009      	beq.n	80039fa <HAL_I2C_EV_IRQHandler+0x11c>
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	089b      	lsrs	r3, r3, #2
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d103      	bne.n	80039fa <HAL_I2C_EV_IRQHandler+0x11c>
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f9c9 	bl	8003d8a <I2C_MasterTransmit_TXE>
 80039f8:	e04d      	b.n	8003a96 <HAL_I2C_EV_IRQHandler+0x1b8>
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	089b      	lsrs	r3, r3, #2
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 80d6 	beq.w	8003bb4 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	0a5b      	lsrs	r3, r3, #9
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 80cf 	beq.w	8003bb4 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003a16:	7bbb      	ldrb	r3, [r7, #14]
 8003a18:	2b21      	cmp	r3, #33	@ 0x21
 8003a1a:	d103      	bne.n	8003a24 <HAL_I2C_EV_IRQHandler+0x146>
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 fa50 	bl	8003ec2 <I2C_MasterTransmit_BTF>
 8003a22:	e0c7      	b.n	8003bb4 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
 8003a26:	2b40      	cmp	r3, #64	@ 0x40
 8003a28:	f040 80c4 	bne.w	8003bb4 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 fabe 	bl	8003fae <I2C_MemoryTransmit_TXE_BTF>
 8003a32:	e0bf      	b.n	8003bb4 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a42:	f000 80b7 	beq.w	8003bb4 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	099b      	lsrs	r3, r3, #6
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00f      	beq.n	8003a72 <HAL_I2C_EV_IRQHandler+0x194>
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	0a9b      	lsrs	r3, r3, #10
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d009      	beq.n	8003a72 <HAL_I2C_EV_IRQHandler+0x194>
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	089b      	lsrs	r3, r3, #2
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d103      	bne.n	8003a72 <HAL_I2C_EV_IRQHandler+0x194>
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 fb37 	bl	80040de <I2C_MasterReceive_RXNE>
 8003a70:	e011      	b.n	8003a96 <HAL_I2C_EV_IRQHandler+0x1b8>
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	089b      	lsrs	r3, r3, #2
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 809a 	beq.w	8003bb4 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	0a5b      	lsrs	r3, r3, #9
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 8093 	beq.w	8003bb4 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 fbed 	bl	800426e <I2C_MasterReceive_BTF>
 8003a94:	e08e      	b.n	8003bb4 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003a96:	e08d      	b.n	8003bb4 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d004      	beq.n	8003aaa <HAL_I2C_EV_IRQHandler+0x1cc>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	61fb      	str	r3, [r7, #28]
 8003aa8:	e007      	b.n	8003aba <HAL_I2C_EV_IRQHandler+0x1dc>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	61bb      	str	r3, [r7, #24]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	61fb      	str	r3, [r7, #28]
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	085b      	lsrs	r3, r3, #1
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d012      	beq.n	8003aec <HAL_I2C_EV_IRQHandler+0x20e>
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	0a5b      	lsrs	r3, r3, #9
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00c      	beq.n	8003aec <HAL_I2C_EV_IRQHandler+0x20e>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_I2C_EV_IRQHandler+0x204>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	61bb      	str	r3, [r7, #24]
 8003ae2:	69b9      	ldr	r1, [r7, #24]
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 ffb2 	bl	8004a4e <I2C_Slave_ADDR>
 8003aea:	e066      	b.n	8003bba <HAL_I2C_EV_IRQHandler+0x2dc>
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	091b      	lsrs	r3, r3, #4
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d009      	beq.n	8003b0c <HAL_I2C_EV_IRQHandler+0x22e>
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	0a5b      	lsrs	r3, r3, #9
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <HAL_I2C_EV_IRQHandler+0x22e>
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 ffed 	bl	8004ae4 <I2C_Slave_STOPF>
 8003b0a:	e056      	b.n	8003bba <HAL_I2C_EV_IRQHandler+0x2dc>
 8003b0c:	7bbb      	ldrb	r3, [r7, #14]
 8003b0e:	2b21      	cmp	r3, #33	@ 0x21
 8003b10:	d002      	beq.n	8003b18 <HAL_I2C_EV_IRQHandler+0x23a>
 8003b12:	7bbb      	ldrb	r3, [r7, #14]
 8003b14:	2b29      	cmp	r3, #41	@ 0x29
 8003b16:	d125      	bne.n	8003b64 <HAL_I2C_EV_IRQHandler+0x286>
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	09db      	lsrs	r3, r3, #7
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00f      	beq.n	8003b44 <HAL_I2C_EV_IRQHandler+0x266>
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	0a9b      	lsrs	r3, r3, #10
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d009      	beq.n	8003b44 <HAL_I2C_EV_IRQHandler+0x266>
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	089b      	lsrs	r3, r3, #2
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d103      	bne.n	8003b44 <HAL_I2C_EV_IRQHandler+0x266>
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 fec8 	bl	80048d2 <I2C_SlaveTransmit_TXE>
 8003b42:	e039      	b.n	8003bb8 <HAL_I2C_EV_IRQHandler+0x2da>
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	089b      	lsrs	r3, r3, #2
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d033      	beq.n	8003bb8 <HAL_I2C_EV_IRQHandler+0x2da>
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	0a5b      	lsrs	r3, r3, #9
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d02d      	beq.n	8003bb8 <HAL_I2C_EV_IRQHandler+0x2da>
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 fef5 	bl	800494c <I2C_SlaveTransmit_BTF>
 8003b62:	e029      	b.n	8003bb8 <HAL_I2C_EV_IRQHandler+0x2da>
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	099b      	lsrs	r3, r3, #6
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00f      	beq.n	8003b90 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	0a9b      	lsrs	r3, r3, #10
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d009      	beq.n	8003b90 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	089b      	lsrs	r3, r3, #2
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d103      	bne.n	8003b90 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 ff00 	bl	800498e <I2C_SlaveReceive_RXNE>
 8003b8e:	e014      	b.n	8003bba <HAL_I2C_EV_IRQHandler+0x2dc>
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	089b      	lsrs	r3, r3, #2
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00e      	beq.n	8003bba <HAL_I2C_EV_IRQHandler+0x2dc>
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	0a5b      	lsrs	r3, r3, #9
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d008      	beq.n	8003bba <HAL_I2C_EV_IRQHandler+0x2dc>
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 ff2e 	bl	8004a0a <I2C_SlaveReceive_BTF>
 8003bae:	e004      	b.n	8003bba <HAL_I2C_EV_IRQHandler+0x2dc>
 8003bb0:	bf00      	nop
 8003bb2:	e002      	b.n	8003bba <HAL_I2C_EV_IRQHandler+0x2dc>
 8003bb4:	bf00      	nop
 8003bb6:	e000      	b.n	8003bba <HAL_I2C_EV_IRQHandler+0x2dc>
 8003bb8:	bf00      	nop
 8003bba:	3720      	adds	r7, #32
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_I2C_ER_IRQHandler>:
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08a      	sub	sp, #40	@ 0x28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	623b      	str	r3, [r7, #32]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	61fb      	str	r3, [r7, #28]
 8003bd8:	2300      	movs	r3, #0
 8003bda:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003be2:	76fb      	strb	r3, [r7, #27]
 8003be4:	6a3b      	ldr	r3, [r7, #32]
 8003be6:	0a1b      	lsrs	r3, r3, #8
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00e      	beq.n	8003c0e <HAL_I2C_ER_IRQHandler+0x4e>
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	0a1b      	lsrs	r3, r3, #8
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d008      	beq.n	8003c0e <HAL_I2C_ER_IRQHandler+0x4e>
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfe:	f043 0301 	orr.w	r3, r3, #1
 8003c02:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003c0c:	615a      	str	r2, [r3, #20]
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	0a5b      	lsrs	r3, r3, #9
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00e      	beq.n	8003c38 <HAL_I2C_ER_IRQHandler+0x78>
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	0a1b      	lsrs	r3, r3, #8
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d008      	beq.n	8003c38 <HAL_I2C_ER_IRQHandler+0x78>
 8003c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c28:	f043 0302 	orr.w	r3, r3, #2
 8003c2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003c36:	615a      	str	r2, [r3, #20]
 8003c38:	6a3b      	ldr	r3, [r7, #32]
 8003c3a:	0a9b      	lsrs	r3, r3, #10
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d03f      	beq.n	8003cc4 <HAL_I2C_ER_IRQHandler+0x104>
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	0a1b      	lsrs	r3, r3, #8
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d039      	beq.n	8003cc4 <HAL_I2C_ER_IRQHandler+0x104>
 8003c50:	7efb      	ldrb	r3, [r7, #27]
 8003c52:	76bb      	strb	r3, [r7, #26]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	617b      	str	r3, [r7, #20]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c62:	74fb      	strb	r3, [r7, #19]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	7ebb      	ldrb	r3, [r7, #26]
 8003c6c:	2b20      	cmp	r3, #32
 8003c6e:	d112      	bne.n	8003c96 <HAL_I2C_ER_IRQHandler+0xd6>
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10f      	bne.n	8003c96 <HAL_I2C_ER_IRQHandler+0xd6>
 8003c76:	7cfb      	ldrb	r3, [r7, #19]
 8003c78:	2b21      	cmp	r3, #33	@ 0x21
 8003c7a:	d008      	beq.n	8003c8e <HAL_I2C_ER_IRQHandler+0xce>
 8003c7c:	7cfb      	ldrb	r3, [r7, #19]
 8003c7e:	2b29      	cmp	r3, #41	@ 0x29
 8003c80:	d005      	beq.n	8003c8e <HAL_I2C_ER_IRQHandler+0xce>
 8003c82:	7cfb      	ldrb	r3, [r7, #19]
 8003c84:	2b28      	cmp	r3, #40	@ 0x28
 8003c86:	d106      	bne.n	8003c96 <HAL_I2C_ER_IRQHandler+0xd6>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2b21      	cmp	r3, #33	@ 0x21
 8003c8c:	d103      	bne.n	8003c96 <HAL_I2C_ER_IRQHandler+0xd6>
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f001 f858 	bl	8004d44 <I2C_Slave_AF>
 8003c94:	e016      	b.n	8003cc4 <HAL_I2C_ER_IRQHandler+0x104>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c9e:	615a      	str	r2, [r3, #20]
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca2:	f043 0304 	orr.w	r3, r3, #4
 8003ca6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ca8:	7efb      	ldrb	r3, [r7, #27]
 8003caa:	2b10      	cmp	r3, #16
 8003cac:	d002      	beq.n	8003cb4 <HAL_I2C_ER_IRQHandler+0xf4>
 8003cae:	7efb      	ldrb	r3, [r7, #27]
 8003cb0:	2b40      	cmp	r3, #64	@ 0x40
 8003cb2:	d107      	bne.n	8003cc4 <HAL_I2C_ER_IRQHandler+0x104>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	0adb      	lsrs	r3, r3, #11
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00e      	beq.n	8003cee <HAL_I2C_ER_IRQHandler+0x12e>
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	0a1b      	lsrs	r3, r3, #8
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <HAL_I2C_ER_IRQHandler+0x12e>
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cde:	f043 0308 	orr.w	r3, r3, #8
 8003ce2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003cec:	615a      	str	r2, [r3, #20]
 8003cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d008      	beq.n	8003d06 <HAL_I2C_ER_IRQHandler+0x146>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	641a      	str	r2, [r3, #64]	@ 0x40
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f001 f893 	bl	8004e2c <I2C_ITError>
 8003d06:	bf00      	nop
 8003d08:	3728      	adds	r7, #40	@ 0x28
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_I2C_MasterTxCpltCallback>:
 8003d0e:	b480      	push	{r7}
 8003d10:	b083      	sub	sp, #12
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <HAL_I2C_MasterRxCpltCallback>:
 8003d22:	b480      	push	{r7}
 8003d24:	b083      	sub	sp, #12
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <HAL_I2C_MemTxCpltCallback>:
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <HAL_I2C_MemRxCpltCallback>:
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <HAL_I2C_AbortCpltCallback>:
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <HAL_I2C_GetError>:
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7e:	4618      	mov	r0, r3
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <I2C_MasterTransmit_TXE>:
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b084      	sub	sp, #16
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d98:	73fb      	strb	r3, [r7, #15]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003da0:	73bb      	strb	r3, [r7, #14]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da6:	60bb      	str	r3, [r7, #8]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d150      	bne.n	8003e52 <I2C_MasterTransmit_TXE+0xc8>
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
 8003db2:	2b21      	cmp	r3, #33	@ 0x21
 8003db4:	d14d      	bne.n	8003e52 <I2C_MasterTransmit_TXE+0xc8>
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d01d      	beq.n	8003df8 <I2C_MasterTransmit_TXE+0x6e>
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	2b20      	cmp	r3, #32
 8003dc0:	d01a      	beq.n	8003df8 <I2C_MasterTransmit_TXE+0x6e>
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003dc8:	d016      	beq.n	8003df8 <I2C_MasterTransmit_TXE+0x6e>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003dd8:	605a      	str	r2, [r3, #4]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2211      	movs	r2, #17
 8003dde:	631a      	str	r2, [r3, #48]	@ 0x30
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2220      	movs	r2, #32
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f7ff ff8c 	bl	8003d0e <HAL_I2C_MasterTxCpltCallback>
 8003df6:	e060      	b.n	8003eba <I2C_MasterTransmit_TXE+0x130>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e06:	605a      	str	r2, [r3, #4]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2220      	movs	r2, #32
 8003e22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b40      	cmp	r3, #64	@ 0x40
 8003e30:	d107      	bne.n	8003e42 <I2C_MasterTransmit_TXE+0xb8>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7ff ff7b 	bl	8003d36 <HAL_I2C_MemTxCpltCallback>
 8003e40:	e03b      	b.n	8003eba <I2C_MasterTransmit_TXE+0x130>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7ff ff5f 	bl	8003d0e <HAL_I2C_MasterTxCpltCallback>
 8003e50:	e033      	b.n	8003eba <I2C_MasterTransmit_TXE+0x130>
 8003e52:	7bfb      	ldrb	r3, [r7, #15]
 8003e54:	2b21      	cmp	r3, #33	@ 0x21
 8003e56:	d005      	beq.n	8003e64 <I2C_MasterTransmit_TXE+0xda>
 8003e58:	7bbb      	ldrb	r3, [r7, #14]
 8003e5a:	2b40      	cmp	r3, #64	@ 0x40
 8003e5c:	d12d      	bne.n	8003eba <I2C_MasterTransmit_TXE+0x130>
 8003e5e:	7bfb      	ldrb	r3, [r7, #15]
 8003e60:	2b22      	cmp	r3, #34	@ 0x22
 8003e62:	d12a      	bne.n	8003eba <I2C_MasterTransmit_TXE+0x130>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d108      	bne.n	8003e80 <I2C_MasterTransmit_TXE+0xf6>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e7c:	605a      	str	r2, [r3, #4]
 8003e7e:	e01c      	b.n	8003eba <I2C_MasterTransmit_TXE+0x130>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b40      	cmp	r3, #64	@ 0x40
 8003e8a:	d103      	bne.n	8003e94 <I2C_MasterTransmit_TXE+0x10a>
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f88e 	bl	8003fae <I2C_MemoryTransmit_TXE_BTF>
 8003e92:	e012      	b.n	8003eba <I2C_MasterTransmit_TXE+0x130>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e98:	781a      	ldrb	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	611a      	str	r2, [r3, #16]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	625a      	str	r2, [r3, #36]	@ 0x24
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003eb8:	e7ff      	b.n	8003eba <I2C_MasterTransmit_TXE+0x130>
 8003eba:	bf00      	nop
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <I2C_MasterTransmit_BTF>:
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b084      	sub	sp, #16
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b21      	cmp	r3, #33	@ 0x21
 8003eda:	d164      	bne.n	8003fa6 <I2C_MasterTransmit_BTF+0xe4>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d012      	beq.n	8003f0c <I2C_MasterTransmit_BTF+0x4a>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eea:	781a      	ldrb	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	611a      	str	r2, [r3, #16]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	625a      	str	r2, [r3, #36]	@ 0x24
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	3b01      	subs	r3, #1
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f0a:	e04c      	b.n	8003fa6 <I2C_MasterTransmit_BTF+0xe4>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2b08      	cmp	r3, #8
 8003f10:	d01d      	beq.n	8003f4e <I2C_MasterTransmit_BTF+0x8c>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2b20      	cmp	r3, #32
 8003f16:	d01a      	beq.n	8003f4e <I2C_MasterTransmit_BTF+0x8c>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f1e:	d016      	beq.n	8003f4e <I2C_MasterTransmit_BTF+0x8c>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f2e:	605a      	str	r2, [r3, #4]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2211      	movs	r2, #17
 8003f34:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2220      	movs	r2, #32
 8003f42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7ff fee1 	bl	8003d0e <HAL_I2C_MasterTxCpltCallback>
 8003f4c:	e02b      	b.n	8003fa6 <I2C_MasterTransmit_BTF+0xe4>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f5c:	605a      	str	r2, [r3, #4]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b40      	cmp	r3, #64	@ 0x40
 8003f86:	d107      	bne.n	8003f98 <I2C_MasterTransmit_BTF+0xd6>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f7ff fed0 	bl	8003d36 <HAL_I2C_MemTxCpltCallback>
 8003f96:	e006      	b.n	8003fa6 <I2C_MasterTransmit_BTF+0xe4>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f7ff feb4 	bl	8003d0e <HAL_I2C_MasterTxCpltCallback>
 8003fa6:	bf00      	nop
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <I2C_MemoryTransmit_TXE_BTF>:
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b084      	sub	sp, #16
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fbc:	73fb      	strb	r3, [r7, #15]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d11d      	bne.n	8004002 <I2C_MemoryTransmit_TXE_BTF+0x54>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d10b      	bne.n	8003fe6 <I2C_MemoryTransmit_TXE_BTF+0x38>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	611a      	str	r2, [r3, #16]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fde:	1c9a      	adds	r2, r3, #2
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	651a      	str	r2, [r3, #80]	@ 0x50
 8003fe4:	e077      	b.n	80040d6 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	121b      	asrs	r3, r3, #8
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	611a      	str	r2, [r3, #16]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ffa:	1c5a      	adds	r2, r3, #1
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	651a      	str	r2, [r3, #80]	@ 0x50
 8004000:	e069      	b.n	80040d6 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004006:	2b01      	cmp	r3, #1
 8004008:	d10b      	bne.n	8004022 <I2C_MemoryTransmit_TXE_BTF+0x74>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800400e:	b2da      	uxtb	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	611a      	str	r2, [r3, #16]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	651a      	str	r2, [r3, #80]	@ 0x50
 8004020:	e059      	b.n	80040d6 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004026:	2b02      	cmp	r3, #2
 8004028:	d152      	bne.n	80040d0 <I2C_MemoryTransmit_TXE_BTF+0x122>
 800402a:	7bfb      	ldrb	r3, [r7, #15]
 800402c:	2b22      	cmp	r3, #34	@ 0x22
 800402e:	d10d      	bne.n	800404c <I2C_MemoryTransmit_TXE_BTF+0x9e>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004044:	1c5a      	adds	r2, r3, #1
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	651a      	str	r2, [r3, #80]	@ 0x50
 800404a:	e044      	b.n	80040d6 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004050:	b29b      	uxth	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d015      	beq.n	8004082 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004056:	7bfb      	ldrb	r3, [r7, #15]
 8004058:	2b21      	cmp	r3, #33	@ 0x21
 800405a:	d112      	bne.n	8004082 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004060:	781a      	ldrb	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	611a      	str	r2, [r3, #16]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406c:	1c5a      	adds	r2, r3, #1
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	625a      	str	r2, [r3, #36]	@ 0x24
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004076:	b29b      	uxth	r3, r3
 8004078:	3b01      	subs	r3, #1
 800407a:	b29a      	uxth	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004080:	e029      	b.n	80040d6 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004086:	b29b      	uxth	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	d124      	bne.n	80040d6 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800408c:	7bfb      	ldrb	r3, [r7, #15]
 800408e:	2b21      	cmp	r3, #33	@ 0x21
 8004090:	d121      	bne.n	80040d6 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	685a      	ldr	r2, [r3, #4]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80040a0:	605a      	str	r2, [r3, #4]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2220      	movs	r2, #32
 80040bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7ff fe34 	bl	8003d36 <HAL_I2C_MemTxCpltCallback>
 80040ce:	e002      	b.n	80040d6 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f7ff fad3 	bl	800367c <I2C_Flush_DR>
 80040d6:	bf00      	nop
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <I2C_MasterReceive_RXNE>:
 80040de:	b580      	push	{r7, lr}
 80040e0:	b084      	sub	sp, #16
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b22      	cmp	r3, #34	@ 0x22
 80040f0:	f040 80b9 	bne.w	8004266 <I2C_MasterReceive_RXNE+0x188>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040fe:	b29b      	uxth	r3, r3
 8004100:	60bb      	str	r3, [r7, #8]
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	2b03      	cmp	r3, #3
 8004106:	d921      	bls.n	800414c <I2C_MasterReceive_RXNE+0x6e>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	691a      	ldr	r2, [r3, #16]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004112:	b2d2      	uxtb	r2, r2
 8004114:	701a      	strb	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004124:	b29b      	uxth	r3, r3
 8004126:	3b01      	subs	r3, #1
 8004128:	b29a      	uxth	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004132:	b29b      	uxth	r3, r3
 8004134:	2b03      	cmp	r3, #3
 8004136:	f040 8096 	bne.w	8004266 <I2C_MasterReceive_RXNE+0x188>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004148:	605a      	str	r2, [r3, #4]
 800414a:	e08c      	b.n	8004266 <I2C_MasterReceive_RXNE+0x188>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004150:	2b02      	cmp	r3, #2
 8004152:	d07f      	beq.n	8004254 <I2C_MasterReceive_RXNE+0x176>
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d002      	beq.n	8004160 <I2C_MasterReceive_RXNE+0x82>
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d179      	bne.n	8004254 <I2C_MasterReceive_RXNE+0x176>
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f001 f83d 	bl	80051e0 <I2C_WaitOnSTOPRequestThroughIT>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d14c      	bne.n	8004206 <I2C_MasterReceive_RXNE+0x128>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800418a:	605a      	str	r2, [r3, #4]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	691a      	ldr	r2, [r3, #16]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004196:	b2d2      	uxtb	r2, r2
 8004198:	701a      	strb	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	625a      	str	r2, [r3, #36]	@ 0x24
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b40      	cmp	r3, #64	@ 0x40
 80041c4:	d10a      	bne.n	80041dc <I2C_MasterReceive_RXNE+0xfe>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7ff fdb8 	bl	8003d4a <HAL_I2C_MemRxCpltCallback>
 80041da:	e044      	b.n	8004266 <I2C_MasterReceive_RXNE+0x188>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2b08      	cmp	r3, #8
 80041e8:	d002      	beq.n	80041f0 <I2C_MasterReceive_RXNE+0x112>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2b20      	cmp	r3, #32
 80041ee:	d103      	bne.n	80041f8 <I2C_MasterReceive_RXNE+0x11a>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80041f6:	e002      	b.n	80041fe <I2C_MasterReceive_RXNE+0x120>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2212      	movs	r2, #18
 80041fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7ff fd8f 	bl	8003d22 <HAL_I2C_MasterRxCpltCallback>
 8004204:	e02f      	b.n	8004266 <I2C_MasterReceive_RXNE+0x188>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004214:	605a      	str	r2, [r3, #4]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004220:	b2d2      	uxtb	r2, r2
 8004222:	701a      	strb	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004228:	1c5a      	adds	r2, r3, #1
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	625a      	str	r2, [r3, #36]	@ 0x24
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004232:	b29b      	uxth	r3, r3
 8004234:	3b01      	subs	r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2220      	movs	r2, #32
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f7fe faaf 	bl	80027b0 <HAL_I2C_ErrorCallback>
 8004252:	e008      	b.n	8004266 <I2C_MasterReceive_RXNE+0x188>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004262:	605a      	str	r2, [r3, #4]
 8004264:	e7ff      	b.n	8004266 <I2C_MasterReceive_RXNE+0x188>
 8004266:	bf00      	nop
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <I2C_MasterReceive_BTF>:
 800426e:	b580      	push	{r7, lr}
 8004270:	b084      	sub	sp, #16
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004280:	b29b      	uxth	r3, r3
 8004282:	2b04      	cmp	r3, #4
 8004284:	d11b      	bne.n	80042be <I2C_MasterReceive_BTF+0x50>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004294:	605a      	str	r2, [r3, #4]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	691a      	ldr	r2, [r3, #16]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a0:	b2d2      	uxtb	r2, r2
 80042a2:	701a      	strb	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a8:	1c5a      	adds	r2, r3, #1
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	625a      	str	r2, [r3, #36]	@ 0x24
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042bc:	e0c4      	b.n	8004448 <I2C_MasterReceive_BTF+0x1da>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	2b03      	cmp	r3, #3
 80042c6:	d129      	bne.n	800431c <I2C_MasterReceive_BTF+0xae>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042d6:	605a      	str	r2, [r3, #4]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2b04      	cmp	r3, #4
 80042dc:	d00a      	beq.n	80042f4 <I2C_MasterReceive_BTF+0x86>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d007      	beq.n	80042f4 <I2C_MasterReceive_BTF+0x86>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	691a      	ldr	r2, [r3, #16]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	701a      	strb	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004306:	1c5a      	adds	r2, r3, #1
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	625a      	str	r2, [r3, #36]	@ 0x24
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004310:	b29b      	uxth	r3, r3
 8004312:	3b01      	subs	r3, #1
 8004314:	b29a      	uxth	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800431a:	e095      	b.n	8004448 <I2C_MasterReceive_BTF+0x1da>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d17d      	bne.n	8004422 <I2C_MasterReceive_BTF+0x1b4>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d002      	beq.n	8004332 <I2C_MasterReceive_BTF+0xc4>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2b10      	cmp	r3, #16
 8004330:	d108      	bne.n	8004344 <I2C_MasterReceive_BTF+0xd6>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	e016      	b.n	8004372 <I2C_MasterReceive_BTF+0x104>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2b04      	cmp	r3, #4
 8004348:	d002      	beq.n	8004350 <I2C_MasterReceive_BTF+0xe2>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2b02      	cmp	r3, #2
 800434e:	d108      	bne.n	8004362 <I2C_MasterReceive_BTF+0xf4>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	e007      	b.n	8004372 <I2C_MasterReceive_BTF+0x104>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	691a      	ldr	r2, [r3, #16]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437c:	b2d2      	uxtb	r2, r2
 800437e:	701a      	strb	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004384:	1c5a      	adds	r2, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	625a      	str	r2, [r3, #36]	@ 0x24
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800438e:	b29b      	uxth	r3, r3
 8004390:	3b01      	subs	r3, #1
 8004392:	b29a      	uxth	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	691a      	ldr	r2, [r3, #16]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a2:	b2d2      	uxtb	r2, r2
 80043a4:	701a      	strb	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043aa:	1c5a      	adds	r2, r3, #1
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	625a      	str	r2, [r3, #36]	@ 0x24
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80043cc:	605a      	str	r2, [r3, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2220      	movs	r2, #32
 80043d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b40      	cmp	r3, #64	@ 0x40
 80043e0:	d10a      	bne.n	80043f8 <I2C_MasterReceive_BTF+0x18a>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f7ff fcaa 	bl	8003d4a <HAL_I2C_MemRxCpltCallback>
 80043f6:	e027      	b.n	8004448 <I2C_MasterReceive_BTF+0x1da>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2b08      	cmp	r3, #8
 8004404:	d002      	beq.n	800440c <I2C_MasterReceive_BTF+0x19e>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2b20      	cmp	r3, #32
 800440a:	d103      	bne.n	8004414 <I2C_MasterReceive_BTF+0x1a6>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	631a      	str	r2, [r3, #48]	@ 0x30
 8004412:	e002      	b.n	800441a <I2C_MasterReceive_BTF+0x1ac>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2212      	movs	r2, #18
 8004418:	631a      	str	r2, [r3, #48]	@ 0x30
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7ff fc81 	bl	8003d22 <HAL_I2C_MasterRxCpltCallback>
 8004420:	e012      	b.n	8004448 <I2C_MasterReceive_BTF+0x1da>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	691a      	ldr	r2, [r3, #16]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442c:	b2d2      	uxtb	r2, r2
 800442e:	701a      	strb	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004434:	1c5a      	adds	r2, r3, #1
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	625a      	str	r2, [r3, #36]	@ 0x24
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800443e:	b29b      	uxth	r3, r3
 8004440:	3b01      	subs	r3, #1
 8004442:	b29a      	uxth	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004448:	bf00      	nop
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <I2C_Master_SB>:
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b40      	cmp	r3, #64	@ 0x40
 8004462:	d117      	bne.n	8004494 <I2C_Master_SB+0x44>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004468:	2b00      	cmp	r3, #0
 800446a:	d109      	bne.n	8004480 <I2C_Master_SB+0x30>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004470:	b2db      	uxtb	r3, r3
 8004472:	461a      	mov	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800447c:	611a      	str	r2, [r3, #16]
 800447e:	e067      	b.n	8004550 <I2C_Master_SB+0x100>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004484:	b2db      	uxtb	r3, r3
 8004486:	f043 0301 	orr.w	r3, r3, #1
 800448a:	b2da      	uxtb	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	611a      	str	r2, [r3, #16]
 8004492:	e05d      	b.n	8004550 <I2C_Master_SB+0x100>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800449c:	d133      	bne.n	8004506 <I2C_Master_SB+0xb6>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b21      	cmp	r3, #33	@ 0x21
 80044a8:	d109      	bne.n	80044be <I2C_Master_SB+0x6e>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	461a      	mov	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80044ba:	611a      	str	r2, [r3, #16]
 80044bc:	e008      	b.n	80044d0 <I2C_Master_SB+0x80>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	f043 0301 	orr.w	r3, r3, #1
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	611a      	str	r2, [r3, #16]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d004      	beq.n	80044e2 <I2C_Master_SB+0x92>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d108      	bne.n	80044f4 <I2C_Master_SB+0xa4>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d032      	beq.n	8004550 <I2C_Master_SB+0x100>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d02d      	beq.n	8004550 <I2C_Master_SB+0x100>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004502:	605a      	str	r2, [r3, #4]
 8004504:	e024      	b.n	8004550 <I2C_Master_SB+0x100>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10e      	bne.n	800452c <I2C_Master_SB+0xdc>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004512:	b29b      	uxth	r3, r3
 8004514:	11db      	asrs	r3, r3, #7
 8004516:	b2db      	uxtb	r3, r3
 8004518:	f003 0306 	and.w	r3, r3, #6
 800451c:	b2db      	uxtb	r3, r3
 800451e:	f063 030f 	orn	r3, r3, #15
 8004522:	b2da      	uxtb	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	611a      	str	r2, [r3, #16]
 800452a:	e011      	b.n	8004550 <I2C_Master_SB+0x100>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004530:	2b01      	cmp	r3, #1
 8004532:	d10d      	bne.n	8004550 <I2C_Master_SB+0x100>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004538:	b29b      	uxth	r3, r3
 800453a:	11db      	asrs	r3, r3, #7
 800453c:	b2db      	uxtb	r3, r3
 800453e:	f003 0306 	and.w	r3, r3, #6
 8004542:	b2db      	uxtb	r3, r3
 8004544:	f063 030e 	orn	r3, r3, #14
 8004548:	b2da      	uxtb	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	611a      	str	r2, [r3, #16]
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <I2C_Master_ADD10>:
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004568:	b2da      	uxtb	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	611a      	str	r2, [r3, #16]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004574:	2b00      	cmp	r3, #0
 8004576:	d004      	beq.n	8004582 <I2C_Master_ADD10+0x26>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800457c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800457e:	2b00      	cmp	r3, #0
 8004580:	d108      	bne.n	8004594 <I2C_Master_ADD10+0x38>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00c      	beq.n	80045a4 <I2C_Master_ADD10+0x48>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800458e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004590:	2b00      	cmp	r3, #0
 8004592:	d007      	beq.n	80045a4 <I2C_Master_ADD10+0x48>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045a2:	605a      	str	r2, [r3, #4]
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <I2C_Master_ADDR>:
 80045b0:	b480      	push	{r7}
 80045b2:	b091      	sub	sp, #68	@ 0x44
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045be:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b22      	cmp	r3, #34	@ 0x22
 80045d8:	f040 8169 	bne.w	80048ae <I2C_Master_ADDR+0x2fe>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10f      	bne.n	8004604 <I2C_Master_ADDR+0x54>
 80045e4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80045e8:	2b40      	cmp	r3, #64	@ 0x40
 80045ea:	d10b      	bne.n	8004604 <I2C_Master_ADDR+0x54>
 80045ec:	2300      	movs	r3, #0
 80045ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8004600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004602:	e160      	b.n	80048c6 <I2C_Master_ADDR+0x316>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004608:	2b00      	cmp	r3, #0
 800460a:	d11d      	bne.n	8004648 <I2C_Master_ADDR+0x98>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004614:	d118      	bne.n	8004648 <I2C_Master_ADDR+0x98>
 8004616:	2300      	movs	r3, #0
 8004618:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800462a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004640:	1c5a      	adds	r2, r3, #1
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	651a      	str	r2, [r3, #80]	@ 0x50
 8004646:	e13e      	b.n	80048c6 <I2C_Master_ADDR+0x316>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800464c:	b29b      	uxth	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d113      	bne.n	800467a <I2C_Master_ADDR+0xca>
 8004652:	2300      	movs	r3, #0
 8004654:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	e115      	b.n	80048a6 <I2C_Master_ADDR+0x2f6>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800467e:	b29b      	uxth	r3, r3
 8004680:	2b01      	cmp	r3, #1
 8004682:	f040 808a 	bne.w	800479a <I2C_Master_ADDR+0x1ea>
 8004686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004688:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800468c:	d137      	bne.n	80046fe <I2C_Master_ADDR+0x14e>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800469c:	601a      	str	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046ac:	d113      	bne.n	80046d6 <I2C_Master_ADDR+0x126>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	2300      	movs	r3, #0
 80046c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	695b      	ldr	r3, [r3, #20]
 80046c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80046d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d4:	e0e7      	b.n	80048a6 <I2C_Master_ADDR+0x2f6>
 80046d6:	2300      	movs	r3, #0
 80046d8:	623b      	str	r3, [r7, #32]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	623b      	str	r3, [r7, #32]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	623b      	str	r3, [r7, #32]
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	e0d3      	b.n	80048a6 <I2C_Master_ADDR+0x2f6>
 80046fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004700:	2b08      	cmp	r3, #8
 8004702:	d02e      	beq.n	8004762 <I2C_Master_ADDR+0x1b2>
 8004704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004706:	2b20      	cmp	r3, #32
 8004708:	d02b      	beq.n	8004762 <I2C_Master_ADDR+0x1b2>
 800470a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800470c:	2b12      	cmp	r3, #18
 800470e:	d102      	bne.n	8004716 <I2C_Master_ADDR+0x166>
 8004710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004712:	2b01      	cmp	r3, #1
 8004714:	d125      	bne.n	8004762 <I2C_Master_ADDR+0x1b2>
 8004716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004718:	2b04      	cmp	r3, #4
 800471a:	d00e      	beq.n	800473a <I2C_Master_ADDR+0x18a>
 800471c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800471e:	2b02      	cmp	r3, #2
 8004720:	d00b      	beq.n	800473a <I2C_Master_ADDR+0x18a>
 8004722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004724:	2b10      	cmp	r3, #16
 8004726:	d008      	beq.n	800473a <I2C_Master_ADDR+0x18a>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	e007      	b.n	800474a <I2C_Master_ADDR+0x19a>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	2300      	movs	r3, #0
 800474c:	61fb      	str	r3, [r7, #28]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	61fb      	str	r3, [r7, #28]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	61fb      	str	r3, [r7, #28]
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	e0a1      	b.n	80048a6 <I2C_Master_ADDR+0x2f6>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	2300      	movs	r3, #0
 8004774:	61bb      	str	r3, [r7, #24]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	61bb      	str	r3, [r7, #24]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	61bb      	str	r3, [r7, #24]
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	e085      	b.n	80048a6 <I2C_Master_ADDR+0x2f6>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800479e:	b29b      	uxth	r3, r3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d14d      	bne.n	8004840 <I2C_Master_ADDR+0x290>
 80047a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	d016      	beq.n	80047d8 <I2C_Master_ADDR+0x228>
 80047aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d013      	beq.n	80047d8 <I2C_Master_ADDR+0x228>
 80047b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b2:	2b10      	cmp	r3, #16
 80047b4:	d010      	beq.n	80047d8 <I2C_Master_ADDR+0x228>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047c4:	601a      	str	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047d4:	601a      	str	r2, [r3, #0]
 80047d6:	e007      	b.n	80047e8 <I2C_Master_ADDR+0x238>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047f6:	d117      	bne.n	8004828 <I2C_Master_ADDR+0x278>
 80047f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047fa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80047fe:	d00b      	beq.n	8004818 <I2C_Master_ADDR+0x268>
 8004800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004802:	2b01      	cmp	r3, #1
 8004804:	d008      	beq.n	8004818 <I2C_Master_ADDR+0x268>
 8004806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004808:	2b08      	cmp	r3, #8
 800480a:	d005      	beq.n	8004818 <I2C_Master_ADDR+0x268>
 800480c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800480e:	2b10      	cmp	r3, #16
 8004810:	d002      	beq.n	8004818 <I2C_Master_ADDR+0x268>
 8004812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004814:	2b20      	cmp	r3, #32
 8004816:	d107      	bne.n	8004828 <I2C_Master_ADDR+0x278>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685a      	ldr	r2, [r3, #4]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004826:	605a      	str	r2, [r3, #4]
 8004828:	2300      	movs	r3, #0
 800482a:	617b      	str	r3, [r7, #20]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	617b      	str	r3, [r7, #20]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	617b      	str	r3, [r7, #20]
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	e032      	b.n	80048a6 <I2C_Master_ADDR+0x2f6>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800484e:	601a      	str	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800485a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800485e:	d117      	bne.n	8004890 <I2C_Master_ADDR+0x2e0>
 8004860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004862:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004866:	d00b      	beq.n	8004880 <I2C_Master_ADDR+0x2d0>
 8004868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800486a:	2b01      	cmp	r3, #1
 800486c:	d008      	beq.n	8004880 <I2C_Master_ADDR+0x2d0>
 800486e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004870:	2b08      	cmp	r3, #8
 8004872:	d005      	beq.n	8004880 <I2C_Master_ADDR+0x2d0>
 8004874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004876:	2b10      	cmp	r3, #16
 8004878:	d002      	beq.n	8004880 <I2C_Master_ADDR+0x2d0>
 800487a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800487c:	2b20      	cmp	r3, #32
 800487e:	d107      	bne.n	8004890 <I2C_Master_ADDR+0x2e0>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800488e:	605a      	str	r2, [r3, #4]
 8004890:	2300      	movs	r3, #0
 8004892:	613b      	str	r3, [r7, #16]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	613b      	str	r3, [r7, #16]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	613b      	str	r3, [r7, #16]
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	651a      	str	r2, [r3, #80]	@ 0x50
 80048ac:	e00b      	b.n	80048c6 <I2C_Master_ADDR+0x316>
 80048ae:	2300      	movs	r3, #0
 80048b0:	60fb      	str	r3, [r7, #12]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	695b      	ldr	r3, [r3, #20]
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	60fb      	str	r3, [r7, #12]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	e7ff      	b.n	80048c6 <I2C_Master_ADDR+0x316>
 80048c6:	bf00      	nop
 80048c8:	3744      	adds	r7, #68	@ 0x44
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <I2C_SlaveTransmit_TXE>:
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b084      	sub	sp, #16
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048e0:	73fb      	strb	r3, [r7, #15]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d02b      	beq.n	8004944 <I2C_SlaveTransmit_TXE+0x72>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f0:	781a      	ldrb	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	611a      	str	r2, [r3, #16]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fc:	1c5a      	adds	r2, r3, #1
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	625a      	str	r2, [r3, #36]	@ 0x24
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004906:	b29b      	uxth	r3, r3
 8004908:	3b01      	subs	r3, #1
 800490a:	b29a      	uxth	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004914:	b29b      	uxth	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d114      	bne.n	8004944 <I2C_SlaveTransmit_TXE+0x72>
 800491a:	7bfb      	ldrb	r3, [r7, #15]
 800491c:	2b29      	cmp	r3, #41	@ 0x29
 800491e:	d111      	bne.n	8004944 <I2C_SlaveTransmit_TXE+0x72>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800492e:	605a      	str	r2, [r3, #4]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2221      	movs	r2, #33	@ 0x21
 8004934:	631a      	str	r2, [r3, #48]	@ 0x30
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2228      	movs	r2, #40	@ 0x28
 800493a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7fd fef2 	bl	8002728 <HAL_I2C_SlaveTxCpltCallback>
 8004944:	bf00      	nop
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <I2C_SlaveTransmit_BTF>:
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004958:	b29b      	uxth	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d011      	beq.n	8004982 <I2C_SlaveTransmit_BTF+0x36>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004962:	781a      	ldrb	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	611a      	str	r2, [r3, #16]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496e:	1c5a      	adds	r2, r3, #1
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	625a      	str	r2, [r3, #36]	@ 0x24
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004978:	b29b      	uxth	r3, r3
 800497a:	3b01      	subs	r3, #1
 800497c:	b29a      	uxth	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <I2C_SlaveReceive_RXNE>:
 800498e:	b580      	push	{r7, lr}
 8004990:	b084      	sub	sp, #16
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800499c:	73fb      	strb	r3, [r7, #15]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d02c      	beq.n	8004a02 <I2C_SlaveReceive_RXNE+0x74>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	691a      	ldr	r2, [r3, #16]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b2:	b2d2      	uxtb	r2, r2
 80049b4:	701a      	strb	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	625a      	str	r2, [r3, #36]	@ 0x24
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	3b01      	subs	r3, #1
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d114      	bne.n	8004a02 <I2C_SlaveReceive_RXNE+0x74>
 80049d8:	7bfb      	ldrb	r3, [r7, #15]
 80049da:	2b2a      	cmp	r3, #42	@ 0x2a
 80049dc:	d111      	bne.n	8004a02 <I2C_SlaveReceive_RXNE+0x74>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049ec:	605a      	str	r2, [r3, #4]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2222      	movs	r2, #34	@ 0x22
 80049f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2228      	movs	r2, #40	@ 0x28
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f7fd fe9d 	bl	800273c <HAL_I2C_SlaveRxCpltCallback>
 8004a02:	bf00      	nop
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <I2C_SlaveReceive_BTF>:
 8004a0a:	b480      	push	{r7}
 8004a0c:	b083      	sub	sp, #12
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d012      	beq.n	8004a42 <I2C_SlaveReceive_BTF+0x38>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	691a      	ldr	r2, [r3, #16]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a26:	b2d2      	uxtb	r2, r2
 8004a28:	701a      	strb	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	625a      	str	r2, [r3, #36]	@ 0x24
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <I2C_Slave_ADDR>:
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b084      	sub	sp, #16
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
 8004a56:	6039      	str	r1, [r7, #0]
 8004a58:	2300      	movs	r3, #0
 8004a5a:	73fb      	strb	r3, [r7, #15]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004a68:	2b28      	cmp	r3, #40	@ 0x28
 8004a6a:	d127      	bne.n	8004abc <I2C_Slave_ADDR+0x6e>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a7a:	605a      	str	r2, [r3, #4]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	089b      	lsrs	r3, r3, #2
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <I2C_Slave_ADDR+0x3e>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	73fb      	strb	r3, [r7, #15]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	09db      	lsrs	r3, r3, #7
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d103      	bne.n	8004aa0 <I2C_Slave_ADDR+0x52>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	81bb      	strh	r3, [r7, #12]
 8004a9e:	e002      	b.n	8004aa6 <I2C_Slave_ADDR+0x58>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	81bb      	strh	r3, [r7, #12]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004aae:	89ba      	ldrh	r2, [r7, #12]
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f7fd fe4b 	bl	8002750 <HAL_I2C_AddrCallback>
 8004aba:	e00e      	b.n	8004ada <I2C_Slave_ADDR+0x8c>
 8004abc:	2300      	movs	r3, #0
 8004abe:	60bb      	str	r3, [r7, #8]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	60bb      	str	r3, [r7, #8]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	60bb      	str	r3, [r7, #8]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004ada:	bf00      	nop
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
	...

08004ae4 <I2C_Slave_STOPF>:
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004af2:	73fb      	strb	r3, [r7, #15]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004b02:	605a      	str	r2, [r3, #4]
 8004b04:	2300      	movs	r3, #0
 8004b06:	60bb      	str	r3, [r7, #8]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	60bb      	str	r3, [r7, #8]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 0201 	orr.w	r2, r2, #1
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b40:	d172      	bne.n	8004c28 <I2C_Slave_STOPF+0x144>
 8004b42:	7bfb      	ldrb	r3, [r7, #15]
 8004b44:	2b22      	cmp	r3, #34	@ 0x22
 8004b46:	d002      	beq.n	8004b4e <I2C_Slave_STOPF+0x6a>
 8004b48:	7bfb      	ldrb	r3, [r7, #15]
 8004b4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b4c:	d135      	bne.n	8004bba <I2C_Slave_STOPF+0xd6>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d005      	beq.n	8004b72 <I2C_Slave_STOPF+0x8e>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b6a:	f043 0204 	orr.w	r2, r3, #4
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	641a      	str	r2, [r3, #64]	@ 0x40
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b80:	605a      	str	r2, [r3, #4]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7fe fa48 	bl	800301c <HAL_DMA_GetState>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d049      	beq.n	8004c26 <I2C_Slave_STOPF+0x142>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b96:	4a69      	ldr	r2, [pc, #420]	@ (8004d3c <I2C_Slave_STOPF+0x258>)
 8004b98:	651a      	str	r2, [r3, #80]	@ 0x50
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7fe fa1a 	bl	8002fd8 <HAL_DMA_Abort_IT>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d03d      	beq.n	8004c26 <I2C_Slave_STOPF+0x142>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004bb4:	4610      	mov	r0, r2
 8004bb6:	4798      	blx	r3
 8004bb8:	e035      	b.n	8004c26 <I2C_Slave_STOPF+0x142>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d005      	beq.n	8004bde <I2C_Slave_STOPF+0xfa>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd6:	f043 0204 	orr.w	r2, r3, #4
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	641a      	str	r2, [r3, #64]	@ 0x40
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004bec:	605a      	str	r2, [r3, #4]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7fe fa12 	bl	800301c <HAL_DMA_GetState>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d014      	beq.n	8004c28 <I2C_Slave_STOPF+0x144>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c02:	4a4e      	ldr	r2, [pc, #312]	@ (8004d3c <I2C_Slave_STOPF+0x258>)
 8004c04:	651a      	str	r2, [r3, #80]	@ 0x50
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7fe f9e4 	bl	8002fd8 <HAL_DMA_Abort_IT>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d008      	beq.n	8004c28 <I2C_Slave_STOPF+0x144>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004c20:	4610      	mov	r0, r2
 8004c22:	4798      	blx	r3
 8004c24:	e000      	b.n	8004c28 <I2C_Slave_STOPF+0x144>
 8004c26:	bf00      	nop
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d03e      	beq.n	8004cb0 <I2C_Slave_STOPF+0x1cc>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	f003 0304 	and.w	r3, r3, #4
 8004c3c:	2b04      	cmp	r3, #4
 8004c3e:	d112      	bne.n	8004c66 <I2C_Slave_STOPF+0x182>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	691a      	ldr	r2, [r3, #16]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4a:	b2d2      	uxtb	r2, r2
 8004c4c:	701a      	strb	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c52:	1c5a      	adds	r2, r3, #1
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	625a      	str	r2, [r3, #36]	@ 0x24
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c70:	2b40      	cmp	r3, #64	@ 0x40
 8004c72:	d112      	bne.n	8004c9a <I2C_Slave_STOPF+0x1b6>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	691a      	ldr	r2, [r3, #16]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7e:	b2d2      	uxtb	r2, r2
 8004c80:	701a      	strb	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	625a      	str	r2, [r3, #36]	@ 0x24
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	3b01      	subs	r3, #1
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d005      	beq.n	8004cb0 <I2C_Slave_STOPF+0x1cc>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca8:	f043 0204 	orr.w	r2, r3, #4
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	641a      	str	r2, [r3, #64]	@ 0x40
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d003      	beq.n	8004cc0 <I2C_Slave_STOPF+0x1dc>
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f8b7 	bl	8004e2c <I2C_ITError>
 8004cbe:	e039      	b.n	8004d34 <I2C_Slave_STOPF+0x250>
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
 8004cc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cc4:	d109      	bne.n	8004cda <I2C_Slave_STOPF+0x1f6>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2228      	movs	r2, #40	@ 0x28
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7fd fd31 	bl	800273c <HAL_I2C_SlaveRxCpltCallback>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b28      	cmp	r3, #40	@ 0x28
 8004ce4:	d111      	bne.n	8004d0a <I2C_Slave_STOPF+0x226>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a15      	ldr	r2, [pc, #84]	@ (8004d40 <I2C_Slave_STOPF+0x25c>)
 8004cea:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	631a      	str	r2, [r3, #48]	@ 0x30
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7fd fca8 	bl	8002658 <HAL_I2C_ListenCpltCallback>
 8004d08:	e014      	b.n	8004d34 <I2C_Slave_STOPF+0x250>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d0e:	2b22      	cmp	r3, #34	@ 0x22
 8004d10:	d002      	beq.n	8004d18 <I2C_Slave_STOPF+0x234>
 8004d12:	7bfb      	ldrb	r3, [r7, #15]
 8004d14:	2b22      	cmp	r3, #34	@ 0x22
 8004d16:	d10d      	bne.n	8004d34 <I2C_Slave_STOPF+0x250>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2220      	movs	r2, #32
 8004d22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7fd fd04 	bl	800273c <HAL_I2C_SlaveRxCpltCallback>
 8004d34:	bf00      	nop
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	08005091 	.word	0x08005091
 8004d40:	ffff0000 	.word	0xffff0000

08004d44 <I2C_Slave_AF>:
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d52:	73fb      	strb	r3, [r7, #15]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d58:	60bb      	str	r3, [r7, #8]
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2b08      	cmp	r3, #8
 8004d5e:	d002      	beq.n	8004d66 <I2C_Slave_AF+0x22>
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	2b20      	cmp	r3, #32
 8004d64:	d129      	bne.n	8004dba <I2C_Slave_AF+0x76>
 8004d66:	7bfb      	ldrb	r3, [r7, #15]
 8004d68:	2b28      	cmp	r3, #40	@ 0x28
 8004d6a:	d126      	bne.n	8004dba <I2C_Slave_AF+0x76>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a2e      	ldr	r2, [pc, #184]	@ (8004e28 <I2C_Slave_AF+0xe4>)
 8004d70:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d80:	605a      	str	r2, [r3, #4]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d8a:	615a      	str	r2, [r3, #20]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d9a:	601a      	str	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	631a      	str	r2, [r3, #48]	@ 0x30
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2220      	movs	r2, #32
 8004da6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7fd fc50 	bl	8002658 <HAL_I2C_ListenCpltCallback>
 8004db8:	e031      	b.n	8004e1e <I2C_Slave_AF+0xda>
 8004dba:	7bfb      	ldrb	r3, [r7, #15]
 8004dbc:	2b21      	cmp	r3, #33	@ 0x21
 8004dbe:	d129      	bne.n	8004e14 <I2C_Slave_AF+0xd0>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a19      	ldr	r2, [pc, #100]	@ (8004e28 <I2C_Slave_AF+0xe4>)
 8004dc4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2221      	movs	r2, #33	@ 0x21
 8004dca:	631a      	str	r2, [r3, #48]	@ 0x30
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004dea:	605a      	str	r2, [r3, #4]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004df4:	615a      	str	r2, [r3, #20]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f7fe fc38 	bl	800367c <I2C_Flush_DR>
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f7fd fc8b 	bl	8002728 <HAL_I2C_SlaveTxCpltCallback>
 8004e12:	e004      	b.n	8004e1e <I2C_Slave_AF+0xda>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e1c:	615a      	str	r2, [r3, #20]
 8004e1e:	bf00      	nop
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	ffff0000 	.word	0xffff0000

08004e2c <I2C_ITError>:
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e3a:	73fb      	strb	r3, [r7, #15]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e42:	73bb      	strb	r3, [r7, #14]
 8004e44:	7bbb      	ldrb	r3, [r7, #14]
 8004e46:	2b10      	cmp	r3, #16
 8004e48:	d002      	beq.n	8004e50 <I2C_ITError+0x24>
 8004e4a:	7bbb      	ldrb	r3, [r7, #14]
 8004e4c:	2b40      	cmp	r3, #64	@ 0x40
 8004e4e:	d10a      	bne.n	8004e66 <I2C_ITError+0x3a>
 8004e50:	7bfb      	ldrb	r3, [r7, #15]
 8004e52:	2b22      	cmp	r3, #34	@ 0x22
 8004e54:	d107      	bne.n	8004e66 <I2C_ITError+0x3a>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	7bfb      	ldrb	r3, [r7, #15]
 8004e68:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004e6c:	2b28      	cmp	r3, #40	@ 0x28
 8004e6e:	d107      	bne.n	8004e80 <I2C_ITError+0x54>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2228      	movs	r2, #40	@ 0x28
 8004e7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004e7e:	e015      	b.n	8004eac <I2C_ITError+0x80>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e8e:	d00a      	beq.n	8004ea6 <I2C_ITError+0x7a>
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
 8004e92:	2b60      	cmp	r3, #96	@ 0x60
 8004e94:	d007      	beq.n	8004ea6 <I2C_ITError+0x7a>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	631a      	str	r2, [r3, #48]	@ 0x30
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004eb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004eba:	d162      	bne.n	8004f82 <I2C_ITError+0x156>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004eca:	605a      	str	r2, [r3, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ed0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d020      	beq.n	8004f1c <I2C_ITError+0xf0>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ede:	4a6a      	ldr	r2, [pc, #424]	@ (8005088 <I2C_ITError+0x25c>)
 8004ee0:	651a      	str	r2, [r3, #80]	@ 0x50
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7fe f876 	bl	8002fd8 <HAL_DMA_Abort_IT>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f000 8089 	beq.w	8005006 <I2C_ITError+0x1da>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0201 	bic.w	r2, r2, #1
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2220      	movs	r2, #32
 8004f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004f16:	4610      	mov	r0, r2
 8004f18:	4798      	blx	r3
 8004f1a:	e074      	b.n	8005006 <I2C_ITError+0x1da>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f20:	4a59      	ldr	r2, [pc, #356]	@ (8005088 <I2C_ITError+0x25c>)
 8004f22:	651a      	str	r2, [r3, #80]	@ 0x50
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7fe f855 	bl	8002fd8 <HAL_DMA_Abort_IT>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d068      	beq.n	8005006 <I2C_ITError+0x1da>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f3e:	2b40      	cmp	r3, #64	@ 0x40
 8004f40:	d10b      	bne.n	8004f5a <I2C_ITError+0x12e>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	691a      	ldr	r2, [r3, #16]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4c:	b2d2      	uxtb	r2, r2
 8004f4e:	701a      	strb	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	625a      	str	r2, [r3, #36]	@ 0x24
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f022 0201 	bic.w	r2, r2, #1
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	4798      	blx	r3
 8004f80:	e041      	b.n	8005006 <I2C_ITError+0x1da>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b60      	cmp	r3, #96	@ 0x60
 8004f8c:	d125      	bne.n	8004fda <I2C_ITError+0x1ae>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2220      	movs	r2, #32
 8004f92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	641a      	str	r2, [r3, #64]	@ 0x40
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fa6:	2b40      	cmp	r3, #64	@ 0x40
 8004fa8:	d10b      	bne.n	8004fc2 <I2C_ITError+0x196>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	691a      	ldr	r2, [r3, #16]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb4:	b2d2      	uxtb	r2, r2
 8004fb6:	701a      	strb	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fbc:	1c5a      	adds	r2, r3, #1
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	625a      	str	r2, [r3, #36]	@ 0x24
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 0201 	bic.w	r2, r2, #1
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7fe fec3 	bl	8003d5e <HAL_I2C_AbortCpltCallback>
 8004fd8:	e015      	b.n	8005006 <I2C_ITError+0x1da>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	695b      	ldr	r3, [r3, #20]
 8004fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fe4:	2b40      	cmp	r3, #64	@ 0x40
 8004fe6:	d10b      	bne.n	8005000 <I2C_ITError+0x1d4>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	691a      	ldr	r2, [r3, #16]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff2:	b2d2      	uxtb	r2, r2
 8004ff4:	701a      	strb	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffa:	1c5a      	adds	r2, r3, #1
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	625a      	str	r2, [r3, #36]	@ 0x24
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f7fd fbd5 	bl	80027b0 <HAL_I2C_ErrorCallback>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500a:	60bb      	str	r3, [r7, #8]
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10e      	bne.n	8005034 <I2C_ITError+0x208>
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d109      	bne.n	8005034 <I2C_ITError+0x208>
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f003 0304 	and.w	r3, r3, #4
 8005026:	2b00      	cmp	r3, #0
 8005028:	d104      	bne.n	8005034 <I2C_ITError+0x208>
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	f003 0308 	and.w	r3, r3, #8
 8005030:	2b00      	cmp	r3, #0
 8005032:	d007      	beq.n	8005044 <I2C_ITError+0x218>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005042:	605a      	str	r2, [r3, #4]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800504a:	73fb      	strb	r3, [r7, #15]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005050:	f003 0304 	and.w	r3, r3, #4
 8005054:	2b04      	cmp	r3, #4
 8005056:	d113      	bne.n	8005080 <I2C_ITError+0x254>
 8005058:	7bfb      	ldrb	r3, [r7, #15]
 800505a:	2b28      	cmp	r3, #40	@ 0x28
 800505c:	d110      	bne.n	8005080 <I2C_ITError+0x254>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a0a      	ldr	r2, [pc, #40]	@ (800508c <I2C_ITError+0x260>)
 8005062:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	631a      	str	r2, [r3, #48]	@ 0x30
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2220      	movs	r2, #32
 800506e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7fd faec 	bl	8002658 <HAL_I2C_ListenCpltCallback>
 8005080:	bf00      	nop
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	08005091 	.word	0x08005091
 800508c:	ffff0000 	.word	0xffff0000

08005090 <I2C_DMAAbort>:
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	2300      	movs	r3, #0
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a0:	617b      	str	r3, [r7, #20]
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050a8:	74fb      	strb	r3, [r7, #19]
 80050aa:	4b4b      	ldr	r3, [pc, #300]	@ (80051d8 <I2C_DMAAbort+0x148>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	08db      	lsrs	r3, r3, #3
 80050b0:	4a4a      	ldr	r2, [pc, #296]	@ (80051dc <I2C_DMAAbort+0x14c>)
 80050b2:	fba2 2303 	umull	r2, r3, r2, r3
 80050b6:	0a1a      	lsrs	r2, r3, #8
 80050b8:	4613      	mov	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	00da      	lsls	r2, r3, #3
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	60fb      	str	r3, [r7, #12]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d106      	bne.n	80050d8 <I2C_DMAAbort+0x48>
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ce:	f043 0220 	orr.w	r2, r3, #32
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80050d6:	e00a      	b.n	80050ee <I2C_DMAAbort+0x5e>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	3b01      	subs	r3, #1
 80050dc:	60fb      	str	r3, [r7, #12]
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050ec:	d0ea      	beq.n	80050c4 <I2C_DMAAbort+0x34>
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <I2C_DMAAbort+0x6e>
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050fa:	2200      	movs	r2, #0
 80050fc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005102:	2b00      	cmp	r3, #0
 8005104:	d003      	beq.n	800510e <I2C_DMAAbort+0x7e>
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800510a:	2200      	movs	r2, #0
 800510c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2200      	movs	r2, #0
 8005122:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005128:	2b00      	cmp	r3, #0
 800512a:	d003      	beq.n	8005134 <I2C_DMAAbort+0xa4>
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005130:	2200      	movs	r2, #0
 8005132:	651a      	str	r2, [r3, #80]	@ 0x50
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005138:	2b00      	cmp	r3, #0
 800513a:	d003      	beq.n	8005144 <I2C_DMAAbort+0xb4>
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005140:	2200      	movs	r2, #0
 8005142:	651a      	str	r2, [r3, #80]	@ 0x50
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 0201 	bic.w	r2, r2, #1
 8005152:	601a      	str	r2, [r3, #0]
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b60      	cmp	r3, #96	@ 0x60
 800515e:	d10e      	bne.n	800517e <I2C_DMAAbort+0xee>
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	2220      	movs	r2, #32
 8005164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	2200      	movs	r2, #0
 8005174:	641a      	str	r2, [r3, #64]	@ 0x40
 8005176:	6978      	ldr	r0, [r7, #20]
 8005178:	f7fe fdf1 	bl	8003d5e <HAL_I2C_AbortCpltCallback>
 800517c:	e027      	b.n	80051ce <I2C_DMAAbort+0x13e>
 800517e:	7cfb      	ldrb	r3, [r7, #19]
 8005180:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005184:	2b28      	cmp	r3, #40	@ 0x28
 8005186:	d117      	bne.n	80051b8 <I2C_DMAAbort+0x128>
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0201 	orr.w	r2, r2, #1
 8005196:	601a      	str	r2, [r3, #0]
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80051a6:	601a      	str	r2, [r3, #0]
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	2200      	movs	r2, #0
 80051ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2228      	movs	r2, #40	@ 0x28
 80051b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80051b6:	e007      	b.n	80051c8 <I2C_DMAAbort+0x138>
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	2220      	movs	r2, #32
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051c8:	6978      	ldr	r0, [r7, #20]
 80051ca:	f7fd faf1 	bl	80027b0 <HAL_I2C_ErrorCallback>
 80051ce:	bf00      	nop
 80051d0:	3718      	adds	r7, #24
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	2000019c 	.word	0x2000019c
 80051dc:	14f8b589 	.word	0x14f8b589

080051e0 <I2C_WaitOnSTOPRequestThroughIT>:
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	2300      	movs	r3, #0
 80051ea:	60fb      	str	r3, [r7, #12]
 80051ec:	4b13      	ldr	r3, [pc, #76]	@ (800523c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	08db      	lsrs	r3, r3, #3
 80051f2:	4a13      	ldr	r2, [pc, #76]	@ (8005240 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80051f4:	fba2 2303 	umull	r2, r3, r2, r3
 80051f8:	0a1a      	lsrs	r2, r3, #8
 80051fa:	4613      	mov	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	3b01      	subs	r3, #1
 8005206:	60fb      	str	r3, [r7, #12]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d107      	bne.n	800521e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005212:	f043 0220 	orr.w	r2, r3, #32
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	641a      	str	r2, [r3, #64]	@ 0x40
 800521a:	2301      	movs	r3, #1
 800521c:	e008      	b.n	8005230 <I2C_WaitOnSTOPRequestThroughIT+0x50>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005228:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800522c:	d0e9      	beq.n	8005202 <I2C_WaitOnSTOPRequestThroughIT+0x22>
 800522e:	2300      	movs	r3, #0
 8005230:	4618      	mov	r0, r3
 8005232:	3714      	adds	r7, #20
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr
 800523c:	2000019c 	.word	0x2000019c
 8005240:	14f8b589 	.word	0x14f8b589

08005244 <I2C_ConvertOtherXferOptions>:
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005250:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005254:	d103      	bne.n	800525e <I2C_ConvertOtherXferOptions+0x1a>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800525c:	e007      	b.n	800526e <I2C_ConvertOtherXferOptions+0x2a>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005262:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005266:	d102      	bne.n	800526e <I2C_ConvertOtherXferOptions+0x2a>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2208      	movs	r2, #8
 800526c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800526e:	bf00      	nop
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
	...

0800527c <HAL_RCC_ClockConfig>:
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d101      	bne.n	8005290 <HAL_RCC_ClockConfig+0x14>
 800528c:	2301      	movs	r3, #1
 800528e:	e0cc      	b.n	800542a <HAL_RCC_ClockConfig+0x1ae>
 8005290:	4b68      	ldr	r3, [pc, #416]	@ (8005434 <HAL_RCC_ClockConfig+0x1b8>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 030f 	and.w	r3, r3, #15
 8005298:	683a      	ldr	r2, [r7, #0]
 800529a:	429a      	cmp	r2, r3
 800529c:	d90c      	bls.n	80052b8 <HAL_RCC_ClockConfig+0x3c>
 800529e:	4b65      	ldr	r3, [pc, #404]	@ (8005434 <HAL_RCC_ClockConfig+0x1b8>)
 80052a0:	683a      	ldr	r2, [r7, #0]
 80052a2:	b2d2      	uxtb	r2, r2
 80052a4:	701a      	strb	r2, [r3, #0]
 80052a6:	4b63      	ldr	r3, [pc, #396]	@ (8005434 <HAL_RCC_ClockConfig+0x1b8>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 030f 	and.w	r3, r3, #15
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d001      	beq.n	80052b8 <HAL_RCC_ClockConfig+0x3c>
 80052b4:	2301      	movs	r3, #1
 80052b6:	e0b8      	b.n	800542a <HAL_RCC_ClockConfig+0x1ae>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d020      	beq.n	8005306 <HAL_RCC_ClockConfig+0x8a>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d005      	beq.n	80052dc <HAL_RCC_ClockConfig+0x60>
 80052d0:	4b59      	ldr	r3, [pc, #356]	@ (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	4a58      	ldr	r2, [pc, #352]	@ (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 80052d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80052da:	6093      	str	r3, [r2, #8]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0308 	and.w	r3, r3, #8
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d005      	beq.n	80052f4 <HAL_RCC_ClockConfig+0x78>
 80052e8:	4b53      	ldr	r3, [pc, #332]	@ (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	4a52      	ldr	r2, [pc, #328]	@ (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 80052ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80052f2:	6093      	str	r3, [r2, #8]
 80052f4:	4b50      	ldr	r3, [pc, #320]	@ (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	494d      	ldr	r1, [pc, #308]	@ (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 8005302:	4313      	orrs	r3, r2
 8005304:	608b      	str	r3, [r1, #8]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	2b00      	cmp	r3, #0
 8005310:	d044      	beq.n	800539c <HAL_RCC_ClockConfig+0x120>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d107      	bne.n	800532a <HAL_RCC_ClockConfig+0xae>
 800531a:	4b47      	ldr	r3, [pc, #284]	@ (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d119      	bne.n	800535a <HAL_RCC_ClockConfig+0xde>
 8005326:	2301      	movs	r3, #1
 8005328:	e07f      	b.n	800542a <HAL_RCC_ClockConfig+0x1ae>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	2b02      	cmp	r3, #2
 8005330:	d003      	beq.n	800533a <HAL_RCC_ClockConfig+0xbe>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	2b03      	cmp	r3, #3
 8005338:	d107      	bne.n	800534a <HAL_RCC_ClockConfig+0xce>
 800533a:	4b3f      	ldr	r3, [pc, #252]	@ (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d109      	bne.n	800535a <HAL_RCC_ClockConfig+0xde>
 8005346:	2301      	movs	r3, #1
 8005348:	e06f      	b.n	800542a <HAL_RCC_ClockConfig+0x1ae>
 800534a:	4b3b      	ldr	r3, [pc, #236]	@ (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <HAL_RCC_ClockConfig+0xde>
 8005356:	2301      	movs	r3, #1
 8005358:	e067      	b.n	800542a <HAL_RCC_ClockConfig+0x1ae>
 800535a:	4b37      	ldr	r3, [pc, #220]	@ (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f023 0203 	bic.w	r2, r3, #3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	4934      	ldr	r1, [pc, #208]	@ (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 8005368:	4313      	orrs	r3, r2
 800536a:	608b      	str	r3, [r1, #8]
 800536c:	f7fd fc76 	bl	8002c5c <HAL_GetTick>
 8005370:	60f8      	str	r0, [r7, #12]
 8005372:	e00a      	b.n	800538a <HAL_RCC_ClockConfig+0x10e>
 8005374:	f7fd fc72 	bl	8002c5c <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005382:	4293      	cmp	r3, r2
 8005384:	d901      	bls.n	800538a <HAL_RCC_ClockConfig+0x10e>
 8005386:	2303      	movs	r3, #3
 8005388:	e04f      	b.n	800542a <HAL_RCC_ClockConfig+0x1ae>
 800538a:	4b2b      	ldr	r3, [pc, #172]	@ (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f003 020c 	and.w	r2, r3, #12
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	429a      	cmp	r2, r3
 800539a:	d1eb      	bne.n	8005374 <HAL_RCC_ClockConfig+0xf8>
 800539c:	4b25      	ldr	r3, [pc, #148]	@ (8005434 <HAL_RCC_ClockConfig+0x1b8>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 030f 	and.w	r3, r3, #15
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d20c      	bcs.n	80053c4 <HAL_RCC_ClockConfig+0x148>
 80053aa:	4b22      	ldr	r3, [pc, #136]	@ (8005434 <HAL_RCC_ClockConfig+0x1b8>)
 80053ac:	683a      	ldr	r2, [r7, #0]
 80053ae:	b2d2      	uxtb	r2, r2
 80053b0:	701a      	strb	r2, [r3, #0]
 80053b2:	4b20      	ldr	r3, [pc, #128]	@ (8005434 <HAL_RCC_ClockConfig+0x1b8>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 030f 	and.w	r3, r3, #15
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d001      	beq.n	80053c4 <HAL_RCC_ClockConfig+0x148>
 80053c0:	2301      	movs	r3, #1
 80053c2:	e032      	b.n	800542a <HAL_RCC_ClockConfig+0x1ae>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0304 	and.w	r3, r3, #4
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d008      	beq.n	80053e2 <HAL_RCC_ClockConfig+0x166>
 80053d0:	4b19      	ldr	r3, [pc, #100]	@ (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	4916      	ldr	r1, [pc, #88]	@ (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	608b      	str	r3, [r1, #8]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0308 	and.w	r3, r3, #8
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d009      	beq.n	8005402 <HAL_RCC_ClockConfig+0x186>
 80053ee:	4b12      	ldr	r3, [pc, #72]	@ (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	00db      	lsls	r3, r3, #3
 80053fc:	490e      	ldr	r1, [pc, #56]	@ (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	608b      	str	r3, [r1, #8]
 8005402:	f000 f855 	bl	80054b0 <HAL_RCC_GetSysClockFreq>
 8005406:	4602      	mov	r2, r0
 8005408:	4b0b      	ldr	r3, [pc, #44]	@ (8005438 <HAL_RCC_ClockConfig+0x1bc>)
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	091b      	lsrs	r3, r3, #4
 800540e:	f003 030f 	and.w	r3, r3, #15
 8005412:	490a      	ldr	r1, [pc, #40]	@ (800543c <HAL_RCC_ClockConfig+0x1c0>)
 8005414:	5ccb      	ldrb	r3, [r1, r3]
 8005416:	fa22 f303 	lsr.w	r3, r2, r3
 800541a:	4a09      	ldr	r2, [pc, #36]	@ (8005440 <HAL_RCC_ClockConfig+0x1c4>)
 800541c:	6013      	str	r3, [r2, #0]
 800541e:	4b09      	ldr	r3, [pc, #36]	@ (8005444 <HAL_RCC_ClockConfig+0x1c8>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4618      	mov	r0, r3
 8005424:	f7fd fbd6 	bl	8002bd4 <HAL_InitTick>
 8005428:	2300      	movs	r3, #0
 800542a:	4618      	mov	r0, r3
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	40023c00 	.word	0x40023c00
 8005438:	40023800 	.word	0x40023800
 800543c:	0800b7ec 	.word	0x0800b7ec
 8005440:	2000019c 	.word	0x2000019c
 8005444:	200001a0 	.word	0x200001a0

08005448 <HAL_RCC_GetHCLKFreq>:
 8005448:	b480      	push	{r7}
 800544a:	af00      	add	r7, sp, #0
 800544c:	4b03      	ldr	r3, [pc, #12]	@ (800545c <HAL_RCC_GetHCLKFreq+0x14>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4618      	mov	r0, r3
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	2000019c 	.word	0x2000019c

08005460 <HAL_RCC_GetPCLK1Freq>:
 8005460:	b580      	push	{r7, lr}
 8005462:	af00      	add	r7, sp, #0
 8005464:	f7ff fff0 	bl	8005448 <HAL_RCC_GetHCLKFreq>
 8005468:	4602      	mov	r2, r0
 800546a:	4b05      	ldr	r3, [pc, #20]	@ (8005480 <HAL_RCC_GetPCLK1Freq+0x20>)
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	0a9b      	lsrs	r3, r3, #10
 8005470:	f003 0307 	and.w	r3, r3, #7
 8005474:	4903      	ldr	r1, [pc, #12]	@ (8005484 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005476:	5ccb      	ldrb	r3, [r1, r3]
 8005478:	fa22 f303 	lsr.w	r3, r2, r3
 800547c:	4618      	mov	r0, r3
 800547e:	bd80      	pop	{r7, pc}
 8005480:	40023800 	.word	0x40023800
 8005484:	0800b7fc 	.word	0x0800b7fc

08005488 <HAL_RCC_GetPCLK2Freq>:
 8005488:	b580      	push	{r7, lr}
 800548a:	af00      	add	r7, sp, #0
 800548c:	f7ff ffdc 	bl	8005448 <HAL_RCC_GetHCLKFreq>
 8005490:	4602      	mov	r2, r0
 8005492:	4b05      	ldr	r3, [pc, #20]	@ (80054a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	0b5b      	lsrs	r3, r3, #13
 8005498:	f003 0307 	and.w	r3, r3, #7
 800549c:	4903      	ldr	r1, [pc, #12]	@ (80054ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800549e:	5ccb      	ldrb	r3, [r1, r3]
 80054a0:	fa22 f303 	lsr.w	r3, r2, r3
 80054a4:	4618      	mov	r0, r3
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	40023800 	.word	0x40023800
 80054ac:	0800b7fc 	.word	0x0800b7fc

080054b0 <HAL_RCC_GetSysClockFreq>:
 80054b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054b4:	b0ae      	sub	sp, #184	@ 0xb8
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	2300      	movs	r3, #0
 80054ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80054be:	2300      	movs	r3, #0
 80054c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80054c4:	2300      	movs	r3, #0
 80054c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80054ca:	2300      	movs	r3, #0
 80054cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80054d0:	2300      	movs	r3, #0
 80054d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80054d6:	4bcb      	ldr	r3, [pc, #812]	@ (8005804 <HAL_RCC_GetSysClockFreq+0x354>)
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f003 030c 	and.w	r3, r3, #12
 80054de:	2b0c      	cmp	r3, #12
 80054e0:	f200 8206 	bhi.w	80058f0 <HAL_RCC_GetSysClockFreq+0x440>
 80054e4:	a201      	add	r2, pc, #4	@ (adr r2, 80054ec <HAL_RCC_GetSysClockFreq+0x3c>)
 80054e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ea:	bf00      	nop
 80054ec:	08005521 	.word	0x08005521
 80054f0:	080058f1 	.word	0x080058f1
 80054f4:	080058f1 	.word	0x080058f1
 80054f8:	080058f1 	.word	0x080058f1
 80054fc:	08005529 	.word	0x08005529
 8005500:	080058f1 	.word	0x080058f1
 8005504:	080058f1 	.word	0x080058f1
 8005508:	080058f1 	.word	0x080058f1
 800550c:	08005531 	.word	0x08005531
 8005510:	080058f1 	.word	0x080058f1
 8005514:	080058f1 	.word	0x080058f1
 8005518:	080058f1 	.word	0x080058f1
 800551c:	08005721 	.word	0x08005721
 8005520:	4bb9      	ldr	r3, [pc, #740]	@ (8005808 <HAL_RCC_GetSysClockFreq+0x358>)
 8005522:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005526:	e1e7      	b.n	80058f8 <HAL_RCC_GetSysClockFreq+0x448>
 8005528:	4bb8      	ldr	r3, [pc, #736]	@ (800580c <HAL_RCC_GetSysClockFreq+0x35c>)
 800552a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800552e:	e1e3      	b.n	80058f8 <HAL_RCC_GetSysClockFreq+0x448>
 8005530:	4bb4      	ldr	r3, [pc, #720]	@ (8005804 <HAL_RCC_GetSysClockFreq+0x354>)
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005538:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800553c:	4bb1      	ldr	r3, [pc, #708]	@ (8005804 <HAL_RCC_GetSysClockFreq+0x354>)
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d071      	beq.n	800562c <HAL_RCC_GetSysClockFreq+0x17c>
 8005548:	4bae      	ldr	r3, [pc, #696]	@ (8005804 <HAL_RCC_GetSysClockFreq+0x354>)
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	099b      	lsrs	r3, r3, #6
 800554e:	2200      	movs	r2, #0
 8005550:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005554:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005558:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800555c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005560:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005564:	2300      	movs	r3, #0
 8005566:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800556a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800556e:	4622      	mov	r2, r4
 8005570:	462b      	mov	r3, r5
 8005572:	f04f 0000 	mov.w	r0, #0
 8005576:	f04f 0100 	mov.w	r1, #0
 800557a:	0159      	lsls	r1, r3, #5
 800557c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005580:	0150      	lsls	r0, r2, #5
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
 8005586:	4621      	mov	r1, r4
 8005588:	1a51      	subs	r1, r2, r1
 800558a:	6439      	str	r1, [r7, #64]	@ 0x40
 800558c:	4629      	mov	r1, r5
 800558e:	eb63 0301 	sbc.w	r3, r3, r1
 8005592:	647b      	str	r3, [r7, #68]	@ 0x44
 8005594:	f04f 0200 	mov.w	r2, #0
 8005598:	f04f 0300 	mov.w	r3, #0
 800559c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80055a0:	4649      	mov	r1, r9
 80055a2:	018b      	lsls	r3, r1, #6
 80055a4:	4641      	mov	r1, r8
 80055a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055aa:	4641      	mov	r1, r8
 80055ac:	018a      	lsls	r2, r1, #6
 80055ae:	4641      	mov	r1, r8
 80055b0:	1a51      	subs	r1, r2, r1
 80055b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80055b4:	4649      	mov	r1, r9
 80055b6:	eb63 0301 	sbc.w	r3, r3, r1
 80055ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055bc:	f04f 0200 	mov.w	r2, #0
 80055c0:	f04f 0300 	mov.w	r3, #0
 80055c4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80055c8:	4649      	mov	r1, r9
 80055ca:	00cb      	lsls	r3, r1, #3
 80055cc:	4641      	mov	r1, r8
 80055ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055d2:	4641      	mov	r1, r8
 80055d4:	00ca      	lsls	r2, r1, #3
 80055d6:	4610      	mov	r0, r2
 80055d8:	4619      	mov	r1, r3
 80055da:	4603      	mov	r3, r0
 80055dc:	4622      	mov	r2, r4
 80055de:	189b      	adds	r3, r3, r2
 80055e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80055e2:	462b      	mov	r3, r5
 80055e4:	460a      	mov	r2, r1
 80055e6:	eb42 0303 	adc.w	r3, r2, r3
 80055ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80055ec:	f04f 0200 	mov.w	r2, #0
 80055f0:	f04f 0300 	mov.w	r3, #0
 80055f4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80055f8:	4629      	mov	r1, r5
 80055fa:	024b      	lsls	r3, r1, #9
 80055fc:	4621      	mov	r1, r4
 80055fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005602:	4621      	mov	r1, r4
 8005604:	024a      	lsls	r2, r1, #9
 8005606:	4610      	mov	r0, r2
 8005608:	4619      	mov	r1, r3
 800560a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800560e:	2200      	movs	r2, #0
 8005610:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005614:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005618:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800561c:	f7fa fdfa 	bl	8000214 <__aeabi_uldivmod>
 8005620:	4602      	mov	r2, r0
 8005622:	460b      	mov	r3, r1
 8005624:	4613      	mov	r3, r2
 8005626:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800562a:	e067      	b.n	80056fc <HAL_RCC_GetSysClockFreq+0x24c>
 800562c:	4b75      	ldr	r3, [pc, #468]	@ (8005804 <HAL_RCC_GetSysClockFreq+0x354>)
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	099b      	lsrs	r3, r3, #6
 8005632:	2200      	movs	r2, #0
 8005634:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005638:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800563c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005644:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005646:	2300      	movs	r3, #0
 8005648:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800564a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800564e:	4622      	mov	r2, r4
 8005650:	462b      	mov	r3, r5
 8005652:	f04f 0000 	mov.w	r0, #0
 8005656:	f04f 0100 	mov.w	r1, #0
 800565a:	0159      	lsls	r1, r3, #5
 800565c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005660:	0150      	lsls	r0, r2, #5
 8005662:	4602      	mov	r2, r0
 8005664:	460b      	mov	r3, r1
 8005666:	4621      	mov	r1, r4
 8005668:	1a51      	subs	r1, r2, r1
 800566a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800566c:	4629      	mov	r1, r5
 800566e:	eb63 0301 	sbc.w	r3, r3, r1
 8005672:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005674:	f04f 0200 	mov.w	r2, #0
 8005678:	f04f 0300 	mov.w	r3, #0
 800567c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005680:	4649      	mov	r1, r9
 8005682:	018b      	lsls	r3, r1, #6
 8005684:	4641      	mov	r1, r8
 8005686:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800568a:	4641      	mov	r1, r8
 800568c:	018a      	lsls	r2, r1, #6
 800568e:	4641      	mov	r1, r8
 8005690:	ebb2 0a01 	subs.w	sl, r2, r1
 8005694:	4649      	mov	r1, r9
 8005696:	eb63 0b01 	sbc.w	fp, r3, r1
 800569a:	f04f 0200 	mov.w	r2, #0
 800569e:	f04f 0300 	mov.w	r3, #0
 80056a2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80056a6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056ae:	4692      	mov	sl, r2
 80056b0:	469b      	mov	fp, r3
 80056b2:	4623      	mov	r3, r4
 80056b4:	eb1a 0303 	adds.w	r3, sl, r3
 80056b8:	623b      	str	r3, [r7, #32]
 80056ba:	462b      	mov	r3, r5
 80056bc:	eb4b 0303 	adc.w	r3, fp, r3
 80056c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80056c2:	f04f 0200 	mov.w	r2, #0
 80056c6:	f04f 0300 	mov.w	r3, #0
 80056ca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80056ce:	4629      	mov	r1, r5
 80056d0:	028b      	lsls	r3, r1, #10
 80056d2:	4621      	mov	r1, r4
 80056d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056d8:	4621      	mov	r1, r4
 80056da:	028a      	lsls	r2, r1, #10
 80056dc:	4610      	mov	r0, r2
 80056de:	4619      	mov	r1, r3
 80056e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056e4:	2200      	movs	r2, #0
 80056e6:	673b      	str	r3, [r7, #112]	@ 0x70
 80056e8:	677a      	str	r2, [r7, #116]	@ 0x74
 80056ea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80056ee:	f7fa fd91 	bl	8000214 <__aeabi_uldivmod>
 80056f2:	4602      	mov	r2, r0
 80056f4:	460b      	mov	r3, r1
 80056f6:	4613      	mov	r3, r2
 80056f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056fc:	4b41      	ldr	r3, [pc, #260]	@ (8005804 <HAL_RCC_GetSysClockFreq+0x354>)
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	0c1b      	lsrs	r3, r3, #16
 8005702:	f003 0303 	and.w	r3, r3, #3
 8005706:	3301      	adds	r3, #1
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800570e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005712:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005716:	fbb2 f3f3 	udiv	r3, r2, r3
 800571a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800571e:	e0eb      	b.n	80058f8 <HAL_RCC_GetSysClockFreq+0x448>
 8005720:	4b38      	ldr	r3, [pc, #224]	@ (8005804 <HAL_RCC_GetSysClockFreq+0x354>)
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005728:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800572c:	4b35      	ldr	r3, [pc, #212]	@ (8005804 <HAL_RCC_GetSysClockFreq+0x354>)
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d06b      	beq.n	8005810 <HAL_RCC_GetSysClockFreq+0x360>
 8005738:	4b32      	ldr	r3, [pc, #200]	@ (8005804 <HAL_RCC_GetSysClockFreq+0x354>)
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	099b      	lsrs	r3, r3, #6
 800573e:	2200      	movs	r2, #0
 8005740:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005742:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005744:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800574a:	663b      	str	r3, [r7, #96]	@ 0x60
 800574c:	2300      	movs	r3, #0
 800574e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005750:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005754:	4622      	mov	r2, r4
 8005756:	462b      	mov	r3, r5
 8005758:	f04f 0000 	mov.w	r0, #0
 800575c:	f04f 0100 	mov.w	r1, #0
 8005760:	0159      	lsls	r1, r3, #5
 8005762:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005766:	0150      	lsls	r0, r2, #5
 8005768:	4602      	mov	r2, r0
 800576a:	460b      	mov	r3, r1
 800576c:	4621      	mov	r1, r4
 800576e:	1a51      	subs	r1, r2, r1
 8005770:	61b9      	str	r1, [r7, #24]
 8005772:	4629      	mov	r1, r5
 8005774:	eb63 0301 	sbc.w	r3, r3, r1
 8005778:	61fb      	str	r3, [r7, #28]
 800577a:	f04f 0200 	mov.w	r2, #0
 800577e:	f04f 0300 	mov.w	r3, #0
 8005782:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005786:	4659      	mov	r1, fp
 8005788:	018b      	lsls	r3, r1, #6
 800578a:	4651      	mov	r1, sl
 800578c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005790:	4651      	mov	r1, sl
 8005792:	018a      	lsls	r2, r1, #6
 8005794:	4651      	mov	r1, sl
 8005796:	ebb2 0801 	subs.w	r8, r2, r1
 800579a:	4659      	mov	r1, fp
 800579c:	eb63 0901 	sbc.w	r9, r3, r1
 80057a0:	f04f 0200 	mov.w	r2, #0
 80057a4:	f04f 0300 	mov.w	r3, #0
 80057a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057b4:	4690      	mov	r8, r2
 80057b6:	4699      	mov	r9, r3
 80057b8:	4623      	mov	r3, r4
 80057ba:	eb18 0303 	adds.w	r3, r8, r3
 80057be:	613b      	str	r3, [r7, #16]
 80057c0:	462b      	mov	r3, r5
 80057c2:	eb49 0303 	adc.w	r3, r9, r3
 80057c6:	617b      	str	r3, [r7, #20]
 80057c8:	f04f 0200 	mov.w	r2, #0
 80057cc:	f04f 0300 	mov.w	r3, #0
 80057d0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80057d4:	4629      	mov	r1, r5
 80057d6:	024b      	lsls	r3, r1, #9
 80057d8:	4621      	mov	r1, r4
 80057da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80057de:	4621      	mov	r1, r4
 80057e0:	024a      	lsls	r2, r1, #9
 80057e2:	4610      	mov	r0, r2
 80057e4:	4619      	mov	r1, r3
 80057e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80057ea:	2200      	movs	r2, #0
 80057ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80057ee:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80057f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80057f4:	f7fa fd0e 	bl	8000214 <__aeabi_uldivmod>
 80057f8:	4602      	mov	r2, r0
 80057fa:	460b      	mov	r3, r1
 80057fc:	4613      	mov	r3, r2
 80057fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005802:	e065      	b.n	80058d0 <HAL_RCC_GetSysClockFreq+0x420>
 8005804:	40023800 	.word	0x40023800
 8005808:	00f42400 	.word	0x00f42400
 800580c:	007a1200 	.word	0x007a1200
 8005810:	4b3d      	ldr	r3, [pc, #244]	@ (8005908 <HAL_RCC_GetSysClockFreq+0x458>)
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	099b      	lsrs	r3, r3, #6
 8005816:	2200      	movs	r2, #0
 8005818:	4618      	mov	r0, r3
 800581a:	4611      	mov	r1, r2
 800581c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005820:	653b      	str	r3, [r7, #80]	@ 0x50
 8005822:	2300      	movs	r3, #0
 8005824:	657b      	str	r3, [r7, #84]	@ 0x54
 8005826:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800582a:	4642      	mov	r2, r8
 800582c:	464b      	mov	r3, r9
 800582e:	f04f 0000 	mov.w	r0, #0
 8005832:	f04f 0100 	mov.w	r1, #0
 8005836:	0159      	lsls	r1, r3, #5
 8005838:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800583c:	0150      	lsls	r0, r2, #5
 800583e:	4602      	mov	r2, r0
 8005840:	460b      	mov	r3, r1
 8005842:	4641      	mov	r1, r8
 8005844:	1a51      	subs	r1, r2, r1
 8005846:	60b9      	str	r1, [r7, #8]
 8005848:	4649      	mov	r1, r9
 800584a:	eb63 0301 	sbc.w	r3, r3, r1
 800584e:	60fb      	str	r3, [r7, #12]
 8005850:	f04f 0200 	mov.w	r2, #0
 8005854:	f04f 0300 	mov.w	r3, #0
 8005858:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800585c:	4659      	mov	r1, fp
 800585e:	018b      	lsls	r3, r1, #6
 8005860:	4651      	mov	r1, sl
 8005862:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005866:	4651      	mov	r1, sl
 8005868:	018a      	lsls	r2, r1, #6
 800586a:	4651      	mov	r1, sl
 800586c:	1a54      	subs	r4, r2, r1
 800586e:	4659      	mov	r1, fp
 8005870:	eb63 0501 	sbc.w	r5, r3, r1
 8005874:	f04f 0200 	mov.w	r2, #0
 8005878:	f04f 0300 	mov.w	r3, #0
 800587c:	00eb      	lsls	r3, r5, #3
 800587e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005882:	00e2      	lsls	r2, r4, #3
 8005884:	4614      	mov	r4, r2
 8005886:	461d      	mov	r5, r3
 8005888:	4643      	mov	r3, r8
 800588a:	18e3      	adds	r3, r4, r3
 800588c:	603b      	str	r3, [r7, #0]
 800588e:	464b      	mov	r3, r9
 8005890:	eb45 0303 	adc.w	r3, r5, r3
 8005894:	607b      	str	r3, [r7, #4]
 8005896:	f04f 0200 	mov.w	r2, #0
 800589a:	f04f 0300 	mov.w	r3, #0
 800589e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80058a2:	4629      	mov	r1, r5
 80058a4:	028b      	lsls	r3, r1, #10
 80058a6:	4621      	mov	r1, r4
 80058a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80058ac:	4621      	mov	r1, r4
 80058ae:	028a      	lsls	r2, r1, #10
 80058b0:	4610      	mov	r0, r2
 80058b2:	4619      	mov	r1, r3
 80058b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80058b8:	2200      	movs	r2, #0
 80058ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058bc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80058be:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80058c2:	f7fa fca7 	bl	8000214 <__aeabi_uldivmod>
 80058c6:	4602      	mov	r2, r0
 80058c8:	460b      	mov	r3, r1
 80058ca:	4613      	mov	r3, r2
 80058cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058d0:	4b0d      	ldr	r3, [pc, #52]	@ (8005908 <HAL_RCC_GetSysClockFreq+0x458>)
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	0f1b      	lsrs	r3, r3, #28
 80058d6:	f003 0307 	and.w	r3, r3, #7
 80058da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80058de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80058e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80058e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80058ee:	e003      	b.n	80058f8 <HAL_RCC_GetSysClockFreq+0x448>
 80058f0:	4b06      	ldr	r3, [pc, #24]	@ (800590c <HAL_RCC_GetSysClockFreq+0x45c>)
 80058f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80058f6:	bf00      	nop
 80058f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80058fc:	4618      	mov	r0, r3
 80058fe:	37b8      	adds	r7, #184	@ 0xb8
 8005900:	46bd      	mov	sp, r7
 8005902:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005906:	bf00      	nop
 8005908:	40023800 	.word	0x40023800
 800590c:	00f42400 	.word	0x00f42400

08005910 <HAL_RCC_OscConfig>:
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_RCC_OscConfig+0x12>
 800591e:	2301      	movs	r3, #1
 8005920:	e28d      	b.n	8005e3e <HAL_RCC_OscConfig+0x52e>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	f000 8083 	beq.w	8005a36 <HAL_RCC_OscConfig+0x126>
 8005930:	4b94      	ldr	r3, [pc, #592]	@ (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f003 030c 	and.w	r3, r3, #12
 8005938:	2b04      	cmp	r3, #4
 800593a:	d019      	beq.n	8005970 <HAL_RCC_OscConfig+0x60>
 800593c:	4b91      	ldr	r3, [pc, #580]	@ (8005b84 <HAL_RCC_OscConfig+0x274>)
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f003 030c 	and.w	r3, r3, #12
 8005944:	2b08      	cmp	r3, #8
 8005946:	d106      	bne.n	8005956 <HAL_RCC_OscConfig+0x46>
 8005948:	4b8e      	ldr	r3, [pc, #568]	@ (8005b84 <HAL_RCC_OscConfig+0x274>)
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005950:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005954:	d00c      	beq.n	8005970 <HAL_RCC_OscConfig+0x60>
 8005956:	4b8b      	ldr	r3, [pc, #556]	@ (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f003 030c 	and.w	r3, r3, #12
 800595e:	2b0c      	cmp	r3, #12
 8005960:	d112      	bne.n	8005988 <HAL_RCC_OscConfig+0x78>
 8005962:	4b88      	ldr	r3, [pc, #544]	@ (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800596a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800596e:	d10b      	bne.n	8005988 <HAL_RCC_OscConfig+0x78>
 8005970:	4b84      	ldr	r3, [pc, #528]	@ (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d05b      	beq.n	8005a34 <HAL_RCC_OscConfig+0x124>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d157      	bne.n	8005a34 <HAL_RCC_OscConfig+0x124>
 8005984:	2301      	movs	r3, #1
 8005986:	e25a      	b.n	8005e3e <HAL_RCC_OscConfig+0x52e>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005990:	d106      	bne.n	80059a0 <HAL_RCC_OscConfig+0x90>
 8005992:	4b7c      	ldr	r3, [pc, #496]	@ (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a7b      	ldr	r2, [pc, #492]	@ (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	e01d      	b.n	80059dc <HAL_RCC_OscConfig+0xcc>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059a8:	d10c      	bne.n	80059c4 <HAL_RCC_OscConfig+0xb4>
 80059aa:	4b76      	ldr	r3, [pc, #472]	@ (8005b84 <HAL_RCC_OscConfig+0x274>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a75      	ldr	r2, [pc, #468]	@ (8005b84 <HAL_RCC_OscConfig+0x274>)
 80059b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80059b4:	6013      	str	r3, [r2, #0]
 80059b6:	4b73      	ldr	r3, [pc, #460]	@ (8005b84 <HAL_RCC_OscConfig+0x274>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a72      	ldr	r2, [pc, #456]	@ (8005b84 <HAL_RCC_OscConfig+0x274>)
 80059bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059c0:	6013      	str	r3, [r2, #0]
 80059c2:	e00b      	b.n	80059dc <HAL_RCC_OscConfig+0xcc>
 80059c4:	4b6f      	ldr	r3, [pc, #444]	@ (8005b84 <HAL_RCC_OscConfig+0x274>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a6e      	ldr	r2, [pc, #440]	@ (8005b84 <HAL_RCC_OscConfig+0x274>)
 80059ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059ce:	6013      	str	r3, [r2, #0]
 80059d0:	4b6c      	ldr	r3, [pc, #432]	@ (8005b84 <HAL_RCC_OscConfig+0x274>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a6b      	ldr	r2, [pc, #428]	@ (8005b84 <HAL_RCC_OscConfig+0x274>)
 80059d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059da:	6013      	str	r3, [r2, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d013      	beq.n	8005a0c <HAL_RCC_OscConfig+0xfc>
 80059e4:	f7fd f93a 	bl	8002c5c <HAL_GetTick>
 80059e8:	6138      	str	r0, [r7, #16]
 80059ea:	e008      	b.n	80059fe <HAL_RCC_OscConfig+0xee>
 80059ec:	f7fd f936 	bl	8002c5c <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b64      	cmp	r3, #100	@ 0x64
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0xee>
 80059fa:	2303      	movs	r3, #3
 80059fc:	e21f      	b.n	8005e3e <HAL_RCC_OscConfig+0x52e>
 80059fe:	4b61      	ldr	r3, [pc, #388]	@ (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0f0      	beq.n	80059ec <HAL_RCC_OscConfig+0xdc>
 8005a0a:	e014      	b.n	8005a36 <HAL_RCC_OscConfig+0x126>
 8005a0c:	f7fd f926 	bl	8002c5c <HAL_GetTick>
 8005a10:	6138      	str	r0, [r7, #16]
 8005a12:	e008      	b.n	8005a26 <HAL_RCC_OscConfig+0x116>
 8005a14:	f7fd f922 	bl	8002c5c <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	2b64      	cmp	r3, #100	@ 0x64
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_OscConfig+0x116>
 8005a22:	2303      	movs	r3, #3
 8005a24:	e20b      	b.n	8005e3e <HAL_RCC_OscConfig+0x52e>
 8005a26:	4b57      	ldr	r3, [pc, #348]	@ (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1f0      	bne.n	8005a14 <HAL_RCC_OscConfig+0x104>
 8005a32:	e000      	b.n	8005a36 <HAL_RCC_OscConfig+0x126>
 8005a34:	bf00      	nop
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d06f      	beq.n	8005b22 <HAL_RCC_OscConfig+0x212>
 8005a42:	4b50      	ldr	r3, [pc, #320]	@ (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f003 030c 	and.w	r3, r3, #12
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d017      	beq.n	8005a7e <HAL_RCC_OscConfig+0x16e>
 8005a4e:	4b4d      	ldr	r3, [pc, #308]	@ (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f003 030c 	and.w	r3, r3, #12
 8005a56:	2b08      	cmp	r3, #8
 8005a58:	d105      	bne.n	8005a66 <HAL_RCC_OscConfig+0x156>
 8005a5a:	4b4a      	ldr	r3, [pc, #296]	@ (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00b      	beq.n	8005a7e <HAL_RCC_OscConfig+0x16e>
 8005a66:	4b47      	ldr	r3, [pc, #284]	@ (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f003 030c 	and.w	r3, r3, #12
 8005a6e:	2b0c      	cmp	r3, #12
 8005a70:	d11c      	bne.n	8005aac <HAL_RCC_OscConfig+0x19c>
 8005a72:	4b44      	ldr	r3, [pc, #272]	@ (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d116      	bne.n	8005aac <HAL_RCC_OscConfig+0x19c>
 8005a7e:	4b41      	ldr	r3, [pc, #260]	@ (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d005      	beq.n	8005a96 <HAL_RCC_OscConfig+0x186>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d001      	beq.n	8005a96 <HAL_RCC_OscConfig+0x186>
 8005a92:	2301      	movs	r3, #1
 8005a94:	e1d3      	b.n	8005e3e <HAL_RCC_OscConfig+0x52e>
 8005a96:	4b3b      	ldr	r3, [pc, #236]	@ (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	4937      	ldr	r1, [pc, #220]	@ (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	600b      	str	r3, [r1, #0]
 8005aaa:	e03a      	b.n	8005b22 <HAL_RCC_OscConfig+0x212>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d020      	beq.n	8005af6 <HAL_RCC_OscConfig+0x1e6>
 8005ab4:	4b34      	ldr	r3, [pc, #208]	@ (8005b88 <HAL_RCC_OscConfig+0x278>)
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	601a      	str	r2, [r3, #0]
 8005aba:	f7fd f8cf 	bl	8002c5c <HAL_GetTick>
 8005abe:	6138      	str	r0, [r7, #16]
 8005ac0:	e008      	b.n	8005ad4 <HAL_RCC_OscConfig+0x1c4>
 8005ac2:	f7fd f8cb 	bl	8002c5c <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d901      	bls.n	8005ad4 <HAL_RCC_OscConfig+0x1c4>
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e1b4      	b.n	8005e3e <HAL_RCC_OscConfig+0x52e>
 8005ad4:	4b2b      	ldr	r3, [pc, #172]	@ (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0302 	and.w	r3, r3, #2
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d0f0      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x1b2>
 8005ae0:	4b28      	ldr	r3, [pc, #160]	@ (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	00db      	lsls	r3, r3, #3
 8005aee:	4925      	ldr	r1, [pc, #148]	@ (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	600b      	str	r3, [r1, #0]
 8005af4:	e015      	b.n	8005b22 <HAL_RCC_OscConfig+0x212>
 8005af6:	4b24      	ldr	r3, [pc, #144]	@ (8005b88 <HAL_RCC_OscConfig+0x278>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	601a      	str	r2, [r3, #0]
 8005afc:	f7fd f8ae 	bl	8002c5c <HAL_GetTick>
 8005b00:	6138      	str	r0, [r7, #16]
 8005b02:	e008      	b.n	8005b16 <HAL_RCC_OscConfig+0x206>
 8005b04:	f7fd f8aa 	bl	8002c5c <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d901      	bls.n	8005b16 <HAL_RCC_OscConfig+0x206>
 8005b12:	2303      	movs	r3, #3
 8005b14:	e193      	b.n	8005e3e <HAL_RCC_OscConfig+0x52e>
 8005b16:	4b1b      	ldr	r3, [pc, #108]	@ (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1f0      	bne.n	8005b04 <HAL_RCC_OscConfig+0x1f4>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0308 	and.w	r3, r3, #8
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d036      	beq.n	8005b9c <HAL_RCC_OscConfig+0x28c>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d016      	beq.n	8005b64 <HAL_RCC_OscConfig+0x254>
 8005b36:	4b15      	ldr	r3, [pc, #84]	@ (8005b8c <HAL_RCC_OscConfig+0x27c>)
 8005b38:	2201      	movs	r2, #1
 8005b3a:	601a      	str	r2, [r3, #0]
 8005b3c:	f7fd f88e 	bl	8002c5c <HAL_GetTick>
 8005b40:	6138      	str	r0, [r7, #16]
 8005b42:	e008      	b.n	8005b56 <HAL_RCC_OscConfig+0x246>
 8005b44:	f7fd f88a 	bl	8002c5c <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_OscConfig+0x246>
 8005b52:	2303      	movs	r3, #3
 8005b54:	e173      	b.n	8005e3e <HAL_RCC_OscConfig+0x52e>
 8005b56:	4b0b      	ldr	r3, [pc, #44]	@ (8005b84 <HAL_RCC_OscConfig+0x274>)
 8005b58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d0f0      	beq.n	8005b44 <HAL_RCC_OscConfig+0x234>
 8005b62:	e01b      	b.n	8005b9c <HAL_RCC_OscConfig+0x28c>
 8005b64:	4b09      	ldr	r3, [pc, #36]	@ (8005b8c <HAL_RCC_OscConfig+0x27c>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	601a      	str	r2, [r3, #0]
 8005b6a:	f7fd f877 	bl	8002c5c <HAL_GetTick>
 8005b6e:	6138      	str	r0, [r7, #16]
 8005b70:	e00e      	b.n	8005b90 <HAL_RCC_OscConfig+0x280>
 8005b72:	f7fd f873 	bl	8002c5c <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d907      	bls.n	8005b90 <HAL_RCC_OscConfig+0x280>
 8005b80:	2303      	movs	r3, #3
 8005b82:	e15c      	b.n	8005e3e <HAL_RCC_OscConfig+0x52e>
 8005b84:	40023800 	.word	0x40023800
 8005b88:	42470000 	.word	0x42470000
 8005b8c:	42470e80 	.word	0x42470e80
 8005b90:	4b8a      	ldr	r3, [pc, #552]	@ (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005b92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b94:	f003 0302 	and.w	r3, r3, #2
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1ea      	bne.n	8005b72 <HAL_RCC_OscConfig+0x262>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0304 	and.w	r3, r3, #4
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 8097 	beq.w	8005cd8 <HAL_RCC_OscConfig+0x3c8>
 8005baa:	2300      	movs	r3, #0
 8005bac:	75fb      	strb	r3, [r7, #23]
 8005bae:	4b83      	ldr	r3, [pc, #524]	@ (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10f      	bne.n	8005bda <HAL_RCC_OscConfig+0x2ca>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	60bb      	str	r3, [r7, #8]
 8005bbe:	4b7f      	ldr	r3, [pc, #508]	@ (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc2:	4a7e      	ldr	r2, [pc, #504]	@ (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005bc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005bca:	4b7c      	ldr	r3, [pc, #496]	@ (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bd2:	60bb      	str	r3, [r7, #8]
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	75fb      	strb	r3, [r7, #23]
 8005bda:	4b79      	ldr	r3, [pc, #484]	@ (8005dc0 <HAL_RCC_OscConfig+0x4b0>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d118      	bne.n	8005c18 <HAL_RCC_OscConfig+0x308>
 8005be6:	4b76      	ldr	r3, [pc, #472]	@ (8005dc0 <HAL_RCC_OscConfig+0x4b0>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a75      	ldr	r2, [pc, #468]	@ (8005dc0 <HAL_RCC_OscConfig+0x4b0>)
 8005bec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bf0:	6013      	str	r3, [r2, #0]
 8005bf2:	f7fd f833 	bl	8002c5c <HAL_GetTick>
 8005bf6:	6138      	str	r0, [r7, #16]
 8005bf8:	e008      	b.n	8005c0c <HAL_RCC_OscConfig+0x2fc>
 8005bfa:	f7fd f82f 	bl	8002c5c <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d901      	bls.n	8005c0c <HAL_RCC_OscConfig+0x2fc>
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e118      	b.n	8005e3e <HAL_RCC_OscConfig+0x52e>
 8005c0c:	4b6c      	ldr	r3, [pc, #432]	@ (8005dc0 <HAL_RCC_OscConfig+0x4b0>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d0f0      	beq.n	8005bfa <HAL_RCC_OscConfig+0x2ea>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d106      	bne.n	8005c2e <HAL_RCC_OscConfig+0x31e>
 8005c20:	4b66      	ldr	r3, [pc, #408]	@ (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c24:	4a65      	ldr	r2, [pc, #404]	@ (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005c26:	f043 0301 	orr.w	r3, r3, #1
 8005c2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c2c:	e01c      	b.n	8005c68 <HAL_RCC_OscConfig+0x358>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	2b05      	cmp	r3, #5
 8005c34:	d10c      	bne.n	8005c50 <HAL_RCC_OscConfig+0x340>
 8005c36:	4b61      	ldr	r3, [pc, #388]	@ (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c3a:	4a60      	ldr	r2, [pc, #384]	@ (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005c3c:	f043 0304 	orr.w	r3, r3, #4
 8005c40:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c42:	4b5e      	ldr	r3, [pc, #376]	@ (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c46:	4a5d      	ldr	r2, [pc, #372]	@ (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005c48:	f043 0301 	orr.w	r3, r3, #1
 8005c4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c4e:	e00b      	b.n	8005c68 <HAL_RCC_OscConfig+0x358>
 8005c50:	4b5a      	ldr	r3, [pc, #360]	@ (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c54:	4a59      	ldr	r2, [pc, #356]	@ (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005c56:	f023 0301 	bic.w	r3, r3, #1
 8005c5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c5c:	4b57      	ldr	r3, [pc, #348]	@ (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005c5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c60:	4a56      	ldr	r2, [pc, #344]	@ (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005c62:	f023 0304 	bic.w	r3, r3, #4
 8005c66:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d015      	beq.n	8005c9c <HAL_RCC_OscConfig+0x38c>
 8005c70:	f7fc fff4 	bl	8002c5c <HAL_GetTick>
 8005c74:	6138      	str	r0, [r7, #16]
 8005c76:	e00a      	b.n	8005c8e <HAL_RCC_OscConfig+0x37e>
 8005c78:	f7fc fff0 	bl	8002c5c <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_OscConfig+0x37e>
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e0d7      	b.n	8005e3e <HAL_RCC_OscConfig+0x52e>
 8005c8e:	4b4b      	ldr	r3, [pc, #300]	@ (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d0ee      	beq.n	8005c78 <HAL_RCC_OscConfig+0x368>
 8005c9a:	e014      	b.n	8005cc6 <HAL_RCC_OscConfig+0x3b6>
 8005c9c:	f7fc ffde 	bl	8002c5c <HAL_GetTick>
 8005ca0:	6138      	str	r0, [r7, #16]
 8005ca2:	e00a      	b.n	8005cba <HAL_RCC_OscConfig+0x3aa>
 8005ca4:	f7fc ffda 	bl	8002c5c <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d901      	bls.n	8005cba <HAL_RCC_OscConfig+0x3aa>
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e0c1      	b.n	8005e3e <HAL_RCC_OscConfig+0x52e>
 8005cba:	4b40      	ldr	r3, [pc, #256]	@ (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cbe:	f003 0302 	and.w	r3, r3, #2
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1ee      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x394>
 8005cc6:	7dfb      	ldrb	r3, [r7, #23]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d105      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x3c8>
 8005ccc:	4b3b      	ldr	r3, [pc, #236]	@ (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd0:	4a3a      	ldr	r2, [pc, #232]	@ (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005cd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	699b      	ldr	r3, [r3, #24]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 80ad 	beq.w	8005e3c <HAL_RCC_OscConfig+0x52c>
 8005ce2:	4b36      	ldr	r3, [pc, #216]	@ (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f003 030c 	and.w	r3, r3, #12
 8005cea:	2b08      	cmp	r3, #8
 8005cec:	d060      	beq.n	8005db0 <HAL_RCC_OscConfig+0x4a0>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d145      	bne.n	8005d82 <HAL_RCC_OscConfig+0x472>
 8005cf6:	4b33      	ldr	r3, [pc, #204]	@ (8005dc4 <HAL_RCC_OscConfig+0x4b4>)
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	601a      	str	r2, [r3, #0]
 8005cfc:	f7fc ffae 	bl	8002c5c <HAL_GetTick>
 8005d00:	6138      	str	r0, [r7, #16]
 8005d02:	e008      	b.n	8005d16 <HAL_RCC_OscConfig+0x406>
 8005d04:	f7fc ffaa 	bl	8002c5c <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d901      	bls.n	8005d16 <HAL_RCC_OscConfig+0x406>
 8005d12:	2303      	movs	r3, #3
 8005d14:	e093      	b.n	8005e3e <HAL_RCC_OscConfig+0x52e>
 8005d16:	4b29      	ldr	r3, [pc, #164]	@ (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1f0      	bne.n	8005d04 <HAL_RCC_OscConfig+0x3f4>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	69da      	ldr	r2, [r3, #28]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d30:	019b      	lsls	r3, r3, #6
 8005d32:	431a      	orrs	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d38:	085b      	lsrs	r3, r3, #1
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	041b      	lsls	r3, r3, #16
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d44:	061b      	lsls	r3, r3, #24
 8005d46:	431a      	orrs	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d4c:	071b      	lsls	r3, r3, #28
 8005d4e:	491b      	ldr	r1, [pc, #108]	@ (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005d50:	4313      	orrs	r3, r2
 8005d52:	604b      	str	r3, [r1, #4]
 8005d54:	4b1b      	ldr	r3, [pc, #108]	@ (8005dc4 <HAL_RCC_OscConfig+0x4b4>)
 8005d56:	2201      	movs	r2, #1
 8005d58:	601a      	str	r2, [r3, #0]
 8005d5a:	f7fc ff7f 	bl	8002c5c <HAL_GetTick>
 8005d5e:	6138      	str	r0, [r7, #16]
 8005d60:	e008      	b.n	8005d74 <HAL_RCC_OscConfig+0x464>
 8005d62:	f7fc ff7b 	bl	8002c5c <HAL_GetTick>
 8005d66:	4602      	mov	r2, r0
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d901      	bls.n	8005d74 <HAL_RCC_OscConfig+0x464>
 8005d70:	2303      	movs	r3, #3
 8005d72:	e064      	b.n	8005e3e <HAL_RCC_OscConfig+0x52e>
 8005d74:	4b11      	ldr	r3, [pc, #68]	@ (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d0f0      	beq.n	8005d62 <HAL_RCC_OscConfig+0x452>
 8005d80:	e05c      	b.n	8005e3c <HAL_RCC_OscConfig+0x52c>
 8005d82:	4b10      	ldr	r3, [pc, #64]	@ (8005dc4 <HAL_RCC_OscConfig+0x4b4>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	601a      	str	r2, [r3, #0]
 8005d88:	f7fc ff68 	bl	8002c5c <HAL_GetTick>
 8005d8c:	6138      	str	r0, [r7, #16]
 8005d8e:	e008      	b.n	8005da2 <HAL_RCC_OscConfig+0x492>
 8005d90:	f7fc ff64 	bl	8002c5c <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d901      	bls.n	8005da2 <HAL_RCC_OscConfig+0x492>
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e04d      	b.n	8005e3e <HAL_RCC_OscConfig+0x52e>
 8005da2:	4b06      	ldr	r3, [pc, #24]	@ (8005dbc <HAL_RCC_OscConfig+0x4ac>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1f0      	bne.n	8005d90 <HAL_RCC_OscConfig+0x480>
 8005dae:	e045      	b.n	8005e3c <HAL_RCC_OscConfig+0x52c>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d107      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x4b8>
 8005db8:	2301      	movs	r3, #1
 8005dba:	e040      	b.n	8005e3e <HAL_RCC_OscConfig+0x52e>
 8005dbc:	40023800 	.word	0x40023800
 8005dc0:	40007000 	.word	0x40007000
 8005dc4:	42470060 	.word	0x42470060
 8005dc8:	4b1f      	ldr	r3, [pc, #124]	@ (8005e48 <HAL_RCC_OscConfig+0x538>)
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	60fb      	str	r3, [r7, #12]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d030      	beq.n	8005e38 <HAL_RCC_OscConfig+0x528>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	69db      	ldr	r3, [r3, #28]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d129      	bne.n	8005e38 <HAL_RCC_OscConfig+0x528>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d122      	bne.n	8005e38 <HAL_RCC_OscConfig+0x528>
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005df8:	4013      	ands	r3, r2
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005dfe:	0192      	lsls	r2, r2, #6
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d119      	bne.n	8005e38 <HAL_RCC_OscConfig+0x528>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e0e:	085b      	lsrs	r3, r3, #1
 8005e10:	3b01      	subs	r3, #1
 8005e12:	041b      	lsls	r3, r3, #16
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d10f      	bne.n	8005e38 <HAL_RCC_OscConfig+0x528>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e22:	061b      	lsls	r3, r3, #24
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d107      	bne.n	8005e38 <HAL_RCC_OscConfig+0x528>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e32:	071b      	lsls	r3, r3, #28
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d001      	beq.n	8005e3c <HAL_RCC_OscConfig+0x52c>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e000      	b.n	8005e3e <HAL_RCC_OscConfig+0x52e>
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3718      	adds	r7, #24
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	40023800 	.word	0x40023800

08005e4c <HAL_SPI_Init>:
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <HAL_SPI_Init+0x12>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e07b      	b.n	8005f56 <HAL_SPI_Init+0x10a>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d108      	bne.n	8005e78 <HAL_SPI_Init+0x2c>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e6e:	d009      	beq.n	8005e84 <HAL_SPI_Init+0x38>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	61da      	str	r2, [r3, #28]
 8005e76:	e005      	b.n	8005e84 <HAL_SPI_Init+0x38>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	611a      	str	r2, [r3, #16]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	615a      	str	r2, [r3, #20]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d106      	bne.n	8005ea4 <HAL_SPI_Init+0x58>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7fc fd1c 	bl	80028dc <HAL_SPI_MspInit>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005eba:	601a      	str	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005ecc:	431a      	orrs	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ed6:	431a      	orrs	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	f003 0302 	and.w	r3, r3, #2
 8005ee0:	431a      	orrs	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	431a      	orrs	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ef4:	431a      	orrs	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005efe:	431a      	orrs	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a1b      	ldr	r3, [r3, #32]
 8005f04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f08:	ea42 0103 	orr.w	r1, r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f10:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	601a      	str	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	0c1b      	lsrs	r3, r3, #16
 8005f22:	f003 0104 	and.w	r1, r3, #4
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f2a:	f003 0210 	and.w	r2, r3, #16
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	430a      	orrs	r2, r1
 8005f34:	605a      	str	r2, [r3, #4]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	69da      	ldr	r2, [r3, #28]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f44:	61da      	str	r2, [r3, #28]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	655a      	str	r2, [r3, #84]	@ 0x54
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005f54:	2300      	movs	r3, #0
 8005f56:	4618      	mov	r0, r3
 8005f58:	3708      	adds	r7, #8
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <HAL_SPI_Transmit>:
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b088      	sub	sp, #32
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	60f8      	str	r0, [r7, #12]
 8005f66:	60b9      	str	r1, [r7, #8]
 8005f68:	603b      	str	r3, [r7, #0]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	80fb      	strh	r3, [r7, #6]
 8005f6e:	f7fc fe75 	bl	8002c5c <HAL_GetTick>
 8005f72:	61f8      	str	r0, [r7, #28]
 8005f74:	88fb      	ldrh	r3, [r7, #6]
 8005f76:	837b      	strh	r3, [r7, #26]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d001      	beq.n	8005f88 <HAL_SPI_Transmit+0x2a>
 8005f84:	2302      	movs	r3, #2
 8005f86:	e12a      	b.n	80061de <HAL_SPI_Transmit+0x280>
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d002      	beq.n	8005f94 <HAL_SPI_Transmit+0x36>
 8005f8e:	88fb      	ldrh	r3, [r7, #6]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d101      	bne.n	8005f98 <HAL_SPI_Transmit+0x3a>
 8005f94:	2301      	movs	r3, #1
 8005f96:	e122      	b.n	80061de <HAL_SPI_Transmit+0x280>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d101      	bne.n	8005fa6 <HAL_SPI_Transmit+0x48>
 8005fa2:	2302      	movs	r3, #2
 8005fa4:	e11b      	b.n	80061de <HAL_SPI_Transmit+0x280>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2203      	movs	r2, #3
 8005fb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	655a      	str	r2, [r3, #84]	@ 0x54
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	631a      	str	r2, [r3, #48]	@ 0x30
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	88fa      	ldrh	r2, [r7, #6]
 8005fc6:	869a      	strh	r2, [r3, #52]	@ 0x34
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	88fa      	ldrh	r2, [r7, #6]
 8005fcc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	639a      	str	r2, [r3, #56]	@ 0x38
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	645a      	str	r2, [r3, #68]	@ 0x44
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	641a      	str	r2, [r3, #64]	@ 0x40
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ff4:	d10f      	bne.n	8006016 <HAL_SPI_Transmit+0xb8>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006004:	601a      	str	r2, [r3, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006014:	601a      	str	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006020:	2b40      	cmp	r3, #64	@ 0x40
 8006022:	d007      	beq.n	8006034 <HAL_SPI_Transmit+0xd6>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800603c:	d152      	bne.n	80060e4 <HAL_SPI_Transmit+0x186>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <HAL_SPI_Transmit+0xee>
 8006046:	8b7b      	ldrh	r3, [r7, #26]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d145      	bne.n	80060d8 <HAL_SPI_Transmit+0x17a>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006050:	881a      	ldrh	r2, [r3, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	60da      	str	r2, [r3, #12]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800605c:	1c9a      	adds	r2, r3, #2
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	631a      	str	r2, [r3, #48]	@ 0x30
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006066:	b29b      	uxth	r3, r3
 8006068:	3b01      	subs	r3, #1
 800606a:	b29a      	uxth	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006070:	e032      	b.n	80060d8 <HAL_SPI_Transmit+0x17a>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f003 0302 	and.w	r3, r3, #2
 800607c:	2b02      	cmp	r3, #2
 800607e:	d112      	bne.n	80060a6 <HAL_SPI_Transmit+0x148>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006084:	881a      	ldrh	r2, [r3, #0]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	60da      	str	r2, [r3, #12]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006090:	1c9a      	adds	r2, r3, #2
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	631a      	str	r2, [r3, #48]	@ 0x30
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800609a:	b29b      	uxth	r3, r3
 800609c:	3b01      	subs	r3, #1
 800609e:	b29a      	uxth	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80060a4:	e018      	b.n	80060d8 <HAL_SPI_Transmit+0x17a>
 80060a6:	f7fc fdd9 	bl	8002c5c <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	683a      	ldr	r2, [r7, #0]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d803      	bhi.n	80060be <HAL_SPI_Transmit+0x160>
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060bc:	d102      	bne.n	80060c4 <HAL_SPI_Transmit+0x166>
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d109      	bne.n	80060d8 <HAL_SPI_Transmit+0x17a>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80060d4:	2303      	movs	r3, #3
 80060d6:	e082      	b.n	80061de <HAL_SPI_Transmit+0x280>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060dc:	b29b      	uxth	r3, r3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1c7      	bne.n	8006072 <HAL_SPI_Transmit+0x114>
 80060e2:	e053      	b.n	800618c <HAL_SPI_Transmit+0x22e>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d002      	beq.n	80060f2 <HAL_SPI_Transmit+0x194>
 80060ec:	8b7b      	ldrh	r3, [r7, #26]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d147      	bne.n	8006182 <HAL_SPI_Transmit+0x224>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	330c      	adds	r3, #12
 80060fc:	7812      	ldrb	r2, [r2, #0]
 80060fe:	701a      	strb	r2, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006104:	1c5a      	adds	r2, r3, #1
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	631a      	str	r2, [r3, #48]	@ 0x30
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800610e:	b29b      	uxth	r3, r3
 8006110:	3b01      	subs	r3, #1
 8006112:	b29a      	uxth	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006118:	e033      	b.n	8006182 <HAL_SPI_Transmit+0x224>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f003 0302 	and.w	r3, r3, #2
 8006124:	2b02      	cmp	r3, #2
 8006126:	d113      	bne.n	8006150 <HAL_SPI_Transmit+0x1f2>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	330c      	adds	r3, #12
 8006132:	7812      	ldrb	r2, [r2, #0]
 8006134:	701a      	strb	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800613a:	1c5a      	adds	r2, r3, #1
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006144:	b29b      	uxth	r3, r3
 8006146:	3b01      	subs	r3, #1
 8006148:	b29a      	uxth	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800614e:	e018      	b.n	8006182 <HAL_SPI_Transmit+0x224>
 8006150:	f7fc fd84 	bl	8002c5c <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	683a      	ldr	r2, [r7, #0]
 800615c:	429a      	cmp	r2, r3
 800615e:	d803      	bhi.n	8006168 <HAL_SPI_Transmit+0x20a>
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006166:	d102      	bne.n	800616e <HAL_SPI_Transmit+0x210>
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d109      	bne.n	8006182 <HAL_SPI_Transmit+0x224>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800617e:	2303      	movs	r3, #3
 8006180:	e02d      	b.n	80061de <HAL_SPI_Transmit+0x280>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006186:	b29b      	uxth	r3, r3
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1c6      	bne.n	800611a <HAL_SPI_Transmit+0x1bc>
 800618c:	69fa      	ldr	r2, [r7, #28]
 800618e:	6839      	ldr	r1, [r7, #0]
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f000 fa59 	bl	8006648 <SPI_EndRxTxTransaction>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d002      	beq.n	80061a2 <HAL_SPI_Transmit+0x244>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2220      	movs	r2, #32
 80061a0:	655a      	str	r2, [r3, #84]	@ 0x54
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d10a      	bne.n	80061c0 <HAL_SPI_Transmit+0x262>
 80061aa:	2300      	movs	r3, #0
 80061ac:	617b      	str	r3, [r7, #20]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	617b      	str	r3, [r7, #20]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	617b      	str	r3, [r7, #20]
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d001      	beq.n	80061dc <HAL_SPI_Transmit+0x27e>
 80061d8:	2301      	movs	r3, #1
 80061da:	e000      	b.n	80061de <HAL_SPI_Transmit+0x280>
 80061dc:	2300      	movs	r3, #0
 80061de:	4618      	mov	r0, r3
 80061e0:	3720      	adds	r7, #32
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <HAL_SPI_TransmitReceive>:
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b08a      	sub	sp, #40	@ 0x28
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	60f8      	str	r0, [r7, #12]
 80061ee:	60b9      	str	r1, [r7, #8]
 80061f0:	607a      	str	r2, [r7, #4]
 80061f2:	807b      	strh	r3, [r7, #2]
 80061f4:	2301      	movs	r3, #1
 80061f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80061f8:	f7fc fd30 	bl	8002c5c <HAL_GetTick>
 80061fc:	6238      	str	r0, [r7, #32]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006204:	77fb      	strb	r3, [r7, #31]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	61bb      	str	r3, [r7, #24]
 800620c:	887b      	ldrh	r3, [r7, #2]
 800620e:	82fb      	strh	r3, [r7, #22]
 8006210:	7ffb      	ldrb	r3, [r7, #31]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d00c      	beq.n	8006230 <HAL_SPI_TransmitReceive+0x4a>
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800621c:	d106      	bne.n	800622c <HAL_SPI_TransmitReceive+0x46>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d102      	bne.n	800622c <HAL_SPI_TransmitReceive+0x46>
 8006226:	7ffb      	ldrb	r3, [r7, #31]
 8006228:	2b04      	cmp	r3, #4
 800622a:	d001      	beq.n	8006230 <HAL_SPI_TransmitReceive+0x4a>
 800622c:	2302      	movs	r3, #2
 800622e:	e17f      	b.n	8006530 <HAL_SPI_TransmitReceive+0x34a>
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d005      	beq.n	8006242 <HAL_SPI_TransmitReceive+0x5c>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <HAL_SPI_TransmitReceive+0x5c>
 800623c:	887b      	ldrh	r3, [r7, #2]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <HAL_SPI_TransmitReceive+0x60>
 8006242:	2301      	movs	r3, #1
 8006244:	e174      	b.n	8006530 <HAL_SPI_TransmitReceive+0x34a>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800624c:	2b01      	cmp	r3, #1
 800624e:	d101      	bne.n	8006254 <HAL_SPI_TransmitReceive+0x6e>
 8006250:	2302      	movs	r3, #2
 8006252:	e16d      	b.n	8006530 <HAL_SPI_TransmitReceive+0x34a>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b04      	cmp	r3, #4
 8006266:	d003      	beq.n	8006270 <HAL_SPI_TransmitReceive+0x8a>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2205      	movs	r2, #5
 800626c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	655a      	str	r2, [r3, #84]	@ 0x54
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	639a      	str	r2, [r3, #56]	@ 0x38
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	887a      	ldrh	r2, [r7, #2]
 8006280:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	887a      	ldrh	r2, [r7, #2]
 8006286:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	631a      	str	r2, [r3, #48]	@ 0x30
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	887a      	ldrh	r2, [r7, #2]
 8006292:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	887a      	ldrh	r2, [r7, #2]
 8006298:	869a      	strh	r2, [r3, #52]	@ 0x34
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	641a      	str	r2, [r3, #64]	@ 0x40
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	645a      	str	r2, [r3, #68]	@ 0x44
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062b0:	2b40      	cmp	r3, #64	@ 0x40
 80062b2:	d007      	beq.n	80062c4 <HAL_SPI_TransmitReceive+0xde>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80062c2:	601a      	str	r2, [r3, #0]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062cc:	d17e      	bne.n	80063cc <HAL_SPI_TransmitReceive+0x1e6>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d002      	beq.n	80062dc <HAL_SPI_TransmitReceive+0xf6>
 80062d6:	8afb      	ldrh	r3, [r7, #22]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d16c      	bne.n	80063b6 <HAL_SPI_TransmitReceive+0x1d0>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e0:	881a      	ldrh	r2, [r3, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	60da      	str	r2, [r3, #12]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ec:	1c9a      	adds	r2, r3, #2
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	3b01      	subs	r3, #1
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006300:	e059      	b.n	80063b6 <HAL_SPI_TransmitReceive+0x1d0>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f003 0302 	and.w	r3, r3, #2
 800630c:	2b02      	cmp	r3, #2
 800630e:	d11b      	bne.n	8006348 <HAL_SPI_TransmitReceive+0x162>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006314:	b29b      	uxth	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d016      	beq.n	8006348 <HAL_SPI_TransmitReceive+0x162>
 800631a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631c:	2b01      	cmp	r3, #1
 800631e:	d113      	bne.n	8006348 <HAL_SPI_TransmitReceive+0x162>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006324:	881a      	ldrh	r2, [r3, #0]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	60da      	str	r2, [r3, #12]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006330:	1c9a      	adds	r2, r3, #2
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	631a      	str	r2, [r3, #48]	@ 0x30
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800633a:	b29b      	uxth	r3, r3
 800633c:	3b01      	subs	r3, #1
 800633e:	b29a      	uxth	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006344:	2300      	movs	r3, #0
 8006346:	627b      	str	r3, [r7, #36]	@ 0x24
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b01      	cmp	r3, #1
 8006354:	d119      	bne.n	800638a <HAL_SPI_TransmitReceive+0x1a4>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800635a:	b29b      	uxth	r3, r3
 800635c:	2b00      	cmp	r3, #0
 800635e:	d014      	beq.n	800638a <HAL_SPI_TransmitReceive+0x1a4>
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68da      	ldr	r2, [r3, #12]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800636a:	b292      	uxth	r2, r2
 800636c:	801a      	strh	r2, [r3, #0]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006372:	1c9a      	adds	r2, r3, #2
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	639a      	str	r2, [r3, #56]	@ 0x38
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800637c:	b29b      	uxth	r3, r3
 800637e:	3b01      	subs	r3, #1
 8006380:	b29a      	uxth	r2, r3
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006386:	2301      	movs	r3, #1
 8006388:	627b      	str	r3, [r7, #36]	@ 0x24
 800638a:	f7fc fc67 	bl	8002c5c <HAL_GetTick>
 800638e:	4602      	mov	r2, r0
 8006390:	6a3b      	ldr	r3, [r7, #32]
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006396:	429a      	cmp	r2, r3
 8006398:	d80d      	bhi.n	80063b6 <HAL_SPI_TransmitReceive+0x1d0>
 800639a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800639c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a0:	d009      	beq.n	80063b6 <HAL_SPI_TransmitReceive+0x1d0>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80063b2:	2303      	movs	r3, #3
 80063b4:	e0bc      	b.n	8006530 <HAL_SPI_TransmitReceive+0x34a>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1a0      	bne.n	8006302 <HAL_SPI_TransmitReceive+0x11c>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d19b      	bne.n	8006302 <HAL_SPI_TransmitReceive+0x11c>
 80063ca:	e082      	b.n	80064d2 <HAL_SPI_TransmitReceive+0x2ec>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d002      	beq.n	80063da <HAL_SPI_TransmitReceive+0x1f4>
 80063d4:	8afb      	ldrh	r3, [r7, #22]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d171      	bne.n	80064be <HAL_SPI_TransmitReceive+0x2d8>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	330c      	adds	r3, #12
 80063e4:	7812      	ldrb	r2, [r2, #0]
 80063e6:	701a      	strb	r2, [r3, #0]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ec:	1c5a      	adds	r2, r3, #1
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	3b01      	subs	r3, #1
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006400:	e05d      	b.n	80064be <HAL_SPI_TransmitReceive+0x2d8>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f003 0302 	and.w	r3, r3, #2
 800640c:	2b02      	cmp	r3, #2
 800640e:	d11c      	bne.n	800644a <HAL_SPI_TransmitReceive+0x264>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006414:	b29b      	uxth	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d017      	beq.n	800644a <HAL_SPI_TransmitReceive+0x264>
 800641a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641c:	2b01      	cmp	r3, #1
 800641e:	d114      	bne.n	800644a <HAL_SPI_TransmitReceive+0x264>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	330c      	adds	r3, #12
 800642a:	7812      	ldrb	r2, [r2, #0]
 800642c:	701a      	strb	r2, [r3, #0]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006432:	1c5a      	adds	r2, r3, #1
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	631a      	str	r2, [r3, #48]	@ 0x30
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800643c:	b29b      	uxth	r3, r3
 800643e:	3b01      	subs	r3, #1
 8006440:	b29a      	uxth	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006446:	2300      	movs	r3, #0
 8006448:	627b      	str	r3, [r7, #36]	@ 0x24
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f003 0301 	and.w	r3, r3, #1
 8006454:	2b01      	cmp	r3, #1
 8006456:	d119      	bne.n	800648c <HAL_SPI_TransmitReceive+0x2a6>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800645c:	b29b      	uxth	r3, r3
 800645e:	2b00      	cmp	r3, #0
 8006460:	d014      	beq.n	800648c <HAL_SPI_TransmitReceive+0x2a6>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68da      	ldr	r2, [r3, #12]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800646c:	b2d2      	uxtb	r2, r2
 800646e:	701a      	strb	r2, [r3, #0]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006474:	1c5a      	adds	r2, r3, #1
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	639a      	str	r2, [r3, #56]	@ 0x38
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800647e:	b29b      	uxth	r3, r3
 8006480:	3b01      	subs	r3, #1
 8006482:	b29a      	uxth	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006488:	2301      	movs	r3, #1
 800648a:	627b      	str	r3, [r7, #36]	@ 0x24
 800648c:	f7fc fbe6 	bl	8002c5c <HAL_GetTick>
 8006490:	4602      	mov	r2, r0
 8006492:	6a3b      	ldr	r3, [r7, #32]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006498:	429a      	cmp	r2, r3
 800649a:	d803      	bhi.n	80064a4 <HAL_SPI_TransmitReceive+0x2be>
 800649c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800649e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a2:	d102      	bne.n	80064aa <HAL_SPI_TransmitReceive+0x2c4>
 80064a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d109      	bne.n	80064be <HAL_SPI_TransmitReceive+0x2d8>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80064ba:	2303      	movs	r3, #3
 80064bc:	e038      	b.n	8006530 <HAL_SPI_TransmitReceive+0x34a>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d19c      	bne.n	8006402 <HAL_SPI_TransmitReceive+0x21c>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d197      	bne.n	8006402 <HAL_SPI_TransmitReceive+0x21c>
 80064d2:	6a3a      	ldr	r2, [r7, #32]
 80064d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f000 f8b6 	bl	8006648 <SPI_EndRxTxTransaction>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d008      	beq.n	80064f4 <HAL_SPI_TransmitReceive+0x30e>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2220      	movs	r2, #32
 80064e6:	655a      	str	r2, [r3, #84]	@ 0x54
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80064f0:	2301      	movs	r3, #1
 80064f2:	e01d      	b.n	8006530 <HAL_SPI_TransmitReceive+0x34a>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d10a      	bne.n	8006512 <HAL_SPI_TransmitReceive+0x32c>
 80064fc:	2300      	movs	r3, #0
 80064fe:	613b      	str	r3, [r7, #16]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	613b      	str	r3, [r7, #16]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	613b      	str	r3, [r7, #16]
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <HAL_SPI_TransmitReceive+0x348>
 800652a:	2301      	movs	r3, #1
 800652c:	e000      	b.n	8006530 <HAL_SPI_TransmitReceive+0x34a>
 800652e:	2300      	movs	r3, #0
 8006530:	4618      	mov	r0, r3
 8006532:	3728      	adds	r7, #40	@ 0x28
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <SPI_WaitFlagStateUntilTimeout>:
 8006538:	b580      	push	{r7, lr}
 800653a:	b088      	sub	sp, #32
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	603b      	str	r3, [r7, #0]
 8006544:	4613      	mov	r3, r2
 8006546:	71fb      	strb	r3, [r7, #7]
 8006548:	f7fc fb88 	bl	8002c5c <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006550:	1a9b      	subs	r3, r3, r2
 8006552:	683a      	ldr	r2, [r7, #0]
 8006554:	4413      	add	r3, r2
 8006556:	61fb      	str	r3, [r7, #28]
 8006558:	f7fc fb80 	bl	8002c5c <HAL_GetTick>
 800655c:	61b8      	str	r0, [r7, #24]
 800655e:	4b39      	ldr	r3, [pc, #228]	@ (8006644 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	015b      	lsls	r3, r3, #5
 8006564:	0d1b      	lsrs	r3, r3, #20
 8006566:	69fa      	ldr	r2, [r7, #28]
 8006568:	fb02 f303 	mul.w	r3, r2, r3
 800656c:	617b      	str	r3, [r7, #20]
 800656e:	e055      	b.n	800661c <SPI_WaitFlagStateUntilTimeout+0xe4>
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006576:	d051      	beq.n	800661c <SPI_WaitFlagStateUntilTimeout+0xe4>
 8006578:	f7fc fb70 	bl	8002c5c <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	69fa      	ldr	r2, [r7, #28]
 8006584:	429a      	cmp	r2, r3
 8006586:	d902      	bls.n	800658e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d13d      	bne.n	800660a <SPI_WaitFlagStateUntilTimeout+0xd2>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	685a      	ldr	r2, [r3, #4]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800659c:	605a      	str	r2, [r3, #4]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80065a6:	d111      	bne.n	80065cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065b0:	d004      	beq.n	80065bc <SPI_WaitFlagStateUntilTimeout+0x84>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065ba:	d107      	bne.n	80065cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065ca:	601a      	str	r2, [r3, #0]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065d4:	d10f      	bne.n	80065f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80065e4:	601a      	str	r2, [r3, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80065f4:	601a      	str	r2, [r3, #0]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006606:	2303      	movs	r3, #3
 8006608:	e018      	b.n	800663c <SPI_WaitFlagStateUntilTimeout+0x104>
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d102      	bne.n	8006616 <SPI_WaitFlagStateUntilTimeout+0xde>
 8006610:	2300      	movs	r3, #0
 8006612:	61fb      	str	r3, [r7, #28]
 8006614:	e002      	b.n	800661c <SPI_WaitFlagStateUntilTimeout+0xe4>
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	3b01      	subs	r3, #1
 800661a:	617b      	str	r3, [r7, #20]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	689a      	ldr	r2, [r3, #8]
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	4013      	ands	r3, r2
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	429a      	cmp	r2, r3
 800662a:	bf0c      	ite	eq
 800662c:	2301      	moveq	r3, #1
 800662e:	2300      	movne	r3, #0
 8006630:	b2db      	uxtb	r3, r3
 8006632:	461a      	mov	r2, r3
 8006634:	79fb      	ldrb	r3, [r7, #7]
 8006636:	429a      	cmp	r2, r3
 8006638:	d19a      	bne.n	8006570 <SPI_WaitFlagStateUntilTimeout+0x38>
 800663a:	2300      	movs	r3, #0
 800663c:	4618      	mov	r0, r3
 800663e:	3720      	adds	r7, #32
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	2000019c 	.word	0x2000019c

08006648 <SPI_EndRxTxTransaction>:
 8006648:	b580      	push	{r7, lr}
 800664a:	b088      	sub	sp, #32
 800664c:	af02      	add	r7, sp, #8
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	2201      	movs	r2, #1
 800665c:	2102      	movs	r1, #2
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f7ff ff6a 	bl	8006538 <SPI_WaitFlagStateUntilTimeout>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d007      	beq.n	800667a <SPI_EndRxTxTransaction+0x32>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800666e:	f043 0220 	orr.w	r2, r3, #32
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	655a      	str	r2, [r3, #84]	@ 0x54
 8006676:	2303      	movs	r3, #3
 8006678:	e032      	b.n	80066e0 <SPI_EndRxTxTransaction+0x98>
 800667a:	4b1b      	ldr	r3, [pc, #108]	@ (80066e8 <SPI_EndRxTxTransaction+0xa0>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a1b      	ldr	r2, [pc, #108]	@ (80066ec <SPI_EndRxTxTransaction+0xa4>)
 8006680:	fba2 2303 	umull	r2, r3, r2, r3
 8006684:	0d5b      	lsrs	r3, r3, #21
 8006686:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800668a:	fb02 f303 	mul.w	r3, r2, r3
 800668e:	617b      	str	r3, [r7, #20]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006698:	d112      	bne.n	80066c0 <SPI_EndRxTxTransaction+0x78>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	9300      	str	r3, [sp, #0]
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	2200      	movs	r2, #0
 80066a2:	2180      	movs	r1, #128	@ 0x80
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f7ff ff47 	bl	8006538 <SPI_WaitFlagStateUntilTimeout>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d016      	beq.n	80066de <SPI_EndRxTxTransaction+0x96>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066b4:	f043 0220 	orr.w	r2, r3, #32
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	655a      	str	r2, [r3, #84]	@ 0x54
 80066bc:	2303      	movs	r3, #3
 80066be:	e00f      	b.n	80066e0 <SPI_EndRxTxTransaction+0x98>
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00a      	beq.n	80066dc <SPI_EndRxTxTransaction+0x94>
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	3b01      	subs	r3, #1
 80066ca:	617b      	str	r3, [r7, #20]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066d6:	2b80      	cmp	r3, #128	@ 0x80
 80066d8:	d0f2      	beq.n	80066c0 <SPI_EndRxTxTransaction+0x78>
 80066da:	e000      	b.n	80066de <SPI_EndRxTxTransaction+0x96>
 80066dc:	bf00      	nop
 80066de:	2300      	movs	r3, #0
 80066e0:	4618      	mov	r0, r3
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	2000019c 	.word	0x2000019c
 80066ec:	165e9f81 	.word	0x165e9f81

080066f0 <HAL_UART_Init>:
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <HAL_UART_Init+0x12>
 80066fe:	2301      	movs	r3, #1
 8006700:	e042      	b.n	8006788 <HAL_UART_Init+0x98>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006708:	b2db      	uxtb	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d106      	bne.n	800671c <HAL_UART_Init+0x2c>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f7fc f928 	bl	800296c <HAL_UART_MspInit>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2224      	movs	r2, #36	@ 0x24
 8006720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68da      	ldr	r2, [r3, #12]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006732:	60da      	str	r2, [r3, #12]
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 fcef 	bl	8007118 <UART_SetConfig>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	691a      	ldr	r2, [r3, #16]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006748:	611a      	str	r2, [r3, #16]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	695a      	ldr	r2, [r3, #20]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006758:	615a      	str	r2, [r3, #20]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68da      	ldr	r2, [r3, #12]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006768:	60da      	str	r2, [r3, #12]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	645a      	str	r2, [r3, #68]	@ 0x44
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2220      	movs	r2, #32
 8006774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2220      	movs	r2, #32
 800677c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	635a      	str	r2, [r3, #52]	@ 0x34
 8006786:	2300      	movs	r3, #0
 8006788:	4618      	mov	r0, r3
 800678a:	3708      	adds	r7, #8
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <HAL_UART_Receive_IT>:
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	4613      	mov	r3, r2
 800679c:	80fb      	strh	r3, [r7, #6]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b20      	cmp	r3, #32
 80067a8:	d112      	bne.n	80067d0 <HAL_UART_Receive_IT+0x40>
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d002      	beq.n	80067b6 <HAL_UART_Receive_IT+0x26>
 80067b0:	88fb      	ldrh	r3, [r7, #6]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <HAL_UART_Receive_IT+0x2a>
 80067b6:	2301      	movs	r3, #1
 80067b8:	e00b      	b.n	80067d2 <HAL_UART_Receive_IT+0x42>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	631a      	str	r2, [r3, #48]	@ 0x30
 80067c0:	88fb      	ldrh	r3, [r7, #6]
 80067c2:	461a      	mov	r2, r3
 80067c4:	68b9      	ldr	r1, [r7, #8]
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f000 fad2 	bl	8006d70 <UART_Start_Receive_IT>
 80067cc:	4603      	mov	r3, r0
 80067ce:	e000      	b.n	80067d2 <HAL_UART_Receive_IT+0x42>
 80067d0:	2302      	movs	r3, #2
 80067d2:	4618      	mov	r0, r3
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
	...

080067dc <HAL_UART_IRQHandler>:
 80067dc:	b580      	push	{r7, lr}
 80067de:	b0ba      	sub	sp, #232	@ 0xe8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006802:	2300      	movs	r3, #0
 8006804:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006808:	2300      	movs	r3, #0
 800680a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800680e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006812:	f003 030f 	and.w	r3, r3, #15
 8006816:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800681a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10f      	bne.n	8006842 <HAL_UART_IRQHandler+0x66>
 8006822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006826:	f003 0320 	and.w	r3, r3, #32
 800682a:	2b00      	cmp	r3, #0
 800682c:	d009      	beq.n	8006842 <HAL_UART_IRQHandler+0x66>
 800682e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006832:	f003 0320 	and.w	r3, r3, #32
 8006836:	2b00      	cmp	r3, #0
 8006838:	d003      	beq.n	8006842 <HAL_UART_IRQHandler+0x66>
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fbae 	bl	8006f9c <UART_Receive_IT>
 8006840:	e273      	b.n	8006d2a <HAL_UART_IRQHandler+0x54e>
 8006842:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006846:	2b00      	cmp	r3, #0
 8006848:	f000 80de 	beq.w	8006a08 <HAL_UART_IRQHandler+0x22c>
 800684c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	2b00      	cmp	r3, #0
 8006856:	d106      	bne.n	8006866 <HAL_UART_IRQHandler+0x8a>
 8006858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800685c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006860:	2b00      	cmp	r3, #0
 8006862:	f000 80d1 	beq.w	8006a08 <HAL_UART_IRQHandler+0x22c>
 8006866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800686a:	f003 0301 	and.w	r3, r3, #1
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00b      	beq.n	800688a <HAL_UART_IRQHandler+0xae>
 8006872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800687a:	2b00      	cmp	r3, #0
 800687c:	d005      	beq.n	800688a <HAL_UART_IRQHandler+0xae>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006882:	f043 0201 	orr.w	r2, r3, #1
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	645a      	str	r2, [r3, #68]	@ 0x44
 800688a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800688e:	f003 0304 	and.w	r3, r3, #4
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00b      	beq.n	80068ae <HAL_UART_IRQHandler+0xd2>
 8006896:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800689a:	f003 0301 	and.w	r3, r3, #1
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d005      	beq.n	80068ae <HAL_UART_IRQHandler+0xd2>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068a6:	f043 0202 	orr.w	r2, r3, #2
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	645a      	str	r2, [r3, #68]	@ 0x44
 80068ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068b2:	f003 0302 	and.w	r3, r3, #2
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00b      	beq.n	80068d2 <HAL_UART_IRQHandler+0xf6>
 80068ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068be:	f003 0301 	and.w	r3, r3, #1
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d005      	beq.n	80068d2 <HAL_UART_IRQHandler+0xf6>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ca:	f043 0204 	orr.w	r2, r3, #4
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	645a      	str	r2, [r3, #68]	@ 0x44
 80068d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068d6:	f003 0308 	and.w	r3, r3, #8
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d011      	beq.n	8006902 <HAL_UART_IRQHandler+0x126>
 80068de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068e2:	f003 0320 	and.w	r3, r3, #32
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d105      	bne.n	80068f6 <HAL_UART_IRQHandler+0x11a>
 80068ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d005      	beq.n	8006902 <HAL_UART_IRQHandler+0x126>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068fa:	f043 0208 	orr.w	r2, r3, #8
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	645a      	str	r2, [r3, #68]	@ 0x44
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006906:	2b00      	cmp	r3, #0
 8006908:	f000 820a 	beq.w	8006d20 <HAL_UART_IRQHandler+0x544>
 800690c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006910:	f003 0320 	and.w	r3, r3, #32
 8006914:	2b00      	cmp	r3, #0
 8006916:	d008      	beq.n	800692a <HAL_UART_IRQHandler+0x14e>
 8006918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800691c:	f003 0320 	and.w	r3, r3, #32
 8006920:	2b00      	cmp	r3, #0
 8006922:	d002      	beq.n	800692a <HAL_UART_IRQHandler+0x14e>
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fb39 	bl	8006f9c <UART_Receive_IT>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	695b      	ldr	r3, [r3, #20]
 8006930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006934:	2b40      	cmp	r3, #64	@ 0x40
 8006936:	bf0c      	ite	eq
 8006938:	2301      	moveq	r3, #1
 800693a:	2300      	movne	r3, #0
 800693c:	b2db      	uxtb	r3, r3
 800693e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006946:	f003 0308 	and.w	r3, r3, #8
 800694a:	2b00      	cmp	r3, #0
 800694c:	d103      	bne.n	8006956 <HAL_UART_IRQHandler+0x17a>
 800694e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006952:	2b00      	cmp	r3, #0
 8006954:	d04f      	beq.n	80069f6 <HAL_UART_IRQHandler+0x21a>
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fa44 	bl	8006de4 <UART_EndRxTransfer>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006966:	2b40      	cmp	r3, #64	@ 0x40
 8006968:	d141      	bne.n	80069ee <HAL_UART_IRQHandler+0x212>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	3314      	adds	r3, #20
 8006970:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006974:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006978:	e853 3f00 	ldrex	r3, [r3]
 800697c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006980:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006984:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006988:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	3314      	adds	r3, #20
 8006992:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006996:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800699a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800699e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80069a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80069a6:	e841 2300 	strex	r3, r2, [r1]
 80069aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80069ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1d9      	bne.n	800696a <HAL_UART_IRQHandler+0x18e>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d013      	beq.n	80069e6 <HAL_UART_IRQHandler+0x20a>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069c2:	4a8a      	ldr	r2, [pc, #552]	@ (8006bec <HAL_UART_IRQHandler+0x410>)
 80069c4:	651a      	str	r2, [r3, #80]	@ 0x50
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7fc fb04 	bl	8002fd8 <HAL_DMA_Abort_IT>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d016      	beq.n	8006a04 <HAL_UART_IRQHandler+0x228>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80069e0:	4610      	mov	r0, r2
 80069e2:	4798      	blx	r3
 80069e4:	e00e      	b.n	8006a04 <HAL_UART_IRQHandler+0x228>
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f9ac 	bl	8006d44 <HAL_UART_ErrorCallback>
 80069ec:	e00a      	b.n	8006a04 <HAL_UART_IRQHandler+0x228>
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 f9a8 	bl	8006d44 <HAL_UART_ErrorCallback>
 80069f4:	e006      	b.n	8006a04 <HAL_UART_IRQHandler+0x228>
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f9a4 	bl	8006d44 <HAL_UART_ErrorCallback>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	645a      	str	r2, [r3, #68]	@ 0x44
 8006a02:	e18d      	b.n	8006d20 <HAL_UART_IRQHandler+0x544>
 8006a04:	bf00      	nop
 8006a06:	e18b      	b.n	8006d20 <HAL_UART_IRQHandler+0x544>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	f040 8167 	bne.w	8006ce0 <HAL_UART_IRQHandler+0x504>
 8006a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a16:	f003 0310 	and.w	r3, r3, #16
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f000 8160 	beq.w	8006ce0 <HAL_UART_IRQHandler+0x504>
 8006a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a24:	f003 0310 	and.w	r3, r3, #16
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 8159 	beq.w	8006ce0 <HAL_UART_IRQHandler+0x504>
 8006a2e:	2300      	movs	r3, #0
 8006a30:	60bb      	str	r3, [r7, #8]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	60bb      	str	r3, [r7, #8]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	60bb      	str	r3, [r7, #8]
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a4e:	2b40      	cmp	r3, #64	@ 0x40
 8006a50:	f040 80ce 	bne.w	8006bf0 <HAL_UART_IRQHandler+0x414>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 8006a60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f000 80a9 	beq.w	8006bbc <HAL_UART_IRQHandler+0x3e0>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006a6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a72:	429a      	cmp	r2, r3
 8006a74:	f080 80a2 	bcs.w	8006bbc <HAL_UART_IRQHandler+0x3e0>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a7e:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a84:	69db      	ldr	r3, [r3, #28]
 8006a86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a8a:	f000 8088 	beq.w	8006b9e <HAL_UART_IRQHandler+0x3c2>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	330c      	adds	r3, #12
 8006a94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006a98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006a9c:	e853 3f00 	ldrex	r3, [r3]
 8006aa0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006aa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006aa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006aac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	330c      	adds	r3, #12
 8006ab6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006aba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006abe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ac2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006ac6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006aca:	e841 2300 	strex	r3, r2, [r1]
 8006ace:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006ad2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1d9      	bne.n	8006a8e <HAL_UART_IRQHandler+0x2b2>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	3314      	adds	r3, #20
 8006ae0:	677b      	str	r3, [r7, #116]	@ 0x74
 8006ae2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ae4:	e853 3f00 	ldrex	r3, [r3]
 8006ae8:	673b      	str	r3, [r7, #112]	@ 0x70
 8006aea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006aec:	f023 0301 	bic.w	r3, r3, #1
 8006af0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	3314      	adds	r3, #20
 8006afa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006afe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006b02:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006b04:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006b06:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006b0a:	e841 2300 	strex	r3, r2, [r1]
 8006b0e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1e1      	bne.n	8006ada <HAL_UART_IRQHandler+0x2fe>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	3314      	adds	r3, #20
 8006b1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b20:	e853 3f00 	ldrex	r3, [r3]
 8006b24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	3314      	adds	r3, #20
 8006b36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006b3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006b3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b3e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006b40:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006b42:	e841 2300 	strex	r3, r2, [r1]
 8006b46:	667b      	str	r3, [r7, #100]	@ 0x64
 8006b48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1e3      	bne.n	8006b16 <HAL_UART_IRQHandler+0x33a>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2220      	movs	r2, #32
 8006b52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	330c      	adds	r3, #12
 8006b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b66:	e853 3f00 	ldrex	r3, [r3]
 8006b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b6e:	f023 0310 	bic.w	r3, r3, #16
 8006b72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	330c      	adds	r3, #12
 8006b7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006b80:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006b82:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b84:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b86:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b88:	e841 2300 	strex	r3, r2, [r1]
 8006b8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d1e3      	bne.n	8006b5c <HAL_UART_IRQHandler+0x380>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7fc f9ad 	bl	8002ef8 <HAL_DMA_Abort>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2202      	movs	r2, #2
 8006ba2:	635a      	str	r2, [r3, #52]	@ 0x34
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 f8cf 	bl	8006d58 <HAL_UARTEx_RxEventCallback>
 8006bba:	e0b3      	b.n	8006d24 <HAL_UART_IRQHandler+0x548>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006bc0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	f040 80ad 	bne.w	8006d24 <HAL_UART_IRQHandler+0x548>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bce:	69db      	ldr	r3, [r3, #28]
 8006bd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bd4:	f040 80a6 	bne.w	8006d24 <HAL_UART_IRQHandler+0x548>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2202      	movs	r2, #2
 8006bdc:	635a      	str	r2, [r3, #52]	@ 0x34
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006be2:	4619      	mov	r1, r3
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f8b7 	bl	8006d58 <HAL_UARTEx_RxEventCallback>
 8006bea:	e09b      	b.n	8006d24 <HAL_UART_IRQHandler+0x548>
 8006bec:	08006eab 	.word	0x08006eab
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	f000 808e 	beq.w	8006d28 <HAL_UART_IRQHandler+0x54c>
 8006c0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f000 8089 	beq.w	8006d28 <HAL_UART_IRQHandler+0x54c>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	330c      	adds	r3, #12
 8006c1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c20:	e853 3f00 	ldrex	r3, [r3]
 8006c24:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c2c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	330c      	adds	r3, #12
 8006c36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006c3a:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c42:	e841 2300 	strex	r3, r2, [r1]
 8006c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1e3      	bne.n	8006c16 <HAL_UART_IRQHandler+0x43a>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	3314      	adds	r3, #20
 8006c54:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c58:	e853 3f00 	ldrex	r3, [r3]
 8006c5c:	623b      	str	r3, [r7, #32]
 8006c5e:	6a3b      	ldr	r3, [r7, #32]
 8006c60:	f023 0301 	bic.w	r3, r3, #1
 8006c64:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3314      	adds	r3, #20
 8006c6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006c72:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c7a:	e841 2300 	strex	r3, r2, [r1]
 8006c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1e3      	bne.n	8006c4e <HAL_UART_IRQHandler+0x472>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2220      	movs	r2, #32
 8006c8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	631a      	str	r2, [r3, #48]	@ 0x30
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	330c      	adds	r3, #12
 8006c9a:	613b      	str	r3, [r7, #16]
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	e853 3f00 	ldrex	r3, [r3]
 8006ca2:	60fb      	str	r3, [r7, #12]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f023 0310 	bic.w	r3, r3, #16
 8006caa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	330c      	adds	r3, #12
 8006cb4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006cb8:	61fa      	str	r2, [r7, #28]
 8006cba:	61bb      	str	r3, [r7, #24]
 8006cbc:	69b9      	ldr	r1, [r7, #24]
 8006cbe:	69fa      	ldr	r2, [r7, #28]
 8006cc0:	e841 2300 	strex	r3, r2, [r1]
 8006cc4:	617b      	str	r3, [r7, #20]
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1e3      	bne.n	8006c94 <HAL_UART_IRQHandler+0x4b8>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	635a      	str	r2, [r3, #52]	@ 0x34
 8006cd2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f83d 	bl	8006d58 <HAL_UARTEx_RxEventCallback>
 8006cde:	e023      	b.n	8006d28 <HAL_UART_IRQHandler+0x54c>
 8006ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d009      	beq.n	8006d00 <HAL_UART_IRQHandler+0x524>
 8006cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d003      	beq.n	8006d00 <HAL_UART_IRQHandler+0x524>
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 f8e7 	bl	8006ecc <UART_Transmit_IT>
 8006cfe:	e014      	b.n	8006d2a <HAL_UART_IRQHandler+0x54e>
 8006d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00e      	beq.n	8006d2a <HAL_UART_IRQHandler+0x54e>
 8006d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d008      	beq.n	8006d2a <HAL_UART_IRQHandler+0x54e>
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f927 	bl	8006f6c <UART_EndTransmit_IT>
 8006d1e:	e004      	b.n	8006d2a <HAL_UART_IRQHandler+0x54e>
 8006d20:	bf00      	nop
 8006d22:	e002      	b.n	8006d2a <HAL_UART_IRQHandler+0x54e>
 8006d24:	bf00      	nop
 8006d26:	e000      	b.n	8006d2a <HAL_UART_IRQHandler+0x54e>
 8006d28:	bf00      	nop
 8006d2a:	37e8      	adds	r7, #232	@ 0xe8
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <HAL_UART_TxCpltCallback>:
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	bf00      	nop
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <HAL_UART_ErrorCallback>:
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <HAL_UARTEx_RxEventCallback>:
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	460b      	mov	r3, r1
 8006d62:	807b      	strh	r3, [r7, #2]
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <UART_Start_Receive_IT>:
 8006d70:	b480      	push	{r7}
 8006d72:	b085      	sub	sp, #20
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	80fb      	strh	r3, [r7, #6]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	629a      	str	r2, [r3, #40]	@ 0x28
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	88fa      	ldrh	r2, [r7, #6]
 8006d88:	859a      	strh	r2, [r3, #44]	@ 0x2c
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	88fa      	ldrh	r2, [r7, #6]
 8006d8e:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	645a      	str	r2, [r3, #68]	@ 0x44
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2222      	movs	r2, #34	@ 0x22
 8006d9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d007      	beq.n	8006db6 <UART_Start_Receive_IT+0x46>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68da      	ldr	r2, [r3, #12]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006db4:	60da      	str	r2, [r3, #12]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	695a      	ldr	r2, [r3, #20]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f042 0201 	orr.w	r2, r2, #1
 8006dc4:	615a      	str	r2, [r3, #20]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68da      	ldr	r2, [r3, #12]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f042 0220 	orr.w	r2, r2, #32
 8006dd4:	60da      	str	r2, [r3, #12]
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3714      	adds	r7, #20
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <UART_EndRxTransfer>:
 8006de4:	b480      	push	{r7}
 8006de6:	b095      	sub	sp, #84	@ 0x54
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	330c      	adds	r3, #12
 8006df2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006df6:	e853 3f00 	ldrex	r3, [r3]
 8006dfa:	633b      	str	r3, [r7, #48]	@ 0x30
 8006dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dfe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	330c      	adds	r3, #12
 8006e0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e0c:	643a      	str	r2, [r7, #64]	@ 0x40
 8006e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e14:	e841 2300 	strex	r3, r2, [r1]
 8006e18:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1e5      	bne.n	8006dec <UART_EndRxTransfer+0x8>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	3314      	adds	r3, #20
 8006e26:	623b      	str	r3, [r7, #32]
 8006e28:	6a3b      	ldr	r3, [r7, #32]
 8006e2a:	e853 3f00 	ldrex	r3, [r3]
 8006e2e:	61fb      	str	r3, [r7, #28]
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	f023 0301 	bic.w	r3, r3, #1
 8006e36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3314      	adds	r3, #20
 8006e3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e48:	e841 2300 	strex	r3, r2, [r1]
 8006e4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d1e5      	bne.n	8006e20 <UART_EndRxTransfer+0x3c>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d119      	bne.n	8006e90 <UART_EndRxTransfer+0xac>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	330c      	adds	r3, #12
 8006e62:	60fb      	str	r3, [r7, #12]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	e853 3f00 	ldrex	r3, [r3]
 8006e6a:	60bb      	str	r3, [r7, #8]
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	f023 0310 	bic.w	r3, r3, #16
 8006e72:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	330c      	adds	r3, #12
 8006e7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e7c:	61ba      	str	r2, [r7, #24]
 8006e7e:	617b      	str	r3, [r7, #20]
 8006e80:	6979      	ldr	r1, [r7, #20]
 8006e82:	69ba      	ldr	r2, [r7, #24]
 8006e84:	e841 2300 	strex	r3, r2, [r1]
 8006e88:	613b      	str	r3, [r7, #16]
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1e5      	bne.n	8006e5c <UART_EndRxTransfer+0x78>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2220      	movs	r2, #32
 8006e94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	631a      	str	r2, [r3, #48]	@ 0x30
 8006e9e:	bf00      	nop
 8006ea0:	3754      	adds	r7, #84	@ 0x54
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr

08006eaa <UART_DMAAbortOnError>:
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b084      	sub	sp, #16
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb6:	60fb      	str	r3, [r7, #12]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f7ff ff40 	bl	8006d44 <HAL_UART_ErrorCallback>
 8006ec4:	bf00      	nop
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <UART_Transmit_IT>:
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b21      	cmp	r3, #33	@ 0x21
 8006ede:	d13e      	bne.n	8006f5e <UART_Transmit_IT+0x92>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ee8:	d114      	bne.n	8006f14 <UART_Transmit_IT+0x48>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d110      	bne.n	8006f14 <UART_Transmit_IT+0x48>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a1b      	ldr	r3, [r3, #32]
 8006ef6:	60fb      	str	r3, [r7, #12]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	881b      	ldrh	r3, [r3, #0]
 8006efc:	461a      	mov	r2, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f06:	605a      	str	r2, [r3, #4]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a1b      	ldr	r3, [r3, #32]
 8006f0c:	1c9a      	adds	r2, r3, #2
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	621a      	str	r2, [r3, #32]
 8006f12:	e008      	b.n	8006f26 <UART_Transmit_IT+0x5a>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6a1b      	ldr	r3, [r3, #32]
 8006f18:	1c59      	adds	r1, r3, #1
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	6211      	str	r1, [r2, #32]
 8006f1e:	781a      	ldrb	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	605a      	str	r2, [r3, #4]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	4619      	mov	r1, r3
 8006f34:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10f      	bne.n	8006f5a <UART_Transmit_IT+0x8e>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68da      	ldr	r2, [r3, #12]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006f48:	60da      	str	r2, [r3, #12]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68da      	ldr	r2, [r3, #12]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f58:	60da      	str	r2, [r3, #12]
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	e000      	b.n	8006f60 <UART_Transmit_IT+0x94>
 8006f5e:	2302      	movs	r3, #2
 8006f60:	4618      	mov	r0, r3
 8006f62:	3714      	adds	r7, #20
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <UART_EndTransmit_IT>:
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68da      	ldr	r2, [r3, #12]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f82:	60da      	str	r2, [r3, #12]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2220      	movs	r2, #32
 8006f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f7ff fecf 	bl	8006d30 <HAL_UART_TxCpltCallback>
 8006f92:	2300      	movs	r3, #0
 8006f94:	4618      	mov	r0, r3
 8006f96:	3708      	adds	r7, #8
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <UART_Receive_IT>:
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b08c      	sub	sp, #48	@ 0x30
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fa8:	2300      	movs	r3, #0
 8006faa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	2b22      	cmp	r3, #34	@ 0x22
 8006fb6:	f040 80aa 	bne.w	800710e <UART_Receive_IT+0x172>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fc2:	d115      	bne.n	8006ff0 <UART_Receive_IT+0x54>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d111      	bne.n	8006ff0 <UART_Receive_IT+0x54>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fde:	b29a      	uxth	r2, r3
 8006fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fe2:	801a      	strh	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fe8:	1c9a      	adds	r2, r3, #2
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	629a      	str	r2, [r3, #40]	@ 0x28
 8006fee:	e024      	b.n	800703a <UART_Receive_IT+0x9e>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ffe:	d007      	beq.n	8007010 <UART_Receive_IT+0x74>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10a      	bne.n	800701e <UART_Receive_IT+0x82>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d106      	bne.n	800701e <UART_Receive_IT+0x82>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	b2da      	uxtb	r2, r3
 8007018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800701a:	701a      	strb	r2, [r3, #0]
 800701c:	e008      	b.n	8007030 <UART_Receive_IT+0x94>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	b2db      	uxtb	r3, r3
 8007026:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800702a:	b2da      	uxtb	r2, r3
 800702c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800702e:	701a      	strb	r2, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007034:	1c5a      	adds	r2, r3, #1
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	629a      	str	r2, [r3, #40]	@ 0x28
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800703e:	b29b      	uxth	r3, r3
 8007040:	3b01      	subs	r3, #1
 8007042:	b29b      	uxth	r3, r3
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	4619      	mov	r1, r3
 8007048:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800704a:	2b00      	cmp	r3, #0
 800704c:	d15d      	bne.n	800710a <UART_Receive_IT+0x16e>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68da      	ldr	r2, [r3, #12]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f022 0220 	bic.w	r2, r2, #32
 800705c:	60da      	str	r2, [r3, #12]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68da      	ldr	r2, [r3, #12]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800706c:	60da      	str	r2, [r3, #12]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	695a      	ldr	r2, [r3, #20]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f022 0201 	bic.w	r2, r2, #1
 800707c:	615a      	str	r2, [r3, #20]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2220      	movs	r2, #32
 8007082:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	635a      	str	r2, [r3, #52]	@ 0x34
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007090:	2b01      	cmp	r3, #1
 8007092:	d135      	bne.n	8007100 <UART_Receive_IT+0x164>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	631a      	str	r2, [r3, #48]	@ 0x30
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	330c      	adds	r3, #12
 80070a0:	617b      	str	r3, [r7, #20]
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	e853 3f00 	ldrex	r3, [r3]
 80070a8:	613b      	str	r3, [r7, #16]
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	f023 0310 	bic.w	r3, r3, #16
 80070b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	330c      	adds	r3, #12
 80070b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070ba:	623a      	str	r2, [r7, #32]
 80070bc:	61fb      	str	r3, [r7, #28]
 80070be:	69f9      	ldr	r1, [r7, #28]
 80070c0:	6a3a      	ldr	r2, [r7, #32]
 80070c2:	e841 2300 	strex	r3, r2, [r1]
 80070c6:	61bb      	str	r3, [r7, #24]
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1e5      	bne.n	800709a <UART_Receive_IT+0xfe>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 0310 	and.w	r3, r3, #16
 80070d8:	2b10      	cmp	r3, #16
 80070da:	d10a      	bne.n	80070f2 <UART_Receive_IT+0x156>
 80070dc:	2300      	movs	r3, #0
 80070de:	60fb      	str	r3, [r7, #12]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	60fb      	str	r3, [r7, #12]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	60fb      	str	r3, [r7, #12]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80070f6:	4619      	mov	r1, r3
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f7ff fe2d 	bl	8006d58 <HAL_UARTEx_RxEventCallback>
 80070fe:	e002      	b.n	8007106 <UART_Receive_IT+0x16a>
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f7fb fa53 	bl	80025ac <HAL_UART_RxCpltCallback>
 8007106:	2300      	movs	r3, #0
 8007108:	e002      	b.n	8007110 <UART_Receive_IT+0x174>
 800710a:	2300      	movs	r3, #0
 800710c:	e000      	b.n	8007110 <UART_Receive_IT+0x174>
 800710e:	2302      	movs	r3, #2
 8007110:	4618      	mov	r0, r3
 8007112:	3730      	adds	r7, #48	@ 0x30
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <UART_SetConfig>:
 8007118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800711c:	b0c0      	sub	sp, #256	@ 0x100
 800711e:	af00      	add	r7, sp, #0
 8007120:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
 8007124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007134:	68d9      	ldr	r1, [r3, #12]
 8007136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	ea40 0301 	orr.w	r3, r0, r1
 8007140:	6113      	str	r3, [r2, #16]
 8007142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007146:	689a      	ldr	r2, [r3, #8]
 8007148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	431a      	orrs	r2, r3
 8007150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007154:	695b      	ldr	r3, [r3, #20]
 8007156:	431a      	orrs	r2, r3
 8007158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800715c:	69db      	ldr	r3, [r3, #28]
 800715e:	4313      	orrs	r3, r2
 8007160:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007170:	f021 010c 	bic.w	r1, r1, #12
 8007174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800717e:	430b      	orrs	r3, r1
 8007180:	60d3      	str	r3, [r2, #12]
 8007182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	695b      	ldr	r3, [r3, #20]
 800718a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800718e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007192:	6999      	ldr	r1, [r3, #24]
 8007194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	ea40 0301 	orr.w	r3, r0, r1
 800719e:	6153      	str	r3, [r2, #20]
 80071a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	4b8f      	ldr	r3, [pc, #572]	@ (80073e4 <UART_SetConfig+0x2cc>)
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d005      	beq.n	80071b8 <UART_SetConfig+0xa0>
 80071ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	4b8d      	ldr	r3, [pc, #564]	@ (80073e8 <UART_SetConfig+0x2d0>)
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d104      	bne.n	80071c2 <UART_SetConfig+0xaa>
 80071b8:	f7fe f966 	bl	8005488 <HAL_RCC_GetPCLK2Freq>
 80071bc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80071c0:	e003      	b.n	80071ca <UART_SetConfig+0xb2>
 80071c2:	f7fe f94d 	bl	8005460 <HAL_RCC_GetPCLK1Freq>
 80071c6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80071ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ce:	69db      	ldr	r3, [r3, #28]
 80071d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071d4:	f040 810c 	bne.w	80073f0 <UART_SetConfig+0x2d8>
 80071d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071dc:	2200      	movs	r2, #0
 80071de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80071e2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80071e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80071ea:	4622      	mov	r2, r4
 80071ec:	462b      	mov	r3, r5
 80071ee:	1891      	adds	r1, r2, r2
 80071f0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80071f2:	415b      	adcs	r3, r3
 80071f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80071f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80071fa:	4621      	mov	r1, r4
 80071fc:	eb12 0801 	adds.w	r8, r2, r1
 8007200:	4629      	mov	r1, r5
 8007202:	eb43 0901 	adc.w	r9, r3, r1
 8007206:	f04f 0200 	mov.w	r2, #0
 800720a:	f04f 0300 	mov.w	r3, #0
 800720e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007212:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007216:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800721a:	4690      	mov	r8, r2
 800721c:	4699      	mov	r9, r3
 800721e:	4623      	mov	r3, r4
 8007220:	eb18 0303 	adds.w	r3, r8, r3
 8007224:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007228:	462b      	mov	r3, r5
 800722a:	eb49 0303 	adc.w	r3, r9, r3
 800722e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800723e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007242:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007246:	460b      	mov	r3, r1
 8007248:	18db      	adds	r3, r3, r3
 800724a:	653b      	str	r3, [r7, #80]	@ 0x50
 800724c:	4613      	mov	r3, r2
 800724e:	eb42 0303 	adc.w	r3, r2, r3
 8007252:	657b      	str	r3, [r7, #84]	@ 0x54
 8007254:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007258:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800725c:	f7f8 ffda 	bl	8000214 <__aeabi_uldivmod>
 8007260:	4602      	mov	r2, r0
 8007262:	460b      	mov	r3, r1
 8007264:	4b61      	ldr	r3, [pc, #388]	@ (80073ec <UART_SetConfig+0x2d4>)
 8007266:	fba3 2302 	umull	r2, r3, r3, r2
 800726a:	095b      	lsrs	r3, r3, #5
 800726c:	011c      	lsls	r4, r3, #4
 800726e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007272:	2200      	movs	r2, #0
 8007274:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007278:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800727c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007280:	4642      	mov	r2, r8
 8007282:	464b      	mov	r3, r9
 8007284:	1891      	adds	r1, r2, r2
 8007286:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007288:	415b      	adcs	r3, r3
 800728a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800728c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007290:	4641      	mov	r1, r8
 8007292:	eb12 0a01 	adds.w	sl, r2, r1
 8007296:	4649      	mov	r1, r9
 8007298:	eb43 0b01 	adc.w	fp, r3, r1
 800729c:	f04f 0200 	mov.w	r2, #0
 80072a0:	f04f 0300 	mov.w	r3, #0
 80072a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80072a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80072ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072b0:	4692      	mov	sl, r2
 80072b2:	469b      	mov	fp, r3
 80072b4:	4643      	mov	r3, r8
 80072b6:	eb1a 0303 	adds.w	r3, sl, r3
 80072ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80072be:	464b      	mov	r3, r9
 80072c0:	eb4b 0303 	adc.w	r3, fp, r3
 80072c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80072c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80072d4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80072d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80072dc:	460b      	mov	r3, r1
 80072de:	18db      	adds	r3, r3, r3
 80072e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80072e2:	4613      	mov	r3, r2
 80072e4:	eb42 0303 	adc.w	r3, r2, r3
 80072e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80072ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80072ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80072f2:	f7f8 ff8f 	bl	8000214 <__aeabi_uldivmod>
 80072f6:	4602      	mov	r2, r0
 80072f8:	460b      	mov	r3, r1
 80072fa:	4611      	mov	r1, r2
 80072fc:	4b3b      	ldr	r3, [pc, #236]	@ (80073ec <UART_SetConfig+0x2d4>)
 80072fe:	fba3 2301 	umull	r2, r3, r3, r1
 8007302:	095b      	lsrs	r3, r3, #5
 8007304:	2264      	movs	r2, #100	@ 0x64
 8007306:	fb02 f303 	mul.w	r3, r2, r3
 800730a:	1acb      	subs	r3, r1, r3
 800730c:	00db      	lsls	r3, r3, #3
 800730e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007312:	4b36      	ldr	r3, [pc, #216]	@ (80073ec <UART_SetConfig+0x2d4>)
 8007314:	fba3 2302 	umull	r2, r3, r3, r2
 8007318:	095b      	lsrs	r3, r3, #5
 800731a:	005b      	lsls	r3, r3, #1
 800731c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007320:	441c      	add	r4, r3
 8007322:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007326:	2200      	movs	r2, #0
 8007328:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800732c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007330:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007334:	4642      	mov	r2, r8
 8007336:	464b      	mov	r3, r9
 8007338:	1891      	adds	r1, r2, r2
 800733a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800733c:	415b      	adcs	r3, r3
 800733e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007340:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007344:	4641      	mov	r1, r8
 8007346:	1851      	adds	r1, r2, r1
 8007348:	6339      	str	r1, [r7, #48]	@ 0x30
 800734a:	4649      	mov	r1, r9
 800734c:	414b      	adcs	r3, r1
 800734e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007350:	f04f 0200 	mov.w	r2, #0
 8007354:	f04f 0300 	mov.w	r3, #0
 8007358:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800735c:	4659      	mov	r1, fp
 800735e:	00cb      	lsls	r3, r1, #3
 8007360:	4651      	mov	r1, sl
 8007362:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007366:	4651      	mov	r1, sl
 8007368:	00ca      	lsls	r2, r1, #3
 800736a:	4610      	mov	r0, r2
 800736c:	4619      	mov	r1, r3
 800736e:	4603      	mov	r3, r0
 8007370:	4642      	mov	r2, r8
 8007372:	189b      	adds	r3, r3, r2
 8007374:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007378:	464b      	mov	r3, r9
 800737a:	460a      	mov	r2, r1
 800737c:	eb42 0303 	adc.w	r3, r2, r3
 8007380:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007390:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007394:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007398:	460b      	mov	r3, r1
 800739a:	18db      	adds	r3, r3, r3
 800739c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800739e:	4613      	mov	r3, r2
 80073a0:	eb42 0303 	adc.w	r3, r2, r3
 80073a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80073aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80073ae:	f7f8 ff31 	bl	8000214 <__aeabi_uldivmod>
 80073b2:	4602      	mov	r2, r0
 80073b4:	460b      	mov	r3, r1
 80073b6:	4b0d      	ldr	r3, [pc, #52]	@ (80073ec <UART_SetConfig+0x2d4>)
 80073b8:	fba3 1302 	umull	r1, r3, r3, r2
 80073bc:	095b      	lsrs	r3, r3, #5
 80073be:	2164      	movs	r1, #100	@ 0x64
 80073c0:	fb01 f303 	mul.w	r3, r1, r3
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	00db      	lsls	r3, r3, #3
 80073c8:	3332      	adds	r3, #50	@ 0x32
 80073ca:	4a08      	ldr	r2, [pc, #32]	@ (80073ec <UART_SetConfig+0x2d4>)
 80073cc:	fba2 2303 	umull	r2, r3, r2, r3
 80073d0:	095b      	lsrs	r3, r3, #5
 80073d2:	f003 0207 	and.w	r2, r3, #7
 80073d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4422      	add	r2, r4
 80073de:	609a      	str	r2, [r3, #8]
 80073e0:	e106      	b.n	80075f0 <UART_SetConfig+0x4d8>
 80073e2:	bf00      	nop
 80073e4:	40011000 	.word	0x40011000
 80073e8:	40011400 	.word	0x40011400
 80073ec:	51eb851f 	.word	0x51eb851f
 80073f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073f4:	2200      	movs	r2, #0
 80073f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80073fa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80073fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007402:	4642      	mov	r2, r8
 8007404:	464b      	mov	r3, r9
 8007406:	1891      	adds	r1, r2, r2
 8007408:	6239      	str	r1, [r7, #32]
 800740a:	415b      	adcs	r3, r3
 800740c:	627b      	str	r3, [r7, #36]	@ 0x24
 800740e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007412:	4641      	mov	r1, r8
 8007414:	1854      	adds	r4, r2, r1
 8007416:	4649      	mov	r1, r9
 8007418:	eb43 0501 	adc.w	r5, r3, r1
 800741c:	f04f 0200 	mov.w	r2, #0
 8007420:	f04f 0300 	mov.w	r3, #0
 8007424:	00eb      	lsls	r3, r5, #3
 8007426:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800742a:	00e2      	lsls	r2, r4, #3
 800742c:	4614      	mov	r4, r2
 800742e:	461d      	mov	r5, r3
 8007430:	4643      	mov	r3, r8
 8007432:	18e3      	adds	r3, r4, r3
 8007434:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007438:	464b      	mov	r3, r9
 800743a:	eb45 0303 	adc.w	r3, r5, r3
 800743e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800744e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007452:	f04f 0200 	mov.w	r2, #0
 8007456:	f04f 0300 	mov.w	r3, #0
 800745a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800745e:	4629      	mov	r1, r5
 8007460:	008b      	lsls	r3, r1, #2
 8007462:	4621      	mov	r1, r4
 8007464:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007468:	4621      	mov	r1, r4
 800746a:	008a      	lsls	r2, r1, #2
 800746c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007470:	f7f8 fed0 	bl	8000214 <__aeabi_uldivmod>
 8007474:	4602      	mov	r2, r0
 8007476:	460b      	mov	r3, r1
 8007478:	4b60      	ldr	r3, [pc, #384]	@ (80075fc <UART_SetConfig+0x4e4>)
 800747a:	fba3 2302 	umull	r2, r3, r3, r2
 800747e:	095b      	lsrs	r3, r3, #5
 8007480:	011c      	lsls	r4, r3, #4
 8007482:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007486:	2200      	movs	r2, #0
 8007488:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800748c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007490:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007494:	4642      	mov	r2, r8
 8007496:	464b      	mov	r3, r9
 8007498:	1891      	adds	r1, r2, r2
 800749a:	61b9      	str	r1, [r7, #24]
 800749c:	415b      	adcs	r3, r3
 800749e:	61fb      	str	r3, [r7, #28]
 80074a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074a4:	4641      	mov	r1, r8
 80074a6:	1851      	adds	r1, r2, r1
 80074a8:	6139      	str	r1, [r7, #16]
 80074aa:	4649      	mov	r1, r9
 80074ac:	414b      	adcs	r3, r1
 80074ae:	617b      	str	r3, [r7, #20]
 80074b0:	f04f 0200 	mov.w	r2, #0
 80074b4:	f04f 0300 	mov.w	r3, #0
 80074b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074bc:	4659      	mov	r1, fp
 80074be:	00cb      	lsls	r3, r1, #3
 80074c0:	4651      	mov	r1, sl
 80074c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074c6:	4651      	mov	r1, sl
 80074c8:	00ca      	lsls	r2, r1, #3
 80074ca:	4610      	mov	r0, r2
 80074cc:	4619      	mov	r1, r3
 80074ce:	4603      	mov	r3, r0
 80074d0:	4642      	mov	r2, r8
 80074d2:	189b      	adds	r3, r3, r2
 80074d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80074d8:	464b      	mov	r3, r9
 80074da:	460a      	mov	r2, r1
 80074dc:	eb42 0303 	adc.w	r3, r2, r3
 80074e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80074e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80074ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80074f0:	f04f 0200 	mov.w	r2, #0
 80074f4:	f04f 0300 	mov.w	r3, #0
 80074f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80074fc:	4649      	mov	r1, r9
 80074fe:	008b      	lsls	r3, r1, #2
 8007500:	4641      	mov	r1, r8
 8007502:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007506:	4641      	mov	r1, r8
 8007508:	008a      	lsls	r2, r1, #2
 800750a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800750e:	f7f8 fe81 	bl	8000214 <__aeabi_uldivmod>
 8007512:	4602      	mov	r2, r0
 8007514:	460b      	mov	r3, r1
 8007516:	4611      	mov	r1, r2
 8007518:	4b38      	ldr	r3, [pc, #224]	@ (80075fc <UART_SetConfig+0x4e4>)
 800751a:	fba3 2301 	umull	r2, r3, r3, r1
 800751e:	095b      	lsrs	r3, r3, #5
 8007520:	2264      	movs	r2, #100	@ 0x64
 8007522:	fb02 f303 	mul.w	r3, r2, r3
 8007526:	1acb      	subs	r3, r1, r3
 8007528:	011b      	lsls	r3, r3, #4
 800752a:	3332      	adds	r3, #50	@ 0x32
 800752c:	4a33      	ldr	r2, [pc, #204]	@ (80075fc <UART_SetConfig+0x4e4>)
 800752e:	fba2 2303 	umull	r2, r3, r2, r3
 8007532:	095b      	lsrs	r3, r3, #5
 8007534:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007538:	441c      	add	r4, r3
 800753a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800753e:	2200      	movs	r2, #0
 8007540:	673b      	str	r3, [r7, #112]	@ 0x70
 8007542:	677a      	str	r2, [r7, #116]	@ 0x74
 8007544:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007548:	4642      	mov	r2, r8
 800754a:	464b      	mov	r3, r9
 800754c:	1891      	adds	r1, r2, r2
 800754e:	60b9      	str	r1, [r7, #8]
 8007550:	415b      	adcs	r3, r3
 8007552:	60fb      	str	r3, [r7, #12]
 8007554:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007558:	4641      	mov	r1, r8
 800755a:	1851      	adds	r1, r2, r1
 800755c:	6039      	str	r1, [r7, #0]
 800755e:	4649      	mov	r1, r9
 8007560:	414b      	adcs	r3, r1
 8007562:	607b      	str	r3, [r7, #4]
 8007564:	f04f 0200 	mov.w	r2, #0
 8007568:	f04f 0300 	mov.w	r3, #0
 800756c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007570:	4659      	mov	r1, fp
 8007572:	00cb      	lsls	r3, r1, #3
 8007574:	4651      	mov	r1, sl
 8007576:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800757a:	4651      	mov	r1, sl
 800757c:	00ca      	lsls	r2, r1, #3
 800757e:	4610      	mov	r0, r2
 8007580:	4619      	mov	r1, r3
 8007582:	4603      	mov	r3, r0
 8007584:	4642      	mov	r2, r8
 8007586:	189b      	adds	r3, r3, r2
 8007588:	66bb      	str	r3, [r7, #104]	@ 0x68
 800758a:	464b      	mov	r3, r9
 800758c:	460a      	mov	r2, r1
 800758e:	eb42 0303 	adc.w	r3, r2, r3
 8007592:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	663b      	str	r3, [r7, #96]	@ 0x60
 800759e:	667a      	str	r2, [r7, #100]	@ 0x64
 80075a0:	f04f 0200 	mov.w	r2, #0
 80075a4:	f04f 0300 	mov.w	r3, #0
 80075a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80075ac:	4649      	mov	r1, r9
 80075ae:	008b      	lsls	r3, r1, #2
 80075b0:	4641      	mov	r1, r8
 80075b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075b6:	4641      	mov	r1, r8
 80075b8:	008a      	lsls	r2, r1, #2
 80075ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80075be:	f7f8 fe29 	bl	8000214 <__aeabi_uldivmod>
 80075c2:	4602      	mov	r2, r0
 80075c4:	460b      	mov	r3, r1
 80075c6:	4b0d      	ldr	r3, [pc, #52]	@ (80075fc <UART_SetConfig+0x4e4>)
 80075c8:	fba3 1302 	umull	r1, r3, r3, r2
 80075cc:	095b      	lsrs	r3, r3, #5
 80075ce:	2164      	movs	r1, #100	@ 0x64
 80075d0:	fb01 f303 	mul.w	r3, r1, r3
 80075d4:	1ad3      	subs	r3, r2, r3
 80075d6:	011b      	lsls	r3, r3, #4
 80075d8:	3332      	adds	r3, #50	@ 0x32
 80075da:	4a08      	ldr	r2, [pc, #32]	@ (80075fc <UART_SetConfig+0x4e4>)
 80075dc:	fba2 2303 	umull	r2, r3, r2, r3
 80075e0:	095b      	lsrs	r3, r3, #5
 80075e2:	f003 020f 	and.w	r2, r3, #15
 80075e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4422      	add	r2, r4
 80075ee:	609a      	str	r2, [r3, #8]
 80075f0:	bf00      	nop
 80075f2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80075f6:	46bd      	mov	sp, r7
 80075f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075fc:	51eb851f 	.word	0x51eb851f

08007600 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007604:	4904      	ldr	r1, [pc, #16]	@ (8007618 <MX_FATFS_Init+0x18>)
 8007606:	4805      	ldr	r0, [pc, #20]	@ (800761c <MX_FATFS_Init+0x1c>)
 8007608:	f002 fea6 	bl	800a358 <FATFS_LinkDriver>
 800760c:	4603      	mov	r3, r0
 800760e:	461a      	mov	r2, r3
 8007610:	4b03      	ldr	r3, [pc, #12]	@ (8007620 <MX_FATFS_Init+0x20>)
 8007612:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007614:	bf00      	nop
 8007616:	bd80      	pop	{r7, pc}
 8007618:	20001338 	.word	0x20001338
 800761c:	200001a8 	.word	0x200001a8
 8007620:	20001334 	.word	0x20001334

08007624 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007624:	b480      	push	{r7}
 8007626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007628:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800762a:	4618      	mov	r0, r3
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	4603      	mov	r3, r0
 800763c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	SD_disk_initialize (pdrv);
 800763e:	79fb      	ldrb	r3, [r7, #7]
 8007640:	4618      	mov	r0, r3
 8007642:	f7f9 f931 	bl	80008a8 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 8007646:	bf00      	nop
 8007648:	4618      	mov	r0, r3
 800764a:	3708      	adds	r7, #8
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	4603      	mov	r3, r0
 8007658:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
	SD_disk_status (pdrv);
 800765a:	79fb      	ldrb	r3, [r7, #7]
 800765c:	4618      	mov	r0, r3
 800765e:	f7f9 fa09 	bl	8000a74 <SD_disk_status>
  /* USER CODE END STATUS */
}
 8007662:	bf00      	nop
 8007664:	4618      	mov	r0, r3
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	60b9      	str	r1, [r7, #8]
 8007674:	607a      	str	r2, [r7, #4]
 8007676:	603b      	str	r3, [r7, #0]
 8007678:	4603      	mov	r3, r0
 800767a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	SD_disk_read (pdrv, buff, sector, count);
 800767c:	7bf8      	ldrb	r0, [r7, #15]
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	68b9      	ldr	r1, [r7, #8]
 8007684:	f7f9 fa0c 	bl	8000aa0 <SD_disk_read>
  /* USER CODE END READ */
}
 8007688:	bf00      	nop
 800768a:	4618      	mov	r0, r3
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b084      	sub	sp, #16
 8007696:	af00      	add	r7, sp, #0
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
 800769c:	603b      	str	r3, [r7, #0]
 800769e:	4603      	mov	r3, r0
 80076a0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	SD_disk_write (pdrv, buff, sector, count);
 80076a2:	7bf8      	ldrb	r0, [r7, #15]
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	68b9      	ldr	r1, [r7, #8]
 80076aa:	f7f9 fa63 	bl	8000b74 <SD_disk_write>
  /* USER CODE END WRITE */
}
 80076ae:	bf00      	nop
 80076b0:	4618      	mov	r0, r3
 80076b2:	3710      	adds	r7, #16
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	4603      	mov	r3, r0
 80076c0:	603a      	str	r2, [r7, #0]
 80076c2:	71fb      	strb	r3, [r7, #7]
 80076c4:	460b      	mov	r3, r1
 80076c6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	SD_disk_ioctl (pdrv, cmd, buff);
 80076c8:	79fb      	ldrb	r3, [r7, #7]
 80076ca:	79b9      	ldrb	r1, [r7, #6]
 80076cc:	683a      	ldr	r2, [r7, #0]
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7f9 fad4 	bl	8000c7c <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 80076d4:	bf00      	nop
 80076d6:	4618      	mov	r0, r3
 80076d8:	3708      	adds	r7, #8
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
	...

080076e0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	4603      	mov	r3, r0
 80076e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80076ea:	79fb      	ldrb	r3, [r7, #7]
 80076ec:	4a08      	ldr	r2, [pc, #32]	@ (8007710 <disk_status+0x30>)
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	4413      	add	r3, r2
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	79fa      	ldrb	r2, [r7, #7]
 80076f8:	4905      	ldr	r1, [pc, #20]	@ (8007710 <disk_status+0x30>)
 80076fa:	440a      	add	r2, r1
 80076fc:	7a12      	ldrb	r2, [r2, #8]
 80076fe:	4610      	mov	r0, r2
 8007700:	4798      	blx	r3
 8007702:	4603      	mov	r3, r0
 8007704:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007706:	7bfb      	ldrb	r3, [r7, #15]
}
 8007708:	4618      	mov	r0, r3
 800770a:	3710      	adds	r7, #16
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	20001564 	.word	0x20001564

08007714 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	4603      	mov	r3, r0
 800771c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800771e:	2300      	movs	r3, #0
 8007720:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007722:	79fb      	ldrb	r3, [r7, #7]
 8007724:	4a0e      	ldr	r2, [pc, #56]	@ (8007760 <disk_initialize+0x4c>)
 8007726:	5cd3      	ldrb	r3, [r2, r3]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d114      	bne.n	8007756 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800772c:	79fb      	ldrb	r3, [r7, #7]
 800772e:	4a0c      	ldr	r2, [pc, #48]	@ (8007760 <disk_initialize+0x4c>)
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	4413      	add	r3, r2
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	79fa      	ldrb	r2, [r7, #7]
 800773a:	4909      	ldr	r1, [pc, #36]	@ (8007760 <disk_initialize+0x4c>)
 800773c:	440a      	add	r2, r1
 800773e:	7a12      	ldrb	r2, [r2, #8]
 8007740:	4610      	mov	r0, r2
 8007742:	4798      	blx	r3
 8007744:	4603      	mov	r3, r0
 8007746:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8007748:	7bfb      	ldrb	r3, [r7, #15]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d103      	bne.n	8007756 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800774e:	79fb      	ldrb	r3, [r7, #7]
 8007750:	4a03      	ldr	r2, [pc, #12]	@ (8007760 <disk_initialize+0x4c>)
 8007752:	2101      	movs	r1, #1
 8007754:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8007756:	7bfb      	ldrb	r3, [r7, #15]
}
 8007758:	4618      	mov	r0, r3
 800775a:	3710      	adds	r7, #16
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}
 8007760:	20001564 	.word	0x20001564

08007764 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007764:	b590      	push	{r4, r7, lr}
 8007766:	b087      	sub	sp, #28
 8007768:	af00      	add	r7, sp, #0
 800776a:	60b9      	str	r1, [r7, #8]
 800776c:	607a      	str	r2, [r7, #4]
 800776e:	603b      	str	r3, [r7, #0]
 8007770:	4603      	mov	r3, r0
 8007772:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007774:	7bfb      	ldrb	r3, [r7, #15]
 8007776:	4a0a      	ldr	r2, [pc, #40]	@ (80077a0 <disk_read+0x3c>)
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4413      	add	r3, r2
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	689c      	ldr	r4, [r3, #8]
 8007780:	7bfb      	ldrb	r3, [r7, #15]
 8007782:	4a07      	ldr	r2, [pc, #28]	@ (80077a0 <disk_read+0x3c>)
 8007784:	4413      	add	r3, r2
 8007786:	7a18      	ldrb	r0, [r3, #8]
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	68b9      	ldr	r1, [r7, #8]
 800778e:	47a0      	blx	r4
 8007790:	4603      	mov	r3, r0
 8007792:	75fb      	strb	r3, [r7, #23]
  return res;
 8007794:	7dfb      	ldrb	r3, [r7, #23]
}
 8007796:	4618      	mov	r0, r3
 8007798:	371c      	adds	r7, #28
 800779a:	46bd      	mov	sp, r7
 800779c:	bd90      	pop	{r4, r7, pc}
 800779e:	bf00      	nop
 80077a0:	20001564 	.word	0x20001564

080077a4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80077a4:	b590      	push	{r4, r7, lr}
 80077a6:	b087      	sub	sp, #28
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60b9      	str	r1, [r7, #8]
 80077ac:	607a      	str	r2, [r7, #4]
 80077ae:	603b      	str	r3, [r7, #0]
 80077b0:	4603      	mov	r3, r0
 80077b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
 80077b6:	4a0a      	ldr	r2, [pc, #40]	@ (80077e0 <disk_write+0x3c>)
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	4413      	add	r3, r2
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	68dc      	ldr	r4, [r3, #12]
 80077c0:	7bfb      	ldrb	r3, [r7, #15]
 80077c2:	4a07      	ldr	r2, [pc, #28]	@ (80077e0 <disk_write+0x3c>)
 80077c4:	4413      	add	r3, r2
 80077c6:	7a18      	ldrb	r0, [r3, #8]
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	68b9      	ldr	r1, [r7, #8]
 80077ce:	47a0      	blx	r4
 80077d0:	4603      	mov	r3, r0
 80077d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80077d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	371c      	adds	r7, #28
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd90      	pop	{r4, r7, pc}
 80077de:	bf00      	nop
 80077e0:	20001564 	.word	0x20001564

080077e4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	4603      	mov	r3, r0
 80077ec:	603a      	str	r2, [r7, #0]
 80077ee:	71fb      	strb	r3, [r7, #7]
 80077f0:	460b      	mov	r3, r1
 80077f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80077f4:	79fb      	ldrb	r3, [r7, #7]
 80077f6:	4a09      	ldr	r2, [pc, #36]	@ (800781c <disk_ioctl+0x38>)
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	4413      	add	r3, r2
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	79fa      	ldrb	r2, [r7, #7]
 8007802:	4906      	ldr	r1, [pc, #24]	@ (800781c <disk_ioctl+0x38>)
 8007804:	440a      	add	r2, r1
 8007806:	7a10      	ldrb	r0, [r2, #8]
 8007808:	79b9      	ldrb	r1, [r7, #6]
 800780a:	683a      	ldr	r2, [r7, #0]
 800780c:	4798      	blx	r3
 800780e:	4603      	mov	r3, r0
 8007810:	73fb      	strb	r3, [r7, #15]
  return res;
 8007812:	7bfb      	ldrb	r3, [r7, #15]
}
 8007814:	4618      	mov	r0, r3
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	20001564 	.word	0x20001564

08007820 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	3301      	adds	r3, #1
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007830:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007834:	021b      	lsls	r3, r3, #8
 8007836:	b21a      	sxth	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	b21b      	sxth	r3, r3
 800783e:	4313      	orrs	r3, r2
 8007840:	b21b      	sxth	r3, r3
 8007842:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007844:	89fb      	ldrh	r3, [r7, #14]
}
 8007846:	4618      	mov	r0, r3
 8007848:	3714      	adds	r7, #20
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr

08007852 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007852:	b480      	push	{r7}
 8007854:	b085      	sub	sp, #20
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	3303      	adds	r3, #3
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	021b      	lsls	r3, r3, #8
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	3202      	adds	r2, #2
 800786a:	7812      	ldrb	r2, [r2, #0]
 800786c:	4313      	orrs	r3, r2
 800786e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	021b      	lsls	r3, r3, #8
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	3201      	adds	r2, #1
 8007878:	7812      	ldrb	r2, [r2, #0]
 800787a:	4313      	orrs	r3, r2
 800787c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	021b      	lsls	r3, r3, #8
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	7812      	ldrb	r2, [r2, #0]
 8007886:	4313      	orrs	r3, r2
 8007888:	60fb      	str	r3, [r7, #12]
	return rv;
 800788a:	68fb      	ldr	r3, [r7, #12]
}
 800788c:	4618      	mov	r0, r3
 800788e:	3714      	adds	r7, #20
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	460b      	mov	r3, r1
 80078a2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	1c5a      	adds	r2, r3, #1
 80078a8:	607a      	str	r2, [r7, #4]
 80078aa:	887a      	ldrh	r2, [r7, #2]
 80078ac:	b2d2      	uxtb	r2, r2
 80078ae:	701a      	strb	r2, [r3, #0]
 80078b0:	887b      	ldrh	r3, [r7, #2]
 80078b2:	0a1b      	lsrs	r3, r3, #8
 80078b4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	1c5a      	adds	r2, r3, #1
 80078ba:	607a      	str	r2, [r7, #4]
 80078bc:	887a      	ldrh	r2, [r7, #2]
 80078be:	b2d2      	uxtb	r2, r2
 80078c0:	701a      	strb	r2, [r3, #0]
}
 80078c2:	bf00      	nop
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr

080078ce <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80078ce:	b480      	push	{r7}
 80078d0:	b083      	sub	sp, #12
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
 80078d6:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	1c5a      	adds	r2, r3, #1
 80078dc:	607a      	str	r2, [r7, #4]
 80078de:	683a      	ldr	r2, [r7, #0]
 80078e0:	b2d2      	uxtb	r2, r2
 80078e2:	701a      	strb	r2, [r3, #0]
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	0a1b      	lsrs	r3, r3, #8
 80078e8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	1c5a      	adds	r2, r3, #1
 80078ee:	607a      	str	r2, [r7, #4]
 80078f0:	683a      	ldr	r2, [r7, #0]
 80078f2:	b2d2      	uxtb	r2, r2
 80078f4:	701a      	strb	r2, [r3, #0]
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	0a1b      	lsrs	r3, r3, #8
 80078fa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	1c5a      	adds	r2, r3, #1
 8007900:	607a      	str	r2, [r7, #4]
 8007902:	683a      	ldr	r2, [r7, #0]
 8007904:	b2d2      	uxtb	r2, r2
 8007906:	701a      	strb	r2, [r3, #0]
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	0a1b      	lsrs	r3, r3, #8
 800790c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	1c5a      	adds	r2, r3, #1
 8007912:	607a      	str	r2, [r7, #4]
 8007914:	683a      	ldr	r2, [r7, #0]
 8007916:	b2d2      	uxtb	r2, r2
 8007918:	701a      	strb	r2, [r3, #0]
}
 800791a:	bf00      	nop
 800791c:	370c      	adds	r7, #12
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007926:	b480      	push	{r7}
 8007928:	b087      	sub	sp, #28
 800792a:	af00      	add	r7, sp, #0
 800792c:	60f8      	str	r0, [r7, #12]
 800792e:	60b9      	str	r1, [r7, #8]
 8007930:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00d      	beq.n	800795c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007940:	693a      	ldr	r2, [r7, #16]
 8007942:	1c53      	adds	r3, r2, #1
 8007944:	613b      	str	r3, [r7, #16]
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	1c59      	adds	r1, r3, #1
 800794a:	6179      	str	r1, [r7, #20]
 800794c:	7812      	ldrb	r2, [r2, #0]
 800794e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	3b01      	subs	r3, #1
 8007954:	607b      	str	r3, [r7, #4]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d1f1      	bne.n	8007940 <mem_cpy+0x1a>
	}
}
 800795c:	bf00      	nop
 800795e:	371c      	adds	r7, #28
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007968:	b480      	push	{r7}
 800796a:	b087      	sub	sp, #28
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	1c5a      	adds	r2, r3, #1
 800797c:	617a      	str	r2, [r7, #20]
 800797e:	68ba      	ldr	r2, [r7, #8]
 8007980:	b2d2      	uxtb	r2, r2
 8007982:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	3b01      	subs	r3, #1
 8007988:	607b      	str	r3, [r7, #4]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d1f3      	bne.n	8007978 <mem_set+0x10>
}
 8007990:	bf00      	nop
 8007992:	bf00      	nop
 8007994:	371c      	adds	r7, #28
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800799e:	b480      	push	{r7}
 80079a0:	b089      	sub	sp, #36	@ 0x24
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	60f8      	str	r0, [r7, #12]
 80079a6:	60b9      	str	r1, [r7, #8]
 80079a8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	61fb      	str	r3, [r7, #28]
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80079b2:	2300      	movs	r3, #0
 80079b4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	1c5a      	adds	r2, r3, #1
 80079ba:	61fa      	str	r2, [r7, #28]
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	4619      	mov	r1, r3
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	1c5a      	adds	r2, r3, #1
 80079c4:	61ba      	str	r2, [r7, #24]
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	1acb      	subs	r3, r1, r3
 80079ca:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	3b01      	subs	r3, #1
 80079d0:	607b      	str	r3, [r7, #4]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d002      	beq.n	80079de <mem_cmp+0x40>
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d0eb      	beq.n	80079b6 <mem_cmp+0x18>

	return r;
 80079de:	697b      	ldr	r3, [r7, #20]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3724      	adds	r7, #36	@ 0x24
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80079f6:	e002      	b.n	80079fe <chk_chr+0x12>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	3301      	adds	r3, #1
 80079fc:	607b      	str	r3, [r7, #4]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d005      	beq.n	8007a12 <chk_chr+0x26>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d1f2      	bne.n	80079f8 <chk_chr+0xc>
	return *str;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	781b      	ldrb	r3, [r3, #0]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
	...

08007a24 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007a2e:	2300      	movs	r3, #0
 8007a30:	60bb      	str	r3, [r7, #8]
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	60fb      	str	r3, [r7, #12]
 8007a36:	e029      	b.n	8007a8c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007a38:	4a27      	ldr	r2, [pc, #156]	@ (8007ad8 <chk_lock+0xb4>)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	011b      	lsls	r3, r3, #4
 8007a3e:	4413      	add	r3, r2
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d01d      	beq.n	8007a82 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007a46:	4a24      	ldr	r2, [pc, #144]	@ (8007ad8 <chk_lock+0xb4>)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	011b      	lsls	r3, r3, #4
 8007a4c:	4413      	add	r3, r2
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d116      	bne.n	8007a86 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007a58:	4a1f      	ldr	r2, [pc, #124]	@ (8007ad8 <chk_lock+0xb4>)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	011b      	lsls	r3, r3, #4
 8007a5e:	4413      	add	r3, r2
 8007a60:	3304      	adds	r3, #4
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d10c      	bne.n	8007a86 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007a6c:	4a1a      	ldr	r2, [pc, #104]	@ (8007ad8 <chk_lock+0xb4>)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	011b      	lsls	r3, r3, #4
 8007a72:	4413      	add	r3, r2
 8007a74:	3308      	adds	r3, #8
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d102      	bne.n	8007a86 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007a80:	e007      	b.n	8007a92 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007a82:	2301      	movs	r3, #1
 8007a84:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	60fb      	str	r3, [r7, #12]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d9d2      	bls.n	8007a38 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d109      	bne.n	8007aac <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d102      	bne.n	8007aa4 <chk_lock+0x80>
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	d101      	bne.n	8007aa8 <chk_lock+0x84>
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	e010      	b.n	8007aca <chk_lock+0xa6>
 8007aa8:	2312      	movs	r3, #18
 8007aaa:	e00e      	b.n	8007aca <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d108      	bne.n	8007ac4 <chk_lock+0xa0>
 8007ab2:	4a09      	ldr	r2, [pc, #36]	@ (8007ad8 <chk_lock+0xb4>)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	011b      	lsls	r3, r3, #4
 8007ab8:	4413      	add	r3, r2
 8007aba:	330c      	adds	r3, #12
 8007abc:	881b      	ldrh	r3, [r3, #0]
 8007abe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ac2:	d101      	bne.n	8007ac8 <chk_lock+0xa4>
 8007ac4:	2310      	movs	r3, #16
 8007ac6:	e000      	b.n	8007aca <chk_lock+0xa6>
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3714      	adds	r7, #20
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	20001344 	.word	0x20001344

08007adc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	607b      	str	r3, [r7, #4]
 8007ae6:	e002      	b.n	8007aee <enq_lock+0x12>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	3301      	adds	r3, #1
 8007aec:	607b      	str	r3, [r7, #4]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d806      	bhi.n	8007b02 <enq_lock+0x26>
 8007af4:	4a09      	ldr	r2, [pc, #36]	@ (8007b1c <enq_lock+0x40>)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	011b      	lsls	r3, r3, #4
 8007afa:	4413      	add	r3, r2
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1f2      	bne.n	8007ae8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	bf14      	ite	ne
 8007b08:	2301      	movne	r3, #1
 8007b0a:	2300      	moveq	r3, #0
 8007b0c:	b2db      	uxtb	r3, r3
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	370c      	adds	r7, #12
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	20001344 	.word	0x20001344

08007b20 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b085      	sub	sp, #20
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	60fb      	str	r3, [r7, #12]
 8007b2e:	e01f      	b.n	8007b70 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007b30:	4a41      	ldr	r2, [pc, #260]	@ (8007c38 <inc_lock+0x118>)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	011b      	lsls	r3, r3, #4
 8007b36:	4413      	add	r3, r2
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d113      	bne.n	8007b6a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007b42:	4a3d      	ldr	r2, [pc, #244]	@ (8007c38 <inc_lock+0x118>)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	011b      	lsls	r3, r3, #4
 8007b48:	4413      	add	r3, r2
 8007b4a:	3304      	adds	r3, #4
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d109      	bne.n	8007b6a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007b56:	4a38      	ldr	r2, [pc, #224]	@ (8007c38 <inc_lock+0x118>)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	011b      	lsls	r3, r3, #4
 8007b5c:	4413      	add	r3, r2
 8007b5e:	3308      	adds	r3, #8
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d006      	beq.n	8007b78 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	60fb      	str	r3, [r7, #12]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d9dc      	bls.n	8007b30 <inc_lock+0x10>
 8007b76:	e000      	b.n	8007b7a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007b78:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	d132      	bne.n	8007be6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007b80:	2300      	movs	r3, #0
 8007b82:	60fb      	str	r3, [r7, #12]
 8007b84:	e002      	b.n	8007b8c <inc_lock+0x6c>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	60fb      	str	r3, [r7, #12]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d806      	bhi.n	8007ba0 <inc_lock+0x80>
 8007b92:	4a29      	ldr	r2, [pc, #164]	@ (8007c38 <inc_lock+0x118>)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	011b      	lsls	r3, r3, #4
 8007b98:	4413      	add	r3, r2
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d1f2      	bne.n	8007b86 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	d101      	bne.n	8007baa <inc_lock+0x8a>
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	e040      	b.n	8007c2c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	4922      	ldr	r1, [pc, #136]	@ (8007c38 <inc_lock+0x118>)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	011b      	lsls	r3, r3, #4
 8007bb4:	440b      	add	r3, r1
 8007bb6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	689a      	ldr	r2, [r3, #8]
 8007bbc:	491e      	ldr	r1, [pc, #120]	@ (8007c38 <inc_lock+0x118>)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	011b      	lsls	r3, r3, #4
 8007bc2:	440b      	add	r3, r1
 8007bc4:	3304      	adds	r3, #4
 8007bc6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	695a      	ldr	r2, [r3, #20]
 8007bcc:	491a      	ldr	r1, [pc, #104]	@ (8007c38 <inc_lock+0x118>)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	011b      	lsls	r3, r3, #4
 8007bd2:	440b      	add	r3, r1
 8007bd4:	3308      	adds	r3, #8
 8007bd6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007bd8:	4a17      	ldr	r2, [pc, #92]	@ (8007c38 <inc_lock+0x118>)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	011b      	lsls	r3, r3, #4
 8007bde:	4413      	add	r3, r2
 8007be0:	330c      	adds	r3, #12
 8007be2:	2200      	movs	r2, #0
 8007be4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d009      	beq.n	8007c00 <inc_lock+0xe0>
 8007bec:	4a12      	ldr	r2, [pc, #72]	@ (8007c38 <inc_lock+0x118>)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	011b      	lsls	r3, r3, #4
 8007bf2:	4413      	add	r3, r2
 8007bf4:	330c      	adds	r3, #12
 8007bf6:	881b      	ldrh	r3, [r3, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d001      	beq.n	8007c00 <inc_lock+0xe0>
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	e015      	b.n	8007c2c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d108      	bne.n	8007c18 <inc_lock+0xf8>
 8007c06:	4a0c      	ldr	r2, [pc, #48]	@ (8007c38 <inc_lock+0x118>)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	011b      	lsls	r3, r3, #4
 8007c0c:	4413      	add	r3, r2
 8007c0e:	330c      	adds	r3, #12
 8007c10:	881b      	ldrh	r3, [r3, #0]
 8007c12:	3301      	adds	r3, #1
 8007c14:	b29a      	uxth	r2, r3
 8007c16:	e001      	b.n	8007c1c <inc_lock+0xfc>
 8007c18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007c1c:	4906      	ldr	r1, [pc, #24]	@ (8007c38 <inc_lock+0x118>)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	011b      	lsls	r3, r3, #4
 8007c22:	440b      	add	r3, r1
 8007c24:	330c      	adds	r3, #12
 8007c26:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	3301      	adds	r3, #1
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3714      	adds	r7, #20
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr
 8007c38:	20001344 	.word	0x20001344

08007c3c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	3b01      	subs	r3, #1
 8007c48:	607b      	str	r3, [r7, #4]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d825      	bhi.n	8007c9c <dec_lock+0x60>
		n = Files[i].ctr;
 8007c50:	4a17      	ldr	r2, [pc, #92]	@ (8007cb0 <dec_lock+0x74>)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	011b      	lsls	r3, r3, #4
 8007c56:	4413      	add	r3, r2
 8007c58:	330c      	adds	r3, #12
 8007c5a:	881b      	ldrh	r3, [r3, #0]
 8007c5c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007c5e:	89fb      	ldrh	r3, [r7, #14]
 8007c60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c64:	d101      	bne.n	8007c6a <dec_lock+0x2e>
 8007c66:	2300      	movs	r3, #0
 8007c68:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007c6a:	89fb      	ldrh	r3, [r7, #14]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d002      	beq.n	8007c76 <dec_lock+0x3a>
 8007c70:	89fb      	ldrh	r3, [r7, #14]
 8007c72:	3b01      	subs	r3, #1
 8007c74:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007c76:	4a0e      	ldr	r2, [pc, #56]	@ (8007cb0 <dec_lock+0x74>)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	011b      	lsls	r3, r3, #4
 8007c7c:	4413      	add	r3, r2
 8007c7e:	330c      	adds	r3, #12
 8007c80:	89fa      	ldrh	r2, [r7, #14]
 8007c82:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007c84:	89fb      	ldrh	r3, [r7, #14]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d105      	bne.n	8007c96 <dec_lock+0x5a>
 8007c8a:	4a09      	ldr	r2, [pc, #36]	@ (8007cb0 <dec_lock+0x74>)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	011b      	lsls	r3, r3, #4
 8007c90:	4413      	add	r3, r2
 8007c92:	2200      	movs	r2, #0
 8007c94:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007c96:	2300      	movs	r3, #0
 8007c98:	737b      	strb	r3, [r7, #13]
 8007c9a:	e001      	b.n	8007ca0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007c9c:	2302      	movs	r3, #2
 8007c9e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007ca0:	7b7b      	ldrb	r3, [r7, #13]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3714      	adds	r7, #20
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr
 8007cae:	bf00      	nop
 8007cb0:	20001344 	.word	0x20001344

08007cb4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	60fb      	str	r3, [r7, #12]
 8007cc0:	e010      	b.n	8007ce4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007cc2:	4a0d      	ldr	r2, [pc, #52]	@ (8007cf8 <clear_lock+0x44>)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	011b      	lsls	r3, r3, #4
 8007cc8:	4413      	add	r3, r2
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d105      	bne.n	8007cde <clear_lock+0x2a>
 8007cd2:	4a09      	ldr	r2, [pc, #36]	@ (8007cf8 <clear_lock+0x44>)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	011b      	lsls	r3, r3, #4
 8007cd8:	4413      	add	r3, r2
 8007cda:	2200      	movs	r2, #0
 8007cdc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	60fb      	str	r3, [r7, #12]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d9eb      	bls.n	8007cc2 <clear_lock+0xe>
	}
}
 8007cea:	bf00      	nop
 8007cec:	bf00      	nop
 8007cee:	3714      	adds	r7, #20
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr
 8007cf8:	20001344 	.word	0x20001344

08007cfc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b086      	sub	sp, #24
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007d04:	2300      	movs	r3, #0
 8007d06:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	78db      	ldrb	r3, [r3, #3]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d034      	beq.n	8007d7a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d14:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	7858      	ldrb	r0, [r3, #1]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007d20:	2301      	movs	r3, #1
 8007d22:	697a      	ldr	r2, [r7, #20]
 8007d24:	f7ff fd3e 	bl	80077a4 <disk_write>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d002      	beq.n	8007d34 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	73fb      	strb	r3, [r7, #15]
 8007d32:	e022      	b.n	8007d7a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d3e:	697a      	ldr	r2, [r7, #20]
 8007d40:	1ad2      	subs	r2, r2, r3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a1b      	ldr	r3, [r3, #32]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d217      	bcs.n	8007d7a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	789b      	ldrb	r3, [r3, #2]
 8007d4e:	613b      	str	r3, [r7, #16]
 8007d50:	e010      	b.n	8007d74 <sync_window+0x78>
					wsect += fs->fsize;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a1b      	ldr	r3, [r3, #32]
 8007d56:	697a      	ldr	r2, [r7, #20]
 8007d58:	4413      	add	r3, r2
 8007d5a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	7858      	ldrb	r0, [r3, #1]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007d66:	2301      	movs	r3, #1
 8007d68:	697a      	ldr	r2, [r7, #20]
 8007d6a:	f7ff fd1b 	bl	80077a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	3b01      	subs	r3, #1
 8007d72:	613b      	str	r3, [r7, #16]
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d8eb      	bhi.n	8007d52 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3718      	adds	r7, #24
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d96:	683a      	ldr	r2, [r7, #0]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d01b      	beq.n	8007dd4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f7ff ffad 	bl	8007cfc <sync_window>
 8007da2:	4603      	mov	r3, r0
 8007da4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007da6:	7bfb      	ldrb	r3, [r7, #15]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d113      	bne.n	8007dd4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	7858      	ldrb	r0, [r3, #1]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007db6:	2301      	movs	r3, #1
 8007db8:	683a      	ldr	r2, [r7, #0]
 8007dba:	f7ff fcd3 	bl	8007764 <disk_read>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d004      	beq.n	8007dce <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8007dc8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	683a      	ldr	r2, [r7, #0]
 8007dd2:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8007dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
	...

08007de0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f7ff ff87 	bl	8007cfc <sync_window>
 8007dee:	4603      	mov	r3, r0
 8007df0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007df2:	7bfb      	ldrb	r3, [r7, #15]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d159      	bne.n	8007eac <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	2b03      	cmp	r3, #3
 8007dfe:	d149      	bne.n	8007e94 <sync_fs+0xb4>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	791b      	ldrb	r3, [r3, #4]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d145      	bne.n	8007e94 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	899b      	ldrh	r3, [r3, #12]
 8007e12:	461a      	mov	r2, r3
 8007e14:	2100      	movs	r1, #0
 8007e16:	f7ff fda7 	bl	8007968 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	3338      	adds	r3, #56	@ 0x38
 8007e1e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007e22:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7ff fd36 	bl	8007898 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	3338      	adds	r3, #56	@ 0x38
 8007e30:	4921      	ldr	r1, [pc, #132]	@ (8007eb8 <sync_fs+0xd8>)
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7ff fd4b 	bl	80078ce <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	3338      	adds	r3, #56	@ 0x38
 8007e3c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007e40:	491e      	ldr	r1, [pc, #120]	@ (8007ebc <sync_fs+0xdc>)
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7ff fd43 	bl	80078ce <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	3338      	adds	r3, #56	@ 0x38
 8007e4c:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	699b      	ldr	r3, [r3, #24]
 8007e54:	4619      	mov	r1, r3
 8007e56:	4610      	mov	r0, r2
 8007e58:	f7ff fd39 	bl	80078ce <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	3338      	adds	r3, #56	@ 0x38
 8007e60:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	695b      	ldr	r3, [r3, #20]
 8007e68:	4619      	mov	r1, r3
 8007e6a:	4610      	mov	r0, r2
 8007e6c:	f7ff fd2f 	bl	80078ce <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e74:	1c5a      	adds	r2, r3, #1
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	7858      	ldrb	r0, [r3, #1]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e88:	2301      	movs	r3, #1
 8007e8a:	f7ff fc8b 	bl	80077a4 <disk_write>
			fs->fsi_flag = 0;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	785b      	ldrb	r3, [r3, #1]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	2100      	movs	r1, #0
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7ff fca1 	bl	80077e4 <disk_ioctl>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d001      	beq.n	8007eac <sync_fs+0xcc>
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3710      	adds	r7, #16
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	41615252 	.word	0x41615252
 8007ebc:	61417272 	.word	0x61417272

08007ec0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	3b02      	subs	r3, #2
 8007ece:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	69db      	ldr	r3, [r3, #28]
 8007ed4:	3b02      	subs	r3, #2
 8007ed6:	683a      	ldr	r2, [r7, #0]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d301      	bcc.n	8007ee0 <clust2sect+0x20>
 8007edc:	2300      	movs	r3, #0
 8007ede:	e008      	b.n	8007ef2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	895b      	ldrh	r3, [r3, #10]
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	fb03 f202 	mul.w	r2, r3, r2
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ef0:	4413      	add	r3, r2
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	370c      	adds	r7, #12
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr

08007efe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007efe:	b580      	push	{r7, lr}
 8007f00:	b086      	sub	sp, #24
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
 8007f06:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d904      	bls.n	8007f1e <get_fat+0x20>
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	69db      	ldr	r3, [r3, #28]
 8007f18:	683a      	ldr	r2, [r7, #0]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d302      	bcc.n	8007f24 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007f1e:	2301      	movs	r3, #1
 8007f20:	617b      	str	r3, [r7, #20]
 8007f22:	e0ba      	b.n	800809a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007f24:	f04f 33ff 	mov.w	r3, #4294967295
 8007f28:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	2b03      	cmp	r3, #3
 8007f30:	f000 8082 	beq.w	8008038 <get_fat+0x13a>
 8007f34:	2b03      	cmp	r3, #3
 8007f36:	f300 80a6 	bgt.w	8008086 <get_fat+0x188>
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d002      	beq.n	8007f44 <get_fat+0x46>
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d055      	beq.n	8007fee <get_fat+0xf0>
 8007f42:	e0a0      	b.n	8008086 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	60fb      	str	r3, [r7, #12]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	085b      	lsrs	r3, r3, #1
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	4413      	add	r3, r2
 8007f50:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	899b      	ldrh	r3, [r3, #12]
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f62:	4413      	add	r3, r2
 8007f64:	4619      	mov	r1, r3
 8007f66:	6938      	ldr	r0, [r7, #16]
 8007f68:	f7ff ff0c 	bl	8007d84 <move_window>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	f040 808c 	bne.w	800808c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	1c5a      	adds	r2, r3, #1
 8007f78:	60fa      	str	r2, [r7, #12]
 8007f7a:	693a      	ldr	r2, [r7, #16]
 8007f7c:	8992      	ldrh	r2, [r2, #12]
 8007f7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f82:	fb01 f202 	mul.w	r2, r1, r2
 8007f86:	1a9b      	subs	r3, r3, r2
 8007f88:	693a      	ldr	r2, [r7, #16]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007f90:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	899b      	ldrh	r3, [r3, #12]
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007fa2:	4413      	add	r3, r2
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	6938      	ldr	r0, [r7, #16]
 8007fa8:	f7ff feec 	bl	8007d84 <move_window>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d16e      	bne.n	8008090 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	899b      	ldrh	r3, [r3, #12]
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	fbb3 f1f2 	udiv	r1, r3, r2
 8007fbe:	fb01 f202 	mul.w	r2, r1, r2
 8007fc2:	1a9b      	subs	r3, r3, r2
 8007fc4:	693a      	ldr	r2, [r7, #16]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007fcc:	021b      	lsls	r3, r3, #8
 8007fce:	68ba      	ldr	r2, [r7, #8]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	f003 0301 	and.w	r3, r3, #1
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d002      	beq.n	8007fe4 <get_fat+0xe6>
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	091b      	lsrs	r3, r3, #4
 8007fe2:	e002      	b.n	8007fea <get_fat+0xec>
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fea:	617b      	str	r3, [r7, #20]
			break;
 8007fec:	e055      	b.n	800809a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	899b      	ldrh	r3, [r3, #12]
 8007ff6:	085b      	lsrs	r3, r3, #1
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8008002:	4413      	add	r3, r2
 8008004:	4619      	mov	r1, r3
 8008006:	6938      	ldr	r0, [r7, #16]
 8008008:	f7ff febc 	bl	8007d84 <move_window>
 800800c:	4603      	mov	r3, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	d140      	bne.n	8008094 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	005b      	lsls	r3, r3, #1
 800801c:	693a      	ldr	r2, [r7, #16]
 800801e:	8992      	ldrh	r2, [r2, #12]
 8008020:	fbb3 f0f2 	udiv	r0, r3, r2
 8008024:	fb00 f202 	mul.w	r2, r0, r2
 8008028:	1a9b      	subs	r3, r3, r2
 800802a:	440b      	add	r3, r1
 800802c:	4618      	mov	r0, r3
 800802e:	f7ff fbf7 	bl	8007820 <ld_word>
 8008032:	4603      	mov	r3, r0
 8008034:	617b      	str	r3, [r7, #20]
			break;
 8008036:	e030      	b.n	800809a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	899b      	ldrh	r3, [r3, #12]
 8008040:	089b      	lsrs	r3, r3, #2
 8008042:	b29b      	uxth	r3, r3
 8008044:	4619      	mov	r1, r3
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	fbb3 f3f1 	udiv	r3, r3, r1
 800804c:	4413      	add	r3, r2
 800804e:	4619      	mov	r1, r3
 8008050:	6938      	ldr	r0, [r7, #16]
 8008052:	f7ff fe97 	bl	8007d84 <move_window>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d11d      	bne.n	8008098 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	693a      	ldr	r2, [r7, #16]
 8008068:	8992      	ldrh	r2, [r2, #12]
 800806a:	fbb3 f0f2 	udiv	r0, r3, r2
 800806e:	fb00 f202 	mul.w	r2, r0, r2
 8008072:	1a9b      	subs	r3, r3, r2
 8008074:	440b      	add	r3, r1
 8008076:	4618      	mov	r0, r3
 8008078:	f7ff fbeb 	bl	8007852 <ld_dword>
 800807c:	4603      	mov	r3, r0
 800807e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008082:	617b      	str	r3, [r7, #20]
			break;
 8008084:	e009      	b.n	800809a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008086:	2301      	movs	r3, #1
 8008088:	617b      	str	r3, [r7, #20]
 800808a:	e006      	b.n	800809a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800808c:	bf00      	nop
 800808e:	e004      	b.n	800809a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008090:	bf00      	nop
 8008092:	e002      	b.n	800809a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008094:	bf00      	nop
 8008096:	e000      	b.n	800809a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008098:	bf00      	nop
		}
	}

	return val;
 800809a:	697b      	ldr	r3, [r7, #20]
}
 800809c:	4618      	mov	r0, r3
 800809e:	3718      	adds	r7, #24
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80080a4:	b590      	push	{r4, r7, lr}
 80080a6:	b089      	sub	sp, #36	@ 0x24
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80080b0:	2302      	movs	r3, #2
 80080b2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	f240 8109 	bls.w	80082ce <put_fat+0x22a>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	69db      	ldr	r3, [r3, #28]
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	f080 8103 	bcs.w	80082ce <put_fat+0x22a>
		switch (fs->fs_type) {
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	2b03      	cmp	r3, #3
 80080ce:	f000 80b6 	beq.w	800823e <put_fat+0x19a>
 80080d2:	2b03      	cmp	r3, #3
 80080d4:	f300 80fb 	bgt.w	80082ce <put_fat+0x22a>
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d003      	beq.n	80080e4 <put_fat+0x40>
 80080dc:	2b02      	cmp	r3, #2
 80080de:	f000 8083 	beq.w	80081e8 <put_fat+0x144>
 80080e2:	e0f4      	b.n	80082ce <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	61bb      	str	r3, [r7, #24]
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	085b      	lsrs	r3, r3, #1
 80080ec:	69ba      	ldr	r2, [r7, #24]
 80080ee:	4413      	add	r3, r2
 80080f0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	899b      	ldrh	r3, [r3, #12]
 80080fa:	4619      	mov	r1, r3
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8008102:	4413      	add	r3, r2
 8008104:	4619      	mov	r1, r3
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f7ff fe3c 	bl	8007d84 <move_window>
 800810c:	4603      	mov	r3, r0
 800810e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008110:	7ffb      	ldrb	r3, [r7, #31]
 8008112:	2b00      	cmp	r3, #0
 8008114:	f040 80d4 	bne.w	80082c0 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	1c5a      	adds	r2, r3, #1
 8008122:	61ba      	str	r2, [r7, #24]
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	8992      	ldrh	r2, [r2, #12]
 8008128:	fbb3 f0f2 	udiv	r0, r3, r2
 800812c:	fb00 f202 	mul.w	r2, r0, r2
 8008130:	1a9b      	subs	r3, r3, r2
 8008132:	440b      	add	r3, r1
 8008134:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	f003 0301 	and.w	r3, r3, #1
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00d      	beq.n	800815c <put_fat+0xb8>
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	b25b      	sxtb	r3, r3
 8008146:	f003 030f 	and.w	r3, r3, #15
 800814a:	b25a      	sxtb	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	b25b      	sxtb	r3, r3
 8008150:	011b      	lsls	r3, r3, #4
 8008152:	b25b      	sxtb	r3, r3
 8008154:	4313      	orrs	r3, r2
 8008156:	b25b      	sxtb	r3, r3
 8008158:	b2db      	uxtb	r3, r3
 800815a:	e001      	b.n	8008160 <put_fat+0xbc>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	b2db      	uxtb	r3, r3
 8008160:	697a      	ldr	r2, [r7, #20]
 8008162:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2201      	movs	r2, #1
 8008168:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	899b      	ldrh	r3, [r3, #12]
 8008172:	4619      	mov	r1, r3
 8008174:	69bb      	ldr	r3, [r7, #24]
 8008176:	fbb3 f3f1 	udiv	r3, r3, r1
 800817a:	4413      	add	r3, r2
 800817c:	4619      	mov	r1, r3
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f7ff fe00 	bl	8007d84 <move_window>
 8008184:	4603      	mov	r3, r0
 8008186:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008188:	7ffb      	ldrb	r3, [r7, #31]
 800818a:	2b00      	cmp	r3, #0
 800818c:	f040 809a 	bne.w	80082c4 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	899b      	ldrh	r3, [r3, #12]
 800819a:	461a      	mov	r2, r3
 800819c:	69bb      	ldr	r3, [r7, #24]
 800819e:	fbb3 f0f2 	udiv	r0, r3, r2
 80081a2:	fb00 f202 	mul.w	r2, r0, r2
 80081a6:	1a9b      	subs	r3, r3, r2
 80081a8:	440b      	add	r3, r1
 80081aa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	f003 0301 	and.w	r3, r3, #1
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d003      	beq.n	80081be <put_fat+0x11a>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	091b      	lsrs	r3, r3, #4
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	e00e      	b.n	80081dc <put_fat+0x138>
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	b25b      	sxtb	r3, r3
 80081c4:	f023 030f 	bic.w	r3, r3, #15
 80081c8:	b25a      	sxtb	r2, r3
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	0a1b      	lsrs	r3, r3, #8
 80081ce:	b25b      	sxtb	r3, r3
 80081d0:	f003 030f 	and.w	r3, r3, #15
 80081d4:	b25b      	sxtb	r3, r3
 80081d6:	4313      	orrs	r3, r2
 80081d8:	b25b      	sxtb	r3, r3
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	697a      	ldr	r2, [r7, #20]
 80081de:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2201      	movs	r2, #1
 80081e4:	70da      	strb	r2, [r3, #3]
			break;
 80081e6:	e072      	b.n	80082ce <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	899b      	ldrh	r3, [r3, #12]
 80081f0:	085b      	lsrs	r3, r3, #1
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	4619      	mov	r1, r3
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80081fc:	4413      	add	r3, r2
 80081fe:	4619      	mov	r1, r3
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f7ff fdbf 	bl	8007d84 <move_window>
 8008206:	4603      	mov	r3, r0
 8008208:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800820a:	7ffb      	ldrb	r3, [r7, #31]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d15b      	bne.n	80082c8 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	005b      	lsls	r3, r3, #1
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	8992      	ldrh	r2, [r2, #12]
 800821e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008222:	fb00 f202 	mul.w	r2, r0, r2
 8008226:	1a9b      	subs	r3, r3, r2
 8008228:	440b      	add	r3, r1
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	b292      	uxth	r2, r2
 800822e:	4611      	mov	r1, r2
 8008230:	4618      	mov	r0, r3
 8008232:	f7ff fb31 	bl	8007898 <st_word>
			fs->wflag = 1;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2201      	movs	r2, #1
 800823a:	70da      	strb	r2, [r3, #3]
			break;
 800823c:	e047      	b.n	80082ce <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	899b      	ldrh	r3, [r3, #12]
 8008246:	089b      	lsrs	r3, r3, #2
 8008248:	b29b      	uxth	r3, r3
 800824a:	4619      	mov	r1, r3
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008252:	4413      	add	r3, r2
 8008254:	4619      	mov	r1, r3
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	f7ff fd94 	bl	8007d84 <move_window>
 800825c:	4603      	mov	r3, r0
 800825e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008260:	7ffb      	ldrb	r3, [r7, #31]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d132      	bne.n	80082cc <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	68fa      	ldr	r2, [r7, #12]
 8008278:	8992      	ldrh	r2, [r2, #12]
 800827a:	fbb3 f0f2 	udiv	r0, r3, r2
 800827e:	fb00 f202 	mul.w	r2, r0, r2
 8008282:	1a9b      	subs	r3, r3, r2
 8008284:	440b      	add	r3, r1
 8008286:	4618      	mov	r0, r3
 8008288:	f7ff fae3 	bl	8007852 <ld_dword>
 800828c:	4603      	mov	r3, r0
 800828e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008292:	4323      	orrs	r3, r4
 8008294:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	8992      	ldrh	r2, [r2, #12]
 80082a4:	fbb3 f0f2 	udiv	r0, r3, r2
 80082a8:	fb00 f202 	mul.w	r2, r0, r2
 80082ac:	1a9b      	subs	r3, r3, r2
 80082ae:	440b      	add	r3, r1
 80082b0:	6879      	ldr	r1, [r7, #4]
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7ff fb0b 	bl	80078ce <st_dword>
			fs->wflag = 1;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2201      	movs	r2, #1
 80082bc:	70da      	strb	r2, [r3, #3]
			break;
 80082be:	e006      	b.n	80082ce <put_fat+0x22a>
			if (res != FR_OK) break;
 80082c0:	bf00      	nop
 80082c2:	e004      	b.n	80082ce <put_fat+0x22a>
			if (res != FR_OK) break;
 80082c4:	bf00      	nop
 80082c6:	e002      	b.n	80082ce <put_fat+0x22a>
			if (res != FR_OK) break;
 80082c8:	bf00      	nop
 80082ca:	e000      	b.n	80082ce <put_fat+0x22a>
			if (res != FR_OK) break;
 80082cc:	bf00      	nop
		}
	}
	return res;
 80082ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3724      	adds	r7, #36	@ 0x24
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd90      	pop	{r4, r7, pc}

080082d8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b088      	sub	sp, #32
 80082dc:	af00      	add	r7, sp, #0
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80082e4:	2300      	movs	r3, #0
 80082e6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d904      	bls.n	80082fe <remove_chain+0x26>
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	69db      	ldr	r3, [r3, #28]
 80082f8:	68ba      	ldr	r2, [r7, #8]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d301      	bcc.n	8008302 <remove_chain+0x2a>
 80082fe:	2302      	movs	r3, #2
 8008300:	e04b      	b.n	800839a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d00c      	beq.n	8008322 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008308:	f04f 32ff 	mov.w	r2, #4294967295
 800830c:	6879      	ldr	r1, [r7, #4]
 800830e:	69b8      	ldr	r0, [r7, #24]
 8008310:	f7ff fec8 	bl	80080a4 <put_fat>
 8008314:	4603      	mov	r3, r0
 8008316:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008318:	7ffb      	ldrb	r3, [r7, #31]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d001      	beq.n	8008322 <remove_chain+0x4a>
 800831e:	7ffb      	ldrb	r3, [r7, #31]
 8008320:	e03b      	b.n	800839a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008322:	68b9      	ldr	r1, [r7, #8]
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	f7ff fdea 	bl	8007efe <get_fat>
 800832a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d031      	beq.n	8008396 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d101      	bne.n	800833c <remove_chain+0x64>
 8008338:	2302      	movs	r3, #2
 800833a:	e02e      	b.n	800839a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008342:	d101      	bne.n	8008348 <remove_chain+0x70>
 8008344:	2301      	movs	r3, #1
 8008346:	e028      	b.n	800839a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008348:	2200      	movs	r2, #0
 800834a:	68b9      	ldr	r1, [r7, #8]
 800834c:	69b8      	ldr	r0, [r7, #24]
 800834e:	f7ff fea9 	bl	80080a4 <put_fat>
 8008352:	4603      	mov	r3, r0
 8008354:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008356:	7ffb      	ldrb	r3, [r7, #31]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d001      	beq.n	8008360 <remove_chain+0x88>
 800835c:	7ffb      	ldrb	r3, [r7, #31]
 800835e:	e01c      	b.n	800839a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	699a      	ldr	r2, [r3, #24]
 8008364:	69bb      	ldr	r3, [r7, #24]
 8008366:	69db      	ldr	r3, [r3, #28]
 8008368:	3b02      	subs	r3, #2
 800836a:	429a      	cmp	r2, r3
 800836c:	d20b      	bcs.n	8008386 <remove_chain+0xae>
			fs->free_clst++;
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	699b      	ldr	r3, [r3, #24]
 8008372:	1c5a      	adds	r2, r3, #1
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	791b      	ldrb	r3, [r3, #4]
 800837c:	f043 0301 	orr.w	r3, r3, #1
 8008380:	b2da      	uxtb	r2, r3
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800838a:	69bb      	ldr	r3, [r7, #24]
 800838c:	69db      	ldr	r3, [r3, #28]
 800838e:	68ba      	ldr	r2, [r7, #8]
 8008390:	429a      	cmp	r2, r3
 8008392:	d3c6      	bcc.n	8008322 <remove_chain+0x4a>
 8008394:	e000      	b.n	8008398 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008396:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3720      	adds	r7, #32
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b088      	sub	sp, #32
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
 80083aa:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d10d      	bne.n	80083d4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	695b      	ldr	r3, [r3, #20]
 80083bc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d004      	beq.n	80083ce <create_chain+0x2c>
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	69db      	ldr	r3, [r3, #28]
 80083c8:	69ba      	ldr	r2, [r7, #24]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d31b      	bcc.n	8008406 <create_chain+0x64>
 80083ce:	2301      	movs	r3, #1
 80083d0:	61bb      	str	r3, [r7, #24]
 80083d2:	e018      	b.n	8008406 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80083d4:	6839      	ldr	r1, [r7, #0]
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f7ff fd91 	bl	8007efe <get_fat>
 80083dc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d801      	bhi.n	80083e8 <create_chain+0x46>
 80083e4:	2301      	movs	r3, #1
 80083e6:	e070      	b.n	80084ca <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ee:	d101      	bne.n	80083f4 <create_chain+0x52>
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	e06a      	b.n	80084ca <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	69db      	ldr	r3, [r3, #28]
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d201      	bcs.n	8008402 <create_chain+0x60>
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	e063      	b.n	80084ca <create_chain+0x128>
		scl = clst;
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	3301      	adds	r3, #1
 800840e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	69db      	ldr	r3, [r3, #28]
 8008414:	69fa      	ldr	r2, [r7, #28]
 8008416:	429a      	cmp	r2, r3
 8008418:	d307      	bcc.n	800842a <create_chain+0x88>
				ncl = 2;
 800841a:	2302      	movs	r3, #2
 800841c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800841e:	69fa      	ldr	r2, [r7, #28]
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	429a      	cmp	r2, r3
 8008424:	d901      	bls.n	800842a <create_chain+0x88>
 8008426:	2300      	movs	r3, #0
 8008428:	e04f      	b.n	80084ca <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800842a:	69f9      	ldr	r1, [r7, #28]
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f7ff fd66 	bl	8007efe <get_fat>
 8008432:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00e      	beq.n	8008458 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2b01      	cmp	r3, #1
 800843e:	d003      	beq.n	8008448 <create_chain+0xa6>
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008446:	d101      	bne.n	800844c <create_chain+0xaa>
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	e03e      	b.n	80084ca <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800844c:	69fa      	ldr	r2, [r7, #28]
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	429a      	cmp	r2, r3
 8008452:	d1da      	bne.n	800840a <create_chain+0x68>
 8008454:	2300      	movs	r3, #0
 8008456:	e038      	b.n	80084ca <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008458:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800845a:	f04f 32ff 	mov.w	r2, #4294967295
 800845e:	69f9      	ldr	r1, [r7, #28]
 8008460:	6938      	ldr	r0, [r7, #16]
 8008462:	f7ff fe1f 	bl	80080a4 <put_fat>
 8008466:	4603      	mov	r3, r0
 8008468:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800846a:	7dfb      	ldrb	r3, [r7, #23]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d109      	bne.n	8008484 <create_chain+0xe2>
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d006      	beq.n	8008484 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008476:	69fa      	ldr	r2, [r7, #28]
 8008478:	6839      	ldr	r1, [r7, #0]
 800847a:	6938      	ldr	r0, [r7, #16]
 800847c:	f7ff fe12 	bl	80080a4 <put_fat>
 8008480:	4603      	mov	r3, r0
 8008482:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008484:	7dfb      	ldrb	r3, [r7, #23]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d116      	bne.n	80084b8 <create_chain+0x116>
		fs->last_clst = ncl;
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	69fa      	ldr	r2, [r7, #28]
 800848e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	699a      	ldr	r2, [r3, #24]
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	69db      	ldr	r3, [r3, #28]
 8008498:	3b02      	subs	r3, #2
 800849a:	429a      	cmp	r2, r3
 800849c:	d804      	bhi.n	80084a8 <create_chain+0x106>
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	699b      	ldr	r3, [r3, #24]
 80084a2:	1e5a      	subs	r2, r3, #1
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	791b      	ldrb	r3, [r3, #4]
 80084ac:	f043 0301 	orr.w	r3, r3, #1
 80084b0:	b2da      	uxtb	r2, r3
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	711a      	strb	r2, [r3, #4]
 80084b6:	e007      	b.n	80084c8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80084b8:	7dfb      	ldrb	r3, [r7, #23]
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d102      	bne.n	80084c4 <create_chain+0x122>
 80084be:	f04f 33ff 	mov.w	r3, #4294967295
 80084c2:	e000      	b.n	80084c6 <create_chain+0x124>
 80084c4:	2301      	movs	r3, #1
 80084c6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80084c8:	69fb      	ldr	r3, [r7, #28]
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3720      	adds	r7, #32
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80084d2:	b480      	push	{r7}
 80084d4:	b087      	sub	sp, #28
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
 80084da:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e6:	3304      	adds	r3, #4
 80084e8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	899b      	ldrh	r3, [r3, #12]
 80084ee:	461a      	mov	r2, r3
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	8952      	ldrh	r2, [r2, #10]
 80084fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80084fe:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	1d1a      	adds	r2, r3, #4
 8008504:	613a      	str	r2, [r7, #16]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d101      	bne.n	8008514 <clmt_clust+0x42>
 8008510:	2300      	movs	r3, #0
 8008512:	e010      	b.n	8008536 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008514:	697a      	ldr	r2, [r7, #20]
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	429a      	cmp	r2, r3
 800851a:	d307      	bcc.n	800852c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800851c:	697a      	ldr	r2, [r7, #20]
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	617b      	str	r3, [r7, #20]
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	3304      	adds	r3, #4
 8008528:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800852a:	e7e9      	b.n	8008500 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800852c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	4413      	add	r3, r2
}
 8008536:	4618      	mov	r0, r3
 8008538:	371c      	adds	r7, #28
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr

08008542 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b086      	sub	sp, #24
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
 800854a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008558:	d204      	bcs.n	8008564 <dir_sdi+0x22>
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	f003 031f 	and.w	r3, r3, #31
 8008560:	2b00      	cmp	r3, #0
 8008562:	d001      	beq.n	8008568 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008564:	2302      	movs	r3, #2
 8008566:	e071      	b.n	800864c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	683a      	ldr	r2, [r7, #0]
 800856c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d106      	bne.n	8008588 <dir_sdi+0x46>
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	2b02      	cmp	r3, #2
 8008580:	d902      	bls.n	8008588 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008586:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d10c      	bne.n	80085a8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	095b      	lsrs	r3, r3, #5
 8008592:	693a      	ldr	r2, [r7, #16]
 8008594:	8912      	ldrh	r2, [r2, #8]
 8008596:	4293      	cmp	r3, r2
 8008598:	d301      	bcc.n	800859e <dir_sdi+0x5c>
 800859a:	2302      	movs	r3, #2
 800859c:	e056      	b.n	800864c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	61da      	str	r2, [r3, #28]
 80085a6:	e02d      	b.n	8008604 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	895b      	ldrh	r3, [r3, #10]
 80085ac:	461a      	mov	r2, r3
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	899b      	ldrh	r3, [r3, #12]
 80085b2:	fb02 f303 	mul.w	r3, r2, r3
 80085b6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80085b8:	e019      	b.n	80085ee <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6979      	ldr	r1, [r7, #20]
 80085be:	4618      	mov	r0, r3
 80085c0:	f7ff fc9d 	bl	8007efe <get_fat>
 80085c4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085cc:	d101      	bne.n	80085d2 <dir_sdi+0x90>
 80085ce:	2301      	movs	r3, #1
 80085d0:	e03c      	b.n	800864c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d904      	bls.n	80085e2 <dir_sdi+0xa0>
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	69db      	ldr	r3, [r3, #28]
 80085dc:	697a      	ldr	r2, [r7, #20]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d301      	bcc.n	80085e6 <dir_sdi+0xa4>
 80085e2:	2302      	movs	r3, #2
 80085e4:	e032      	b.n	800864c <dir_sdi+0x10a>
			ofs -= csz;
 80085e6:	683a      	ldr	r2, [r7, #0]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	1ad3      	subs	r3, r2, r3
 80085ec:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80085ee:	683a      	ldr	r2, [r7, #0]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d2e1      	bcs.n	80085ba <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80085f6:	6979      	ldr	r1, [r7, #20]
 80085f8:	6938      	ldr	r0, [r7, #16]
 80085fa:	f7ff fc61 	bl	8007ec0 <clust2sect>
 80085fe:	4602      	mov	r2, r0
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	697a      	ldr	r2, [r7, #20]
 8008608:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	69db      	ldr	r3, [r3, #28]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d101      	bne.n	8008616 <dir_sdi+0xd4>
 8008612:	2302      	movs	r3, #2
 8008614:	e01a      	b.n	800864c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	69da      	ldr	r2, [r3, #28]
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	899b      	ldrh	r3, [r3, #12]
 800861e:	4619      	mov	r1, r3
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	fbb3 f3f1 	udiv	r3, r3, r1
 8008626:	441a      	add	r2, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	899b      	ldrh	r3, [r3, #12]
 8008636:	461a      	mov	r2, r3
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	fbb3 f0f2 	udiv	r0, r3, r2
 800863e:	fb00 f202 	mul.w	r2, r0, r2
 8008642:	1a9b      	subs	r3, r3, r2
 8008644:	18ca      	adds	r2, r1, r3
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3718      	adds	r7, #24
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b086      	sub	sp, #24
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	695b      	ldr	r3, [r3, #20]
 8008668:	3320      	adds	r3, #32
 800866a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	69db      	ldr	r3, [r3, #28]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d003      	beq.n	800867c <dir_next+0x28>
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800867a:	d301      	bcc.n	8008680 <dir_next+0x2c>
 800867c:	2304      	movs	r3, #4
 800867e:	e0bb      	b.n	80087f8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	899b      	ldrh	r3, [r3, #12]
 8008684:	461a      	mov	r2, r3
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	fbb3 f1f2 	udiv	r1, r3, r2
 800868c:	fb01 f202 	mul.w	r2, r1, r2
 8008690:	1a9b      	subs	r3, r3, r2
 8008692:	2b00      	cmp	r3, #0
 8008694:	f040 809d 	bne.w	80087d2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	69db      	ldr	r3, [r3, #28]
 800869c:	1c5a      	adds	r2, r3, #1
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d10b      	bne.n	80086c2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	095b      	lsrs	r3, r3, #5
 80086ae:	68fa      	ldr	r2, [r7, #12]
 80086b0:	8912      	ldrh	r2, [r2, #8]
 80086b2:	4293      	cmp	r3, r2
 80086b4:	f0c0 808d 	bcc.w	80087d2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	61da      	str	r2, [r3, #28]
 80086be:	2304      	movs	r3, #4
 80086c0:	e09a      	b.n	80087f8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	899b      	ldrh	r3, [r3, #12]
 80086c6:	461a      	mov	r2, r3
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	8952      	ldrh	r2, [r2, #10]
 80086d2:	3a01      	subs	r2, #1
 80086d4:	4013      	ands	r3, r2
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d17b      	bne.n	80087d2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	699b      	ldr	r3, [r3, #24]
 80086e0:	4619      	mov	r1, r3
 80086e2:	4610      	mov	r0, r2
 80086e4:	f7ff fc0b 	bl	8007efe <get_fat>
 80086e8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d801      	bhi.n	80086f4 <dir_next+0xa0>
 80086f0:	2302      	movs	r3, #2
 80086f2:	e081      	b.n	80087f8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086fa:	d101      	bne.n	8008700 <dir_next+0xac>
 80086fc:	2301      	movs	r3, #1
 80086fe:	e07b      	b.n	80087f8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	69db      	ldr	r3, [r3, #28]
 8008704:	697a      	ldr	r2, [r7, #20]
 8008706:	429a      	cmp	r2, r3
 8008708:	d359      	bcc.n	80087be <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d104      	bne.n	800871a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	61da      	str	r2, [r3, #28]
 8008716:	2304      	movs	r3, #4
 8008718:	e06e      	b.n	80087f8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	699b      	ldr	r3, [r3, #24]
 8008720:	4619      	mov	r1, r3
 8008722:	4610      	mov	r0, r2
 8008724:	f7ff fe3d 	bl	80083a2 <create_chain>
 8008728:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d101      	bne.n	8008734 <dir_next+0xe0>
 8008730:	2307      	movs	r3, #7
 8008732:	e061      	b.n	80087f8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	2b01      	cmp	r3, #1
 8008738:	d101      	bne.n	800873e <dir_next+0xea>
 800873a:	2302      	movs	r3, #2
 800873c:	e05c      	b.n	80087f8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008744:	d101      	bne.n	800874a <dir_next+0xf6>
 8008746:	2301      	movs	r3, #1
 8008748:	e056      	b.n	80087f8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800874a:	68f8      	ldr	r0, [r7, #12]
 800874c:	f7ff fad6 	bl	8007cfc <sync_window>
 8008750:	4603      	mov	r3, r0
 8008752:	2b00      	cmp	r3, #0
 8008754:	d001      	beq.n	800875a <dir_next+0x106>
 8008756:	2301      	movs	r3, #1
 8008758:	e04e      	b.n	80087f8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	899b      	ldrh	r3, [r3, #12]
 8008764:	461a      	mov	r2, r3
 8008766:	2100      	movs	r1, #0
 8008768:	f7ff f8fe 	bl	8007968 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800876c:	2300      	movs	r3, #0
 800876e:	613b      	str	r3, [r7, #16]
 8008770:	6979      	ldr	r1, [r7, #20]
 8008772:	68f8      	ldr	r0, [r7, #12]
 8008774:	f7ff fba4 	bl	8007ec0 <clust2sect>
 8008778:	4602      	mov	r2, r0
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	635a      	str	r2, [r3, #52]	@ 0x34
 800877e:	e012      	b.n	80087a6 <dir_next+0x152>
						fs->wflag = 1;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2201      	movs	r2, #1
 8008784:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f7ff fab8 	bl	8007cfc <sync_window>
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d001      	beq.n	8008796 <dir_next+0x142>
 8008792:	2301      	movs	r3, #1
 8008794:	e030      	b.n	80087f8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	3301      	adds	r3, #1
 800879a:	613b      	str	r3, [r7, #16]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087a0:	1c5a      	adds	r2, r3, #1
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	895b      	ldrh	r3, [r3, #10]
 80087aa:	461a      	mov	r2, r3
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d3e6      	bcc.n	8008780 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	1ad2      	subs	r2, r2, r3
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	697a      	ldr	r2, [r7, #20]
 80087c2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80087c4:	6979      	ldr	r1, [r7, #20]
 80087c6:	68f8      	ldr	r0, [r7, #12]
 80087c8:	f7ff fb7a 	bl	8007ec0 <clust2sect>
 80087cc:	4602      	mov	r2, r0
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	68ba      	ldr	r2, [r7, #8]
 80087d6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	899b      	ldrh	r3, [r3, #12]
 80087e2:	461a      	mov	r2, r3
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80087ea:	fb00 f202 	mul.w	r2, r0, r2
 80087ee:	1a9b      	subs	r3, r3, r2
 80087f0:	18ca      	adds	r2, r1, r3
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3718      	adds	r7, #24
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b086      	sub	sp, #24
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008810:	2100      	movs	r1, #0
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f7ff fe95 	bl	8008542 <dir_sdi>
 8008818:	4603      	mov	r3, r0
 800881a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800881c:	7dfb      	ldrb	r3, [r7, #23]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d12b      	bne.n	800887a <dir_alloc+0x7a>
		n = 0;
 8008822:	2300      	movs	r3, #0
 8008824:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	69db      	ldr	r3, [r3, #28]
 800882a:	4619      	mov	r1, r3
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	f7ff faa9 	bl	8007d84 <move_window>
 8008832:	4603      	mov	r3, r0
 8008834:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008836:	7dfb      	ldrb	r3, [r7, #23]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d11d      	bne.n	8008878 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6a1b      	ldr	r3, [r3, #32]
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	2be5      	cmp	r3, #229	@ 0xe5
 8008844:	d004      	beq.n	8008850 <dir_alloc+0x50>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a1b      	ldr	r3, [r3, #32]
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d107      	bne.n	8008860 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	3301      	adds	r3, #1
 8008854:	613b      	str	r3, [r7, #16]
 8008856:	693a      	ldr	r2, [r7, #16]
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	429a      	cmp	r2, r3
 800885c:	d102      	bne.n	8008864 <dir_alloc+0x64>
 800885e:	e00c      	b.n	800887a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008860:	2300      	movs	r3, #0
 8008862:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008864:	2101      	movs	r1, #1
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f7ff fef4 	bl	8008654 <dir_next>
 800886c:	4603      	mov	r3, r0
 800886e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008870:	7dfb      	ldrb	r3, [r7, #23]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d0d7      	beq.n	8008826 <dir_alloc+0x26>
 8008876:	e000      	b.n	800887a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008878:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800887a:	7dfb      	ldrb	r3, [r7, #23]
 800887c:	2b04      	cmp	r3, #4
 800887e:	d101      	bne.n	8008884 <dir_alloc+0x84>
 8008880:	2307      	movs	r3, #7
 8008882:	75fb      	strb	r3, [r7, #23]
	return res;
 8008884:	7dfb      	ldrb	r3, [r7, #23]
}
 8008886:	4618      	mov	r0, r3
 8008888:	3718      	adds	r7, #24
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b084      	sub	sp, #16
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
 8008896:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	331a      	adds	r3, #26
 800889c:	4618      	mov	r0, r3
 800889e:	f7fe ffbf 	bl	8007820 <ld_word>
 80088a2:	4603      	mov	r3, r0
 80088a4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	2b03      	cmp	r3, #3
 80088ac:	d109      	bne.n	80088c2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	3314      	adds	r3, #20
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7fe ffb4 	bl	8007820 <ld_word>
 80088b8:	4603      	mov	r3, r0
 80088ba:	041b      	lsls	r3, r3, #16
 80088bc:	68fa      	ldr	r2, [r7, #12]
 80088be:	4313      	orrs	r3, r2
 80088c0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80088c2:	68fb      	ldr	r3, [r7, #12]
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3710      	adds	r7, #16
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	331a      	adds	r3, #26
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	b292      	uxth	r2, r2
 80088e0:	4611      	mov	r1, r2
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fe ffd8 	bl	8007898 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	2b03      	cmp	r3, #3
 80088ee:	d109      	bne.n	8008904 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	f103 0214 	add.w	r2, r3, #20
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	0c1b      	lsrs	r3, r3, #16
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	4619      	mov	r1, r3
 80088fe:	4610      	mov	r0, r2
 8008900:	f7fe ffca 	bl	8007898 <st_word>
	}
}
 8008904:	bf00      	nop
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800890c:	b590      	push	{r4, r7, lr}
 800890e:	b087      	sub	sp, #28
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	331a      	adds	r3, #26
 800891a:	4618      	mov	r0, r3
 800891c:	f7fe ff80 	bl	8007820 <ld_word>
 8008920:	4603      	mov	r3, r0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d001      	beq.n	800892a <cmp_lfn+0x1e>
 8008926:	2300      	movs	r3, #0
 8008928:	e059      	b.n	80089de <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008932:	1e5a      	subs	r2, r3, #1
 8008934:	4613      	mov	r3, r2
 8008936:	005b      	lsls	r3, r3, #1
 8008938:	4413      	add	r3, r2
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	4413      	add	r3, r2
 800893e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008940:	2301      	movs	r3, #1
 8008942:	81fb      	strh	r3, [r7, #14]
 8008944:	2300      	movs	r3, #0
 8008946:	613b      	str	r3, [r7, #16]
 8008948:	e033      	b.n	80089b2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800894a:	4a27      	ldr	r2, [pc, #156]	@ (80089e8 <cmp_lfn+0xdc>)
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	4413      	add	r3, r2
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	461a      	mov	r2, r3
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	4413      	add	r3, r2
 8008958:	4618      	mov	r0, r3
 800895a:	f7fe ff61 	bl	8007820 <ld_word>
 800895e:	4603      	mov	r3, r0
 8008960:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008962:	89fb      	ldrh	r3, [r7, #14]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d01a      	beq.n	800899e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	2bfe      	cmp	r3, #254	@ 0xfe
 800896c:	d812      	bhi.n	8008994 <cmp_lfn+0x88>
 800896e:	89bb      	ldrh	r3, [r7, #12]
 8008970:	4618      	mov	r0, r3
 8008972:	f001 fd3d 	bl	800a3f0 <ff_wtoupper>
 8008976:	4603      	mov	r3, r0
 8008978:	461c      	mov	r4, r3
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	1c5a      	adds	r2, r3, #1
 800897e:	617a      	str	r2, [r7, #20]
 8008980:	005b      	lsls	r3, r3, #1
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	4413      	add	r3, r2
 8008986:	881b      	ldrh	r3, [r3, #0]
 8008988:	4618      	mov	r0, r3
 800898a:	f001 fd31 	bl	800a3f0 <ff_wtoupper>
 800898e:	4603      	mov	r3, r0
 8008990:	429c      	cmp	r4, r3
 8008992:	d001      	beq.n	8008998 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8008994:	2300      	movs	r3, #0
 8008996:	e022      	b.n	80089de <cmp_lfn+0xd2>
			}
			wc = uc;
 8008998:	89bb      	ldrh	r3, [r7, #12]
 800899a:	81fb      	strh	r3, [r7, #14]
 800899c:	e006      	b.n	80089ac <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800899e:	89bb      	ldrh	r3, [r7, #12]
 80089a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d001      	beq.n	80089ac <cmp_lfn+0xa0>
 80089a8:	2300      	movs	r3, #0
 80089aa:	e018      	b.n	80089de <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	3301      	adds	r3, #1
 80089b0:	613b      	str	r3, [r7, #16]
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	2b0c      	cmp	r3, #12
 80089b6:	d9c8      	bls.n	800894a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d00b      	beq.n	80089dc <cmp_lfn+0xd0>
 80089c4:	89fb      	ldrh	r3, [r7, #14]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d008      	beq.n	80089dc <cmp_lfn+0xd0>
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	005b      	lsls	r3, r3, #1
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	4413      	add	r3, r2
 80089d2:	881b      	ldrh	r3, [r3, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d001      	beq.n	80089dc <cmp_lfn+0xd0>
 80089d8:	2300      	movs	r3, #0
 80089da:	e000      	b.n	80089de <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80089dc:	2301      	movs	r3, #1
}
 80089de:	4618      	mov	r0, r3
 80089e0:	371c      	adds	r7, #28
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd90      	pop	{r4, r7, pc}
 80089e6:	bf00      	nop
 80089e8:	0800b884 	.word	0x0800b884

080089ec <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b088      	sub	sp, #32
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	4611      	mov	r1, r2
 80089f8:	461a      	mov	r2, r3
 80089fa:	460b      	mov	r3, r1
 80089fc:	71fb      	strb	r3, [r7, #7]
 80089fe:	4613      	mov	r3, r2
 8008a00:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	330d      	adds	r3, #13
 8008a06:	79ba      	ldrb	r2, [r7, #6]
 8008a08:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	330b      	adds	r3, #11
 8008a0e:	220f      	movs	r2, #15
 8008a10:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	330c      	adds	r3, #12
 8008a16:	2200      	movs	r2, #0
 8008a18:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	331a      	adds	r3, #26
 8008a1e:	2100      	movs	r1, #0
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7fe ff39 	bl	8007898 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8008a26:	79fb      	ldrb	r3, [r7, #7]
 8008a28:	1e5a      	subs	r2, r3, #1
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	005b      	lsls	r3, r3, #1
 8008a2e:	4413      	add	r3, r2
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	4413      	add	r3, r2
 8008a34:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8008a36:	2300      	movs	r3, #0
 8008a38:	82fb      	strh	r3, [r7, #22]
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008a3e:	8afb      	ldrh	r3, [r7, #22]
 8008a40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d007      	beq.n	8008a58 <put_lfn+0x6c>
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	1c5a      	adds	r2, r3, #1
 8008a4c:	61fa      	str	r2, [r7, #28]
 8008a4e:	005b      	lsls	r3, r3, #1
 8008a50:	68fa      	ldr	r2, [r7, #12]
 8008a52:	4413      	add	r3, r2
 8008a54:	881b      	ldrh	r3, [r3, #0]
 8008a56:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8008a58:	4a17      	ldr	r2, [pc, #92]	@ (8008ab8 <put_lfn+0xcc>)
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	461a      	mov	r2, r3
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	4413      	add	r3, r2
 8008a66:	8afa      	ldrh	r2, [r7, #22]
 8008a68:	4611      	mov	r1, r2
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f7fe ff14 	bl	8007898 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008a70:	8afb      	ldrh	r3, [r7, #22]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d102      	bne.n	8008a7c <put_lfn+0x90>
 8008a76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008a7a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	61bb      	str	r3, [r7, #24]
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	2b0c      	cmp	r3, #12
 8008a86:	d9da      	bls.n	8008a3e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008a88:	8afb      	ldrh	r3, [r7, #22]
 8008a8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d006      	beq.n	8008aa0 <put_lfn+0xb4>
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	005b      	lsls	r3, r3, #1
 8008a96:	68fa      	ldr	r2, [r7, #12]
 8008a98:	4413      	add	r3, r2
 8008a9a:	881b      	ldrh	r3, [r3, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d103      	bne.n	8008aa8 <put_lfn+0xbc>
 8008aa0:	79fb      	ldrb	r3, [r7, #7]
 8008aa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008aa6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	79fa      	ldrb	r2, [r7, #7]
 8008aac:	701a      	strb	r2, [r3, #0]
}
 8008aae:	bf00      	nop
 8008ab0:	3720      	adds	r7, #32
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	0800b884 	.word	0x0800b884

08008abc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b08c      	sub	sp, #48	@ 0x30
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	607a      	str	r2, [r7, #4]
 8008ac8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8008aca:	220b      	movs	r2, #11
 8008acc:	68b9      	ldr	r1, [r7, #8]
 8008ace:	68f8      	ldr	r0, [r7, #12]
 8008ad0:	f7fe ff29 	bl	8007926 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	2b05      	cmp	r3, #5
 8008ad8:	d92b      	bls.n	8008b32 <gen_numname+0x76>
		sr = seq;
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8008ade:	e022      	b.n	8008b26 <gen_numname+0x6a>
			wc = *lfn++;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	1c9a      	adds	r2, r3, #2
 8008ae4:	607a      	str	r2, [r7, #4]
 8008ae6:	881b      	ldrh	r3, [r3, #0]
 8008ae8:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8008aea:	2300      	movs	r3, #0
 8008aec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008aee:	e017      	b.n	8008b20 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	005a      	lsls	r2, r3, #1
 8008af4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008af6:	f003 0301 	and.w	r3, r3, #1
 8008afa:	4413      	add	r3, r2
 8008afc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8008afe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008b00:	085b      	lsrs	r3, r3, #1
 8008b02:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d005      	beq.n	8008b1a <gen_numname+0x5e>
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8008b14:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8008b18:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8008b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b22:	2b0f      	cmp	r3, #15
 8008b24:	d9e4      	bls.n	8008af0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	881b      	ldrh	r3, [r3, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d1d8      	bne.n	8008ae0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8008b32:	2307      	movs	r3, #7
 8008b34:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	f003 030f 	and.w	r3, r3, #15
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	3330      	adds	r3, #48	@ 0x30
 8008b42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8008b46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008b4a:	2b39      	cmp	r3, #57	@ 0x39
 8008b4c:	d904      	bls.n	8008b58 <gen_numname+0x9c>
 8008b4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008b52:	3307      	adds	r3, #7
 8008b54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8008b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b5a:	1e5a      	subs	r2, r3, #1
 8008b5c:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008b5e:	3330      	adds	r3, #48	@ 0x30
 8008b60:	443b      	add	r3, r7
 8008b62:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8008b66:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	091b      	lsrs	r3, r3, #4
 8008b6e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d1df      	bne.n	8008b36 <gen_numname+0x7a>
	ns[i] = '~';
 8008b76:	f107 0214 	add.w	r2, r7, #20
 8008b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b7c:	4413      	add	r3, r2
 8008b7e:	227e      	movs	r2, #126	@ 0x7e
 8008b80:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8008b82:	2300      	movs	r3, #0
 8008b84:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b86:	e002      	b.n	8008b8e <gen_numname+0xd2>
 8008b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d205      	bcs.n	8008ba2 <gen_numname+0xe6>
 8008b96:	68fa      	ldr	r2, [r7, #12]
 8008b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b9a:	4413      	add	r3, r2
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	2b20      	cmp	r3, #32
 8008ba0:	d1f2      	bne.n	8008b88 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ba4:	2b07      	cmp	r3, #7
 8008ba6:	d807      	bhi.n	8008bb8 <gen_numname+0xfc>
 8008ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008baa:	1c5a      	adds	r2, r3, #1
 8008bac:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008bae:	3330      	adds	r3, #48	@ 0x30
 8008bb0:	443b      	add	r3, r7
 8008bb2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8008bb6:	e000      	b.n	8008bba <gen_numname+0xfe>
 8008bb8:	2120      	movs	r1, #32
 8008bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bbc:	1c5a      	adds	r2, r3, #1
 8008bbe:	627a      	str	r2, [r7, #36]	@ 0x24
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	4413      	add	r3, r2
 8008bc4:	460a      	mov	r2, r1
 8008bc6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8008bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bca:	2b07      	cmp	r3, #7
 8008bcc:	d9e9      	bls.n	8008ba2 <gen_numname+0xe6>
}
 8008bce:	bf00      	nop
 8008bd0:	bf00      	nop
 8008bd2:	3730      	adds	r7, #48	@ 0x30
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b085      	sub	sp, #20
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8008be0:	2300      	movs	r3, #0
 8008be2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8008be4:	230b      	movs	r3, #11
 8008be6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8008be8:	7bfb      	ldrb	r3, [r7, #15]
 8008bea:	b2da      	uxtb	r2, r3
 8008bec:	0852      	lsrs	r2, r2, #1
 8008bee:	01db      	lsls	r3, r3, #7
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	b2da      	uxtb	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	1c59      	adds	r1, r3, #1
 8008bf8:	6079      	str	r1, [r7, #4]
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	3b01      	subs	r3, #1
 8008c04:	60bb      	str	r3, [r7, #8]
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d1ed      	bne.n	8008be8 <sum_sfn+0x10>
	return sum;
 8008c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3714      	adds	r7, #20
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr

08008c1a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b086      	sub	sp, #24
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008c28:	2100      	movs	r1, #0
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f7ff fc89 	bl	8008542 <dir_sdi>
 8008c30:	4603      	mov	r3, r0
 8008c32:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008c34:	7dfb      	ldrb	r3, [r7, #23]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d001      	beq.n	8008c3e <dir_find+0x24>
 8008c3a:	7dfb      	ldrb	r3, [r7, #23]
 8008c3c:	e0a9      	b.n	8008d92 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008c3e:	23ff      	movs	r3, #255	@ 0xff
 8008c40:	753b      	strb	r3, [r7, #20]
 8008c42:	7d3b      	ldrb	r3, [r7, #20]
 8008c44:	757b      	strb	r3, [r7, #21]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f04f 32ff 	mov.w	r2, #4294967295
 8008c4c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	69db      	ldr	r3, [r3, #28]
 8008c52:	4619      	mov	r1, r3
 8008c54:	6938      	ldr	r0, [r7, #16]
 8008c56:	f7ff f895 	bl	8007d84 <move_window>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008c5e:	7dfb      	ldrb	r3, [r7, #23]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	f040 8090 	bne.w	8008d86 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6a1b      	ldr	r3, [r3, #32]
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008c6e:	7dbb      	ldrb	r3, [r7, #22]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d102      	bne.n	8008c7a <dir_find+0x60>
 8008c74:	2304      	movs	r3, #4
 8008c76:	75fb      	strb	r3, [r7, #23]
 8008c78:	e08a      	b.n	8008d90 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a1b      	ldr	r3, [r3, #32]
 8008c7e:	330b      	adds	r3, #11
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c86:	73fb      	strb	r3, [r7, #15]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	7bfa      	ldrb	r2, [r7, #15]
 8008c8c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8008c8e:	7dbb      	ldrb	r3, [r7, #22]
 8008c90:	2be5      	cmp	r3, #229	@ 0xe5
 8008c92:	d007      	beq.n	8008ca4 <dir_find+0x8a>
 8008c94:	7bfb      	ldrb	r3, [r7, #15]
 8008c96:	f003 0308 	and.w	r3, r3, #8
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d009      	beq.n	8008cb2 <dir_find+0x98>
 8008c9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ca0:	2b0f      	cmp	r3, #15
 8008ca2:	d006      	beq.n	8008cb2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008ca4:	23ff      	movs	r3, #255	@ 0xff
 8008ca6:	757b      	strb	r3, [r7, #21]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f04f 32ff 	mov.w	r2, #4294967295
 8008cae:	631a      	str	r2, [r3, #48]	@ 0x30
 8008cb0:	e05e      	b.n	8008d70 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008cb2:	7bfb      	ldrb	r3, [r7, #15]
 8008cb4:	2b0f      	cmp	r3, #15
 8008cb6:	d136      	bne.n	8008d26 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d154      	bne.n	8008d70 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8008cc6:	7dbb      	ldrb	r3, [r7, #22]
 8008cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d00d      	beq.n	8008cec <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6a1b      	ldr	r3, [r3, #32]
 8008cd4:	7b5b      	ldrb	r3, [r3, #13]
 8008cd6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8008cd8:	7dbb      	ldrb	r3, [r7, #22]
 8008cda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008cde:	75bb      	strb	r3, [r7, #22]
 8008ce0:	7dbb      	ldrb	r3, [r7, #22]
 8008ce2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	695a      	ldr	r2, [r3, #20]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008cec:	7dba      	ldrb	r2, [r7, #22]
 8008cee:	7d7b      	ldrb	r3, [r7, #21]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d115      	bne.n	8008d20 <dir_find+0x106>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6a1b      	ldr	r3, [r3, #32]
 8008cf8:	330d      	adds	r3, #13
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	7d3a      	ldrb	r2, [r7, #20]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d10e      	bne.n	8008d20 <dir_find+0x106>
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	691a      	ldr	r2, [r3, #16]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6a1b      	ldr	r3, [r3, #32]
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	4610      	mov	r0, r2
 8008d0e:	f7ff fdfd 	bl	800890c <cmp_lfn>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d003      	beq.n	8008d20 <dir_find+0x106>
 8008d18:	7d7b      	ldrb	r3, [r7, #21]
 8008d1a:	3b01      	subs	r3, #1
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	e000      	b.n	8008d22 <dir_find+0x108>
 8008d20:	23ff      	movs	r3, #255	@ 0xff
 8008d22:	757b      	strb	r3, [r7, #21]
 8008d24:	e024      	b.n	8008d70 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008d26:	7d7b      	ldrb	r3, [r7, #21]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d109      	bne.n	8008d40 <dir_find+0x126>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6a1b      	ldr	r3, [r3, #32]
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7ff ff51 	bl	8008bd8 <sum_sfn>
 8008d36:	4603      	mov	r3, r0
 8008d38:	461a      	mov	r2, r3
 8008d3a:	7d3b      	ldrb	r3, [r7, #20]
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d024      	beq.n	8008d8a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008d46:	f003 0301 	and.w	r3, r3, #1
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d10a      	bne.n	8008d64 <dir_find+0x14a>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a18      	ldr	r0, [r3, #32]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	3324      	adds	r3, #36	@ 0x24
 8008d56:	220b      	movs	r2, #11
 8008d58:	4619      	mov	r1, r3
 8008d5a:	f7fe fe20 	bl	800799e <mem_cmp>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d014      	beq.n	8008d8e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008d64:	23ff      	movs	r3, #255	@ 0xff
 8008d66:	757b      	strb	r3, [r7, #21]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d6e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008d70:	2100      	movs	r1, #0
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f7ff fc6e 	bl	8008654 <dir_next>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008d7c:	7dfb      	ldrb	r3, [r7, #23]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	f43f af65 	beq.w	8008c4e <dir_find+0x34>
 8008d84:	e004      	b.n	8008d90 <dir_find+0x176>
		if (res != FR_OK) break;
 8008d86:	bf00      	nop
 8008d88:	e002      	b.n	8008d90 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008d8a:	bf00      	nop
 8008d8c:	e000      	b.n	8008d90 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008d8e:	bf00      	nop

	return res;
 8008d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3718      	adds	r7, #24
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
	...

08008d9c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b08c      	sub	sp, #48	@ 0x30
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008db0:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d001      	beq.n	8008dbc <dir_register+0x20>
 8008db8:	2306      	movs	r3, #6
 8008dba:	e0e0      	b.n	8008f7e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8008dc0:	e002      	b.n	8008dc8 <dir_register+0x2c>
 8008dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	691a      	ldr	r2, [r3, #16]
 8008dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dce:	005b      	lsls	r3, r3, #1
 8008dd0:	4413      	add	r3, r2
 8008dd2:	881b      	ldrh	r3, [r3, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d1f4      	bne.n	8008dc2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8008dde:	f107 030c 	add.w	r3, r7, #12
 8008de2:	220c      	movs	r2, #12
 8008de4:	4618      	mov	r0, r3
 8008de6:	f7fe fd9e 	bl	8007926 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8008dea:	7dfb      	ldrb	r3, [r7, #23]
 8008dec:	f003 0301 	and.w	r3, r3, #1
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d032      	beq.n	8008e5a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2240      	movs	r2, #64	@ 0x40
 8008df8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008e00:	e016      	b.n	8008e30 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	691a      	ldr	r2, [r3, #16]
 8008e0c:	f107 010c 	add.w	r1, r7, #12
 8008e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e12:	f7ff fe53 	bl	8008abc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f7ff feff 	bl	8008c1a <dir_find>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8008e22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d106      	bne.n	8008e38 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8008e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e32:	2b63      	cmp	r3, #99	@ 0x63
 8008e34:	d9e5      	bls.n	8008e02 <dir_register+0x66>
 8008e36:	e000      	b.n	8008e3a <dir_register+0x9e>
			if (res != FR_OK) break;
 8008e38:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e3c:	2b64      	cmp	r3, #100	@ 0x64
 8008e3e:	d101      	bne.n	8008e44 <dir_register+0xa8>
 8008e40:	2307      	movs	r3, #7
 8008e42:	e09c      	b.n	8008f7e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008e44:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008e48:	2b04      	cmp	r3, #4
 8008e4a:	d002      	beq.n	8008e52 <dir_register+0xb6>
 8008e4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008e50:	e095      	b.n	8008f7e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8008e52:	7dfa      	ldrb	r2, [r7, #23]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008e5a:	7dfb      	ldrb	r3, [r7, #23]
 8008e5c:	f003 0302 	and.w	r3, r3, #2
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d007      	beq.n	8008e74 <dir_register+0xd8>
 8008e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e66:	330c      	adds	r3, #12
 8008e68:	4a47      	ldr	r2, [pc, #284]	@ (8008f88 <dir_register+0x1ec>)
 8008e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e6e:	089b      	lsrs	r3, r3, #2
 8008e70:	3301      	adds	r3, #1
 8008e72:	e000      	b.n	8008e76 <dir_register+0xda>
 8008e74:	2301      	movs	r3, #1
 8008e76:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008e78:	6a39      	ldr	r1, [r7, #32]
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f7ff fcc0 	bl	8008800 <dir_alloc>
 8008e80:	4603      	mov	r3, r0
 8008e82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8008e86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d148      	bne.n	8008f20 <dir_register+0x184>
 8008e8e:	6a3b      	ldr	r3, [r7, #32]
 8008e90:	3b01      	subs	r3, #1
 8008e92:	623b      	str	r3, [r7, #32]
 8008e94:	6a3b      	ldr	r3, [r7, #32]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d042      	beq.n	8008f20 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	695a      	ldr	r2, [r3, #20]
 8008e9e:	6a3b      	ldr	r3, [r7, #32]
 8008ea0:	015b      	lsls	r3, r3, #5
 8008ea2:	1ad3      	subs	r3, r2, r3
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f7ff fb4b 	bl	8008542 <dir_sdi>
 8008eac:	4603      	mov	r3, r0
 8008eae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8008eb2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d132      	bne.n	8008f20 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	3324      	adds	r3, #36	@ 0x24
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7ff fe8a 	bl	8008bd8 <sum_sfn>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	69db      	ldr	r3, [r3, #28]
 8008ecc:	4619      	mov	r1, r3
 8008ece:	69f8      	ldr	r0, [r7, #28]
 8008ed0:	f7fe ff58 	bl	8007d84 <move_window>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8008eda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d11d      	bne.n	8008f1e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8008ee2:	69fb      	ldr	r3, [r7, #28]
 8008ee4:	6918      	ldr	r0, [r3, #16]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6a19      	ldr	r1, [r3, #32]
 8008eea:	6a3b      	ldr	r3, [r7, #32]
 8008eec:	b2da      	uxtb	r2, r3
 8008eee:	7efb      	ldrb	r3, [r7, #27]
 8008ef0:	f7ff fd7c 	bl	80089ec <put_lfn>
				fs->wflag = 1;
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8008efa:	2100      	movs	r1, #0
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f7ff fba9 	bl	8008654 <dir_next>
 8008f02:	4603      	mov	r3, r0
 8008f04:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8008f08:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d107      	bne.n	8008f20 <dir_register+0x184>
 8008f10:	6a3b      	ldr	r3, [r7, #32]
 8008f12:	3b01      	subs	r3, #1
 8008f14:	623b      	str	r3, [r7, #32]
 8008f16:	6a3b      	ldr	r3, [r7, #32]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d1d5      	bne.n	8008ec8 <dir_register+0x12c>
 8008f1c:	e000      	b.n	8008f20 <dir_register+0x184>
				if (res != FR_OK) break;
 8008f1e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008f20:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d128      	bne.n	8008f7a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	69db      	ldr	r3, [r3, #28]
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	69f8      	ldr	r0, [r7, #28]
 8008f30:	f7fe ff28 	bl	8007d84 <move_window>
 8008f34:	4603      	mov	r3, r0
 8008f36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8008f3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d11b      	bne.n	8008f7a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6a1b      	ldr	r3, [r3, #32]
 8008f46:	2220      	movs	r2, #32
 8008f48:	2100      	movs	r1, #0
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7fe fd0c 	bl	8007968 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6a18      	ldr	r0, [r3, #32]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	3324      	adds	r3, #36	@ 0x24
 8008f58:	220b      	movs	r2, #11
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	f7fe fce3 	bl	8007926 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6a1b      	ldr	r3, [r3, #32]
 8008f6a:	330c      	adds	r3, #12
 8008f6c:	f002 0218 	and.w	r2, r2, #24
 8008f70:	b2d2      	uxtb	r2, r2
 8008f72:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8008f74:	69fb      	ldr	r3, [r7, #28]
 8008f76:	2201      	movs	r2, #1
 8008f78:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008f7a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3730      	adds	r7, #48	@ 0x30
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	4ec4ec4f 	.word	0x4ec4ec4f

08008f8c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b08a      	sub	sp, #40	@ 0x28
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	613b      	str	r3, [r7, #16]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	60fb      	str	r3, [r7, #12]
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	617b      	str	r3, [r7, #20]
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008fac:	69bb      	ldr	r3, [r7, #24]
 8008fae:	1c5a      	adds	r2, r3, #1
 8008fb0:	61ba      	str	r2, [r7, #24]
 8008fb2:	693a      	ldr	r2, [r7, #16]
 8008fb4:	4413      	add	r3, r2
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008fba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008fbc:	2b1f      	cmp	r3, #31
 8008fbe:	d940      	bls.n	8009042 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008fc0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008fc2:	2b2f      	cmp	r3, #47	@ 0x2f
 8008fc4:	d006      	beq.n	8008fd4 <create_name+0x48>
 8008fc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008fc8:	2b5c      	cmp	r3, #92	@ 0x5c
 8008fca:	d110      	bne.n	8008fee <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008fcc:	e002      	b.n	8008fd4 <create_name+0x48>
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	61bb      	str	r3, [r7, #24]
 8008fd4:	693a      	ldr	r2, [r7, #16]
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	4413      	add	r3, r2
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	2b2f      	cmp	r3, #47	@ 0x2f
 8008fde:	d0f6      	beq.n	8008fce <create_name+0x42>
 8008fe0:	693a      	ldr	r2, [r7, #16]
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	4413      	add	r3, r2
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	2b5c      	cmp	r3, #92	@ 0x5c
 8008fea:	d0f0      	beq.n	8008fce <create_name+0x42>
			break;
 8008fec:	e02a      	b.n	8009044 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	2bfe      	cmp	r3, #254	@ 0xfe
 8008ff2:	d901      	bls.n	8008ff8 <create_name+0x6c>
 8008ff4:	2306      	movs	r3, #6
 8008ff6:	e17d      	b.n	80092f4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008ff8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008ffe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009000:	2101      	movs	r1, #1
 8009002:	4618      	mov	r0, r3
 8009004:	f001 f9b8 	bl	800a378 <ff_convert>
 8009008:	4603      	mov	r3, r0
 800900a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800900c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800900e:	2b00      	cmp	r3, #0
 8009010:	d101      	bne.n	8009016 <create_name+0x8a>
 8009012:	2306      	movs	r3, #6
 8009014:	e16e      	b.n	80092f4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009016:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009018:	2b7f      	cmp	r3, #127	@ 0x7f
 800901a:	d809      	bhi.n	8009030 <create_name+0xa4>
 800901c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800901e:	4619      	mov	r1, r3
 8009020:	488d      	ldr	r0, [pc, #564]	@ (8009258 <create_name+0x2cc>)
 8009022:	f7fe fce3 	bl	80079ec <chk_chr>
 8009026:	4603      	mov	r3, r0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d001      	beq.n	8009030 <create_name+0xa4>
 800902c:	2306      	movs	r3, #6
 800902e:	e161      	b.n	80092f4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	1c5a      	adds	r2, r3, #1
 8009034:	617a      	str	r2, [r7, #20]
 8009036:	005b      	lsls	r3, r3, #1
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	4413      	add	r3, r2
 800903c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800903e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009040:	e7b4      	b.n	8008fac <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8009042:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009044:	693a      	ldr	r2, [r7, #16]
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	441a      	add	r2, r3
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800904e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009050:	2b1f      	cmp	r3, #31
 8009052:	d801      	bhi.n	8009058 <create_name+0xcc>
 8009054:	2304      	movs	r3, #4
 8009056:	e000      	b.n	800905a <create_name+0xce>
 8009058:	2300      	movs	r3, #0
 800905a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800905e:	e011      	b.n	8009084 <create_name+0xf8>
		w = lfn[di - 1];
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8009066:	3b01      	subs	r3, #1
 8009068:	005b      	lsls	r3, r3, #1
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	4413      	add	r3, r2
 800906e:	881b      	ldrh	r3, [r3, #0]
 8009070:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8009072:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009074:	2b20      	cmp	r3, #32
 8009076:	d002      	beq.n	800907e <create_name+0xf2>
 8009078:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800907a:	2b2e      	cmp	r3, #46	@ 0x2e
 800907c:	d106      	bne.n	800908c <create_name+0x100>
		di--;
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	3b01      	subs	r3, #1
 8009082:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d1ea      	bne.n	8009060 <create_name+0xd4>
 800908a:	e000      	b.n	800908e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800908c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	005b      	lsls	r3, r3, #1
 8009092:	68fa      	ldr	r2, [r7, #12]
 8009094:	4413      	add	r3, r2
 8009096:	2200      	movs	r2, #0
 8009098:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d101      	bne.n	80090a4 <create_name+0x118>
 80090a0:	2306      	movs	r3, #6
 80090a2:	e127      	b.n	80092f4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	3324      	adds	r3, #36	@ 0x24
 80090a8:	220b      	movs	r2, #11
 80090aa:	2120      	movs	r1, #32
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7fe fc5b 	bl	8007968 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80090b2:	2300      	movs	r3, #0
 80090b4:	61bb      	str	r3, [r7, #24]
 80090b6:	e002      	b.n	80090be <create_name+0x132>
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	3301      	adds	r3, #1
 80090bc:	61bb      	str	r3, [r7, #24]
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	005b      	lsls	r3, r3, #1
 80090c2:	68fa      	ldr	r2, [r7, #12]
 80090c4:	4413      	add	r3, r2
 80090c6:	881b      	ldrh	r3, [r3, #0]
 80090c8:	2b20      	cmp	r3, #32
 80090ca:	d0f5      	beq.n	80090b8 <create_name+0x12c>
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	005b      	lsls	r3, r3, #1
 80090d0:	68fa      	ldr	r2, [r7, #12]
 80090d2:	4413      	add	r3, r2
 80090d4:	881b      	ldrh	r3, [r3, #0]
 80090d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80090d8:	d0ee      	beq.n	80090b8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80090da:	69bb      	ldr	r3, [r7, #24]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d009      	beq.n	80090f4 <create_name+0x168>
 80090e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80090e4:	f043 0303 	orr.w	r3, r3, #3
 80090e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80090ec:	e002      	b.n	80090f4 <create_name+0x168>
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	3b01      	subs	r3, #1
 80090f2:	617b      	str	r3, [r7, #20]
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d009      	beq.n	800910e <create_name+0x182>
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8009100:	3b01      	subs	r3, #1
 8009102:	005b      	lsls	r3, r3, #1
 8009104:	68fa      	ldr	r2, [r7, #12]
 8009106:	4413      	add	r3, r2
 8009108:	881b      	ldrh	r3, [r3, #0]
 800910a:	2b2e      	cmp	r3, #46	@ 0x2e
 800910c:	d1ef      	bne.n	80090ee <create_name+0x162>

	i = b = 0; ni = 8;
 800910e:	2300      	movs	r3, #0
 8009110:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009114:	2300      	movs	r3, #0
 8009116:	623b      	str	r3, [r7, #32]
 8009118:	2308      	movs	r3, #8
 800911a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	1c5a      	adds	r2, r3, #1
 8009120:	61ba      	str	r2, [r7, #24]
 8009122:	005b      	lsls	r3, r3, #1
 8009124:	68fa      	ldr	r2, [r7, #12]
 8009126:	4413      	add	r3, r2
 8009128:	881b      	ldrh	r3, [r3, #0]
 800912a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800912c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800912e:	2b00      	cmp	r3, #0
 8009130:	f000 8090 	beq.w	8009254 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009134:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009136:	2b20      	cmp	r3, #32
 8009138:	d006      	beq.n	8009148 <create_name+0x1bc>
 800913a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800913c:	2b2e      	cmp	r3, #46	@ 0x2e
 800913e:	d10a      	bne.n	8009156 <create_name+0x1ca>
 8009140:	69ba      	ldr	r2, [r7, #24]
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	429a      	cmp	r2, r3
 8009146:	d006      	beq.n	8009156 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009148:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800914c:	f043 0303 	orr.w	r3, r3, #3
 8009150:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009154:	e07d      	b.n	8009252 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009156:	6a3a      	ldr	r2, [r7, #32]
 8009158:	69fb      	ldr	r3, [r7, #28]
 800915a:	429a      	cmp	r2, r3
 800915c:	d203      	bcs.n	8009166 <create_name+0x1da>
 800915e:	69ba      	ldr	r2, [r7, #24]
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	429a      	cmp	r2, r3
 8009164:	d123      	bne.n	80091ae <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	2b0b      	cmp	r3, #11
 800916a:	d106      	bne.n	800917a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800916c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009170:	f043 0303 	orr.w	r3, r3, #3
 8009174:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009178:	e075      	b.n	8009266 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800917a:	69ba      	ldr	r2, [r7, #24]
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	429a      	cmp	r2, r3
 8009180:	d005      	beq.n	800918e <create_name+0x202>
 8009182:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009186:	f043 0303 	orr.w	r3, r3, #3
 800918a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800918e:	69ba      	ldr	r2, [r7, #24]
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	429a      	cmp	r2, r3
 8009194:	d866      	bhi.n	8009264 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	61bb      	str	r3, [r7, #24]
 800919a:	2308      	movs	r3, #8
 800919c:	623b      	str	r3, [r7, #32]
 800919e:	230b      	movs	r3, #11
 80091a0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80091a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80091ac:	e051      	b.n	8009252 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80091ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80091b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80091b2:	d914      	bls.n	80091de <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80091b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80091b6:	2100      	movs	r1, #0
 80091b8:	4618      	mov	r0, r3
 80091ba:	f001 f8dd 	bl	800a378 <ff_convert>
 80091be:	4603      	mov	r3, r0
 80091c0:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80091c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d004      	beq.n	80091d2 <create_name+0x246>
 80091c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80091ca:	3b80      	subs	r3, #128	@ 0x80
 80091cc:	4a23      	ldr	r2, [pc, #140]	@ (800925c <create_name+0x2d0>)
 80091ce:	5cd3      	ldrb	r3, [r2, r3]
 80091d0:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80091d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80091d6:	f043 0302 	orr.w	r3, r3, #2
 80091da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80091de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d007      	beq.n	80091f4 <create_name+0x268>
 80091e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80091e6:	4619      	mov	r1, r3
 80091e8:	481d      	ldr	r0, [pc, #116]	@ (8009260 <create_name+0x2d4>)
 80091ea:	f7fe fbff 	bl	80079ec <chk_chr>
 80091ee:	4603      	mov	r3, r0
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d008      	beq.n	8009206 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80091f4:	235f      	movs	r3, #95	@ 0x5f
 80091f6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80091f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80091fc:	f043 0303 	orr.w	r3, r3, #3
 8009200:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009204:	e01b      	b.n	800923e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009206:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009208:	2b40      	cmp	r3, #64	@ 0x40
 800920a:	d909      	bls.n	8009220 <create_name+0x294>
 800920c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800920e:	2b5a      	cmp	r3, #90	@ 0x5a
 8009210:	d806      	bhi.n	8009220 <create_name+0x294>
					b |= 2;
 8009212:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009216:	f043 0302 	orr.w	r3, r3, #2
 800921a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800921e:	e00e      	b.n	800923e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009220:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009222:	2b60      	cmp	r3, #96	@ 0x60
 8009224:	d90b      	bls.n	800923e <create_name+0x2b2>
 8009226:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009228:	2b7a      	cmp	r3, #122	@ 0x7a
 800922a:	d808      	bhi.n	800923e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800922c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009230:	f043 0301 	orr.w	r3, r3, #1
 8009234:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009238:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800923a:	3b20      	subs	r3, #32
 800923c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800923e:	6a3b      	ldr	r3, [r7, #32]
 8009240:	1c5a      	adds	r2, r3, #1
 8009242:	623a      	str	r2, [r7, #32]
 8009244:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009246:	b2d1      	uxtb	r1, r2
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	4413      	add	r3, r2
 800924c:	460a      	mov	r2, r1
 800924e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8009252:	e763      	b.n	800911c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009254:	bf00      	nop
 8009256:	e006      	b.n	8009266 <create_name+0x2da>
 8009258:	0800a5c0 	.word	0x0800a5c0
 800925c:	0800b804 	.word	0x0800b804
 8009260:	0800a5cc 	.word	0x0800a5cc
			if (si > di) break;			/* No extension */
 8009264:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800926c:	2be5      	cmp	r3, #229	@ 0xe5
 800926e:	d103      	bne.n	8009278 <create_name+0x2ec>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2205      	movs	r2, #5
 8009274:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	2b08      	cmp	r3, #8
 800927c:	d104      	bne.n	8009288 <create_name+0x2fc>
 800927e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009288:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800928c:	f003 030c 	and.w	r3, r3, #12
 8009290:	2b0c      	cmp	r3, #12
 8009292:	d005      	beq.n	80092a0 <create_name+0x314>
 8009294:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009298:	f003 0303 	and.w	r3, r3, #3
 800929c:	2b03      	cmp	r3, #3
 800929e:	d105      	bne.n	80092ac <create_name+0x320>
 80092a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80092a4:	f043 0302 	orr.w	r3, r3, #2
 80092a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80092ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80092b0:	f003 0302 	and.w	r3, r3, #2
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d117      	bne.n	80092e8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80092b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80092bc:	f003 0303 	and.w	r3, r3, #3
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d105      	bne.n	80092d0 <create_name+0x344>
 80092c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80092c8:	f043 0310 	orr.w	r3, r3, #16
 80092cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80092d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80092d4:	f003 030c 	and.w	r3, r3, #12
 80092d8:	2b04      	cmp	r3, #4
 80092da:	d105      	bne.n	80092e8 <create_name+0x35c>
 80092dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80092e0:	f043 0308 	orr.w	r3, r3, #8
 80092e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80092ee:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 80092f2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3728      	adds	r7, #40	@ 0x28
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b086      	sub	sp, #24
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009310:	e002      	b.n	8009318 <follow_path+0x1c>
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	3301      	adds	r3, #1
 8009316:	603b      	str	r3, [r7, #0]
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	2b2f      	cmp	r3, #47	@ 0x2f
 800931e:	d0f8      	beq.n	8009312 <follow_path+0x16>
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	2b5c      	cmp	r3, #92	@ 0x5c
 8009326:	d0f4      	beq.n	8009312 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	2200      	movs	r2, #0
 800932c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	2b1f      	cmp	r3, #31
 8009334:	d80a      	bhi.n	800934c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2280      	movs	r2, #128	@ 0x80
 800933a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800933e:	2100      	movs	r1, #0
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f7ff f8fe 	bl	8008542 <dir_sdi>
 8009346:	4603      	mov	r3, r0
 8009348:	75fb      	strb	r3, [r7, #23]
 800934a:	e048      	b.n	80093de <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800934c:	463b      	mov	r3, r7
 800934e:	4619      	mov	r1, r3
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f7ff fe1b 	bl	8008f8c <create_name>
 8009356:	4603      	mov	r3, r0
 8009358:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800935a:	7dfb      	ldrb	r3, [r7, #23]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d139      	bne.n	80093d4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f7ff fc5a 	bl	8008c1a <dir_find>
 8009366:	4603      	mov	r3, r0
 8009368:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009370:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009372:	7dfb      	ldrb	r3, [r7, #23]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d00a      	beq.n	800938e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009378:	7dfb      	ldrb	r3, [r7, #23]
 800937a:	2b04      	cmp	r3, #4
 800937c:	d12c      	bne.n	80093d8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800937e:	7afb      	ldrb	r3, [r7, #11]
 8009380:	f003 0304 	and.w	r3, r3, #4
 8009384:	2b00      	cmp	r3, #0
 8009386:	d127      	bne.n	80093d8 <follow_path+0xdc>
 8009388:	2305      	movs	r3, #5
 800938a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800938c:	e024      	b.n	80093d8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800938e:	7afb      	ldrb	r3, [r7, #11]
 8009390:	f003 0304 	and.w	r3, r3, #4
 8009394:	2b00      	cmp	r3, #0
 8009396:	d121      	bne.n	80093dc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	799b      	ldrb	r3, [r3, #6]
 800939c:	f003 0310 	and.w	r3, r3, #16
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d102      	bne.n	80093aa <follow_path+0xae>
				res = FR_NO_PATH; break;
 80093a4:	2305      	movs	r3, #5
 80093a6:	75fb      	strb	r3, [r7, #23]
 80093a8:	e019      	b.n	80093de <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	695b      	ldr	r3, [r3, #20]
 80093b4:	68fa      	ldr	r2, [r7, #12]
 80093b6:	8992      	ldrh	r2, [r2, #12]
 80093b8:	fbb3 f0f2 	udiv	r0, r3, r2
 80093bc:	fb00 f202 	mul.w	r2, r0, r2
 80093c0:	1a9b      	subs	r3, r3, r2
 80093c2:	440b      	add	r3, r1
 80093c4:	4619      	mov	r1, r3
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	f7ff fa61 	bl	800888e <ld_clust>
 80093cc:	4602      	mov	r2, r0
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80093d2:	e7bb      	b.n	800934c <follow_path+0x50>
			if (res != FR_OK) break;
 80093d4:	bf00      	nop
 80093d6:	e002      	b.n	80093de <follow_path+0xe2>
				break;
 80093d8:	bf00      	nop
 80093da:	e000      	b.n	80093de <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80093dc:	bf00      	nop
			}
		}
	}

	return res;
 80093de:	7dfb      	ldrb	r3, [r7, #23]
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3718      	adds	r7, #24
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b087      	sub	sp, #28
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80093f0:	f04f 33ff 	mov.w	r3, #4294967295
 80093f4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d031      	beq.n	8009462 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	617b      	str	r3, [r7, #20]
 8009404:	e002      	b.n	800940c <get_ldnumber+0x24>
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	3301      	adds	r3, #1
 800940a:	617b      	str	r3, [r7, #20]
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	2b1f      	cmp	r3, #31
 8009412:	d903      	bls.n	800941c <get_ldnumber+0x34>
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	2b3a      	cmp	r3, #58	@ 0x3a
 800941a:	d1f4      	bne.n	8009406 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	2b3a      	cmp	r3, #58	@ 0x3a
 8009422:	d11c      	bne.n	800945e <get_ldnumber+0x76>
			tp = *path;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	1c5a      	adds	r2, r3, #1
 800942e:	60fa      	str	r2, [r7, #12]
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	3b30      	subs	r3, #48	@ 0x30
 8009434:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	2b09      	cmp	r3, #9
 800943a:	d80e      	bhi.n	800945a <get_ldnumber+0x72>
 800943c:	68fa      	ldr	r2, [r7, #12]
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	429a      	cmp	r2, r3
 8009442:	d10a      	bne.n	800945a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d107      	bne.n	800945a <get_ldnumber+0x72>
					vol = (int)i;
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	3301      	adds	r3, #1
 8009452:	617b      	str	r3, [r7, #20]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	697a      	ldr	r2, [r7, #20]
 8009458:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	e002      	b.n	8009464 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800945e:	2300      	movs	r3, #0
 8009460:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009462:	693b      	ldr	r3, [r7, #16]
}
 8009464:	4618      	mov	r0, r3
 8009466:	371c      	adds	r7, #28
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr

08009470 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2200      	movs	r2, #0
 800947e:	70da      	strb	r2, [r3, #3]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f04f 32ff 	mov.w	r2, #4294967295
 8009486:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009488:	6839      	ldr	r1, [r7, #0]
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f7fe fc7a 	bl	8007d84 <move_window>
 8009490:	4603      	mov	r3, r0
 8009492:	2b00      	cmp	r3, #0
 8009494:	d001      	beq.n	800949a <check_fs+0x2a>
 8009496:	2304      	movs	r3, #4
 8009498:	e038      	b.n	800950c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	3338      	adds	r3, #56	@ 0x38
 800949e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7fe f9bc 	bl	8007820 <ld_word>
 80094a8:	4603      	mov	r3, r0
 80094aa:	461a      	mov	r2, r3
 80094ac:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d001      	beq.n	80094b8 <check_fs+0x48>
 80094b4:	2303      	movs	r3, #3
 80094b6:	e029      	b.n	800950c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80094be:	2be9      	cmp	r3, #233	@ 0xe9
 80094c0:	d009      	beq.n	80094d6 <check_fs+0x66>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80094c8:	2beb      	cmp	r3, #235	@ 0xeb
 80094ca:	d11e      	bne.n	800950a <check_fs+0x9a>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80094d2:	2b90      	cmp	r3, #144	@ 0x90
 80094d4:	d119      	bne.n	800950a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	3338      	adds	r3, #56	@ 0x38
 80094da:	3336      	adds	r3, #54	@ 0x36
 80094dc:	4618      	mov	r0, r3
 80094de:	f7fe f9b8 	bl	8007852 <ld_dword>
 80094e2:	4603      	mov	r3, r0
 80094e4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80094e8:	4a0a      	ldr	r2, [pc, #40]	@ (8009514 <check_fs+0xa4>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d101      	bne.n	80094f2 <check_fs+0x82>
 80094ee:	2300      	movs	r3, #0
 80094f0:	e00c      	b.n	800950c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	3338      	adds	r3, #56	@ 0x38
 80094f6:	3352      	adds	r3, #82	@ 0x52
 80094f8:	4618      	mov	r0, r3
 80094fa:	f7fe f9aa 	bl	8007852 <ld_dword>
 80094fe:	4603      	mov	r3, r0
 8009500:	4a05      	ldr	r2, [pc, #20]	@ (8009518 <check_fs+0xa8>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d101      	bne.n	800950a <check_fs+0x9a>
 8009506:	2300      	movs	r3, #0
 8009508:	e000      	b.n	800950c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800950a:	2302      	movs	r3, #2
}
 800950c:	4618      	mov	r0, r3
 800950e:	3708      	adds	r7, #8
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}
 8009514:	00544146 	.word	0x00544146
 8009518:	33544146 	.word	0x33544146

0800951c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b096      	sub	sp, #88	@ 0x58
 8009520:	af00      	add	r7, sp, #0
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	60b9      	str	r1, [r7, #8]
 8009526:	4613      	mov	r3, r2
 8009528:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	2200      	movs	r2, #0
 800952e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009530:	68f8      	ldr	r0, [r7, #12]
 8009532:	f7ff ff59 	bl	80093e8 <get_ldnumber>
 8009536:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009538:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800953a:	2b00      	cmp	r3, #0
 800953c:	da01      	bge.n	8009542 <find_volume+0x26>
 800953e:	230b      	movs	r3, #11
 8009540:	e265      	b.n	8009a0e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009542:	4a9f      	ldr	r2, [pc, #636]	@ (80097c0 <find_volume+0x2a4>)
 8009544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800954a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800954c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800954e:	2b00      	cmp	r3, #0
 8009550:	d101      	bne.n	8009556 <find_volume+0x3a>
 8009552:	230c      	movs	r3, #12
 8009554:	e25b      	b.n	8009a0e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800955a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800955c:	79fb      	ldrb	r3, [r7, #7]
 800955e:	f023 0301 	bic.w	r3, r3, #1
 8009562:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d01a      	beq.n	80095a2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800956c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800956e:	785b      	ldrb	r3, [r3, #1]
 8009570:	4618      	mov	r0, r3
 8009572:	f7fe f8b5 	bl	80076e0 <disk_status>
 8009576:	4603      	mov	r3, r0
 8009578:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800957c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009580:	f003 0301 	and.w	r3, r3, #1
 8009584:	2b00      	cmp	r3, #0
 8009586:	d10c      	bne.n	80095a2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009588:	79fb      	ldrb	r3, [r7, #7]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d007      	beq.n	800959e <find_volume+0x82>
 800958e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009592:	f003 0304 	and.w	r3, r3, #4
 8009596:	2b00      	cmp	r3, #0
 8009598:	d001      	beq.n	800959e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800959a:	230a      	movs	r3, #10
 800959c:	e237      	b.n	8009a0e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800959e:	2300      	movs	r3, #0
 80095a0:	e235      	b.n	8009a0e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80095a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095a4:	2200      	movs	r2, #0
 80095a6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80095a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095aa:	b2da      	uxtb	r2, r3
 80095ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80095b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095b2:	785b      	ldrb	r3, [r3, #1]
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7fe f8ad 	bl	8007714 <disk_initialize>
 80095ba:	4603      	mov	r3, r0
 80095bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80095c0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80095c4:	f003 0301 	and.w	r3, r3, #1
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d001      	beq.n	80095d0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80095cc:	2303      	movs	r3, #3
 80095ce:	e21e      	b.n	8009a0e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80095d0:	79fb      	ldrb	r3, [r7, #7]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d007      	beq.n	80095e6 <find_volume+0xca>
 80095d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80095da:	f003 0304 	and.w	r3, r3, #4
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d001      	beq.n	80095e6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80095e2:	230a      	movs	r3, #10
 80095e4:	e213      	b.n	8009a0e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80095e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e8:	7858      	ldrb	r0, [r3, #1]
 80095ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ec:	330c      	adds	r3, #12
 80095ee:	461a      	mov	r2, r3
 80095f0:	2102      	movs	r1, #2
 80095f2:	f7fe f8f7 	bl	80077e4 <disk_ioctl>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d001      	beq.n	8009600 <find_volume+0xe4>
 80095fc:	2301      	movs	r3, #1
 80095fe:	e206      	b.n	8009a0e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009602:	899b      	ldrh	r3, [r3, #12]
 8009604:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009608:	d80d      	bhi.n	8009626 <find_volume+0x10a>
 800960a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800960c:	899b      	ldrh	r3, [r3, #12]
 800960e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009612:	d308      	bcc.n	8009626 <find_volume+0x10a>
 8009614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009616:	899b      	ldrh	r3, [r3, #12]
 8009618:	461a      	mov	r2, r3
 800961a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800961c:	899b      	ldrh	r3, [r3, #12]
 800961e:	3b01      	subs	r3, #1
 8009620:	4013      	ands	r3, r2
 8009622:	2b00      	cmp	r3, #0
 8009624:	d001      	beq.n	800962a <find_volume+0x10e>
 8009626:	2301      	movs	r3, #1
 8009628:	e1f1      	b.n	8009a0e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800962a:	2300      	movs	r3, #0
 800962c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800962e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009630:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009632:	f7ff ff1d 	bl	8009470 <check_fs>
 8009636:	4603      	mov	r3, r0
 8009638:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800963c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009640:	2b02      	cmp	r3, #2
 8009642:	d149      	bne.n	80096d8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009644:	2300      	movs	r3, #0
 8009646:	643b      	str	r3, [r7, #64]	@ 0x40
 8009648:	e01e      	b.n	8009688 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800964a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800964c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009650:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009652:	011b      	lsls	r3, r3, #4
 8009654:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009658:	4413      	add	r3, r2
 800965a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800965c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800965e:	3304      	adds	r3, #4
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d006      	beq.n	8009674 <find_volume+0x158>
 8009666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009668:	3308      	adds	r3, #8
 800966a:	4618      	mov	r0, r3
 800966c:	f7fe f8f1 	bl	8007852 <ld_dword>
 8009670:	4602      	mov	r2, r0
 8009672:	e000      	b.n	8009676 <find_volume+0x15a>
 8009674:	2200      	movs	r2, #0
 8009676:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	3358      	adds	r3, #88	@ 0x58
 800967c:	443b      	add	r3, r7
 800967e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009682:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009684:	3301      	adds	r3, #1
 8009686:	643b      	str	r3, [r7, #64]	@ 0x40
 8009688:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800968a:	2b03      	cmp	r3, #3
 800968c:	d9dd      	bls.n	800964a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800968e:	2300      	movs	r3, #0
 8009690:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8009692:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009694:	2b00      	cmp	r3, #0
 8009696:	d002      	beq.n	800969e <find_volume+0x182>
 8009698:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800969a:	3b01      	subs	r3, #1
 800969c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800969e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	3358      	adds	r3, #88	@ 0x58
 80096a4:	443b      	add	r3, r7
 80096a6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80096aa:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80096ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d005      	beq.n	80096be <find_volume+0x1a2>
 80096b2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80096b4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80096b6:	f7ff fedb 	bl	8009470 <check_fs>
 80096ba:	4603      	mov	r3, r0
 80096bc:	e000      	b.n	80096c0 <find_volume+0x1a4>
 80096be:	2303      	movs	r3, #3
 80096c0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80096c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d905      	bls.n	80096d8 <find_volume+0x1bc>
 80096cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096ce:	3301      	adds	r3, #1
 80096d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80096d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096d4:	2b03      	cmp	r3, #3
 80096d6:	d9e2      	bls.n	800969e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80096d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80096dc:	2b04      	cmp	r3, #4
 80096de:	d101      	bne.n	80096e4 <find_volume+0x1c8>
 80096e0:	2301      	movs	r3, #1
 80096e2:	e194      	b.n	8009a0e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80096e4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d901      	bls.n	80096f0 <find_volume+0x1d4>
 80096ec:	230d      	movs	r3, #13
 80096ee:	e18e      	b.n	8009a0e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80096f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f2:	3338      	adds	r3, #56	@ 0x38
 80096f4:	330b      	adds	r3, #11
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7fe f892 	bl	8007820 <ld_word>
 80096fc:	4603      	mov	r3, r0
 80096fe:	461a      	mov	r2, r3
 8009700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009702:	899b      	ldrh	r3, [r3, #12]
 8009704:	429a      	cmp	r2, r3
 8009706:	d001      	beq.n	800970c <find_volume+0x1f0>
 8009708:	230d      	movs	r3, #13
 800970a:	e180      	b.n	8009a0e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800970c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800970e:	3338      	adds	r3, #56	@ 0x38
 8009710:	3316      	adds	r3, #22
 8009712:	4618      	mov	r0, r3
 8009714:	f7fe f884 	bl	8007820 <ld_word>
 8009718:	4603      	mov	r3, r0
 800971a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800971c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800971e:	2b00      	cmp	r3, #0
 8009720:	d106      	bne.n	8009730 <find_volume+0x214>
 8009722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009724:	3338      	adds	r3, #56	@ 0x38
 8009726:	3324      	adds	r3, #36	@ 0x24
 8009728:	4618      	mov	r0, r3
 800972a:	f7fe f892 	bl	8007852 <ld_dword>
 800972e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8009730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009732:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009734:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009738:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800973c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800973e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009742:	789b      	ldrb	r3, [r3, #2]
 8009744:	2b01      	cmp	r3, #1
 8009746:	d005      	beq.n	8009754 <find_volume+0x238>
 8009748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800974a:	789b      	ldrb	r3, [r3, #2]
 800974c:	2b02      	cmp	r3, #2
 800974e:	d001      	beq.n	8009754 <find_volume+0x238>
 8009750:	230d      	movs	r3, #13
 8009752:	e15c      	b.n	8009a0e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009756:	789b      	ldrb	r3, [r3, #2]
 8009758:	461a      	mov	r2, r3
 800975a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800975c:	fb02 f303 	mul.w	r3, r2, r3
 8009760:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009764:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009768:	461a      	mov	r2, r3
 800976a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800976c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800976e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009770:	895b      	ldrh	r3, [r3, #10]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d008      	beq.n	8009788 <find_volume+0x26c>
 8009776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009778:	895b      	ldrh	r3, [r3, #10]
 800977a:	461a      	mov	r2, r3
 800977c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800977e:	895b      	ldrh	r3, [r3, #10]
 8009780:	3b01      	subs	r3, #1
 8009782:	4013      	ands	r3, r2
 8009784:	2b00      	cmp	r3, #0
 8009786:	d001      	beq.n	800978c <find_volume+0x270>
 8009788:	230d      	movs	r3, #13
 800978a:	e140      	b.n	8009a0e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800978c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800978e:	3338      	adds	r3, #56	@ 0x38
 8009790:	3311      	adds	r3, #17
 8009792:	4618      	mov	r0, r3
 8009794:	f7fe f844 	bl	8007820 <ld_word>
 8009798:	4603      	mov	r3, r0
 800979a:	461a      	mov	r2, r3
 800979c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800979e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80097a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097a2:	891b      	ldrh	r3, [r3, #8]
 80097a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80097a6:	8992      	ldrh	r2, [r2, #12]
 80097a8:	0952      	lsrs	r2, r2, #5
 80097aa:	b292      	uxth	r2, r2
 80097ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80097b0:	fb01 f202 	mul.w	r2, r1, r2
 80097b4:	1a9b      	subs	r3, r3, r2
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d003      	beq.n	80097c4 <find_volume+0x2a8>
 80097bc:	230d      	movs	r3, #13
 80097be:	e126      	b.n	8009a0e <find_volume+0x4f2>
 80097c0:	2000133c 	.word	0x2000133c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80097c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097c6:	3338      	adds	r3, #56	@ 0x38
 80097c8:	3313      	adds	r3, #19
 80097ca:	4618      	mov	r0, r3
 80097cc:	f7fe f828 	bl	8007820 <ld_word>
 80097d0:	4603      	mov	r3, r0
 80097d2:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80097d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d106      	bne.n	80097e8 <find_volume+0x2cc>
 80097da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097dc:	3338      	adds	r3, #56	@ 0x38
 80097de:	3320      	adds	r3, #32
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7fe f836 	bl	8007852 <ld_dword>
 80097e6:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80097e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ea:	3338      	adds	r3, #56	@ 0x38
 80097ec:	330e      	adds	r3, #14
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7fe f816 	bl	8007820 <ld_word>
 80097f4:	4603      	mov	r3, r0
 80097f6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80097f8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d101      	bne.n	8009802 <find_volume+0x2e6>
 80097fe:	230d      	movs	r3, #13
 8009800:	e105      	b.n	8009a0e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009802:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009804:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009806:	4413      	add	r3, r2
 8009808:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800980a:	8911      	ldrh	r1, [r2, #8]
 800980c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800980e:	8992      	ldrh	r2, [r2, #12]
 8009810:	0952      	lsrs	r2, r2, #5
 8009812:	b292      	uxth	r2, r2
 8009814:	fbb1 f2f2 	udiv	r2, r1, r2
 8009818:	b292      	uxth	r2, r2
 800981a:	4413      	add	r3, r2
 800981c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800981e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009822:	429a      	cmp	r2, r3
 8009824:	d201      	bcs.n	800982a <find_volume+0x30e>
 8009826:	230d      	movs	r3, #13
 8009828:	e0f1      	b.n	8009a0e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800982a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800982c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800982e:	1ad3      	subs	r3, r2, r3
 8009830:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009832:	8952      	ldrh	r2, [r2, #10]
 8009834:	fbb3 f3f2 	udiv	r3, r3, r2
 8009838:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800983a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800983c:	2b00      	cmp	r3, #0
 800983e:	d101      	bne.n	8009844 <find_volume+0x328>
 8009840:	230d      	movs	r3, #13
 8009842:	e0e4      	b.n	8009a0e <find_volume+0x4f2>
		fmt = FS_FAT32;
 8009844:	2303      	movs	r3, #3
 8009846:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800984a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800984c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009850:	4293      	cmp	r3, r2
 8009852:	d802      	bhi.n	800985a <find_volume+0x33e>
 8009854:	2302      	movs	r3, #2
 8009856:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800985a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800985c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009860:	4293      	cmp	r3, r2
 8009862:	d802      	bhi.n	800986a <find_volume+0x34e>
 8009864:	2301      	movs	r3, #1
 8009866:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800986a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800986c:	1c9a      	adds	r2, r3, #2
 800986e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009870:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8009872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009874:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009876:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009878:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800987a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800987c:	441a      	add	r2, r3
 800987e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009880:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8009882:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009886:	441a      	add	r2, r3
 8009888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800988a:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800988c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009890:	2b03      	cmp	r3, #3
 8009892:	d11e      	bne.n	80098d2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009896:	3338      	adds	r3, #56	@ 0x38
 8009898:	332a      	adds	r3, #42	@ 0x2a
 800989a:	4618      	mov	r0, r3
 800989c:	f7fd ffc0 	bl	8007820 <ld_word>
 80098a0:	4603      	mov	r3, r0
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d001      	beq.n	80098aa <find_volume+0x38e>
 80098a6:	230d      	movs	r3, #13
 80098a8:	e0b1      	b.n	8009a0e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80098aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ac:	891b      	ldrh	r3, [r3, #8]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d001      	beq.n	80098b6 <find_volume+0x39a>
 80098b2:	230d      	movs	r3, #13
 80098b4:	e0ab      	b.n	8009a0e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80098b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098b8:	3338      	adds	r3, #56	@ 0x38
 80098ba:	332c      	adds	r3, #44	@ 0x2c
 80098bc:	4618      	mov	r0, r3
 80098be:	f7fd ffc8 	bl	8007852 <ld_dword>
 80098c2:	4602      	mov	r2, r0
 80098c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098c6:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80098c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ca:	69db      	ldr	r3, [r3, #28]
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80098d0:	e01f      	b.n	8009912 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80098d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098d4:	891b      	ldrh	r3, [r3, #8]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d101      	bne.n	80098de <find_volume+0x3c2>
 80098da:	230d      	movs	r3, #13
 80098dc:	e097      	b.n	8009a0e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80098de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80098e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098e4:	441a      	add	r2, r3
 80098e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098e8:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80098ea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80098ee:	2b02      	cmp	r3, #2
 80098f0:	d103      	bne.n	80098fa <find_volume+0x3de>
 80098f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098f4:	69db      	ldr	r3, [r3, #28]
 80098f6:	005b      	lsls	r3, r3, #1
 80098f8:	e00a      	b.n	8009910 <find_volume+0x3f4>
 80098fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098fc:	69da      	ldr	r2, [r3, #28]
 80098fe:	4613      	mov	r3, r2
 8009900:	005b      	lsls	r3, r3, #1
 8009902:	4413      	add	r3, r2
 8009904:	085a      	lsrs	r2, r3, #1
 8009906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009908:	69db      	ldr	r3, [r3, #28]
 800990a:	f003 0301 	and.w	r3, r3, #1
 800990e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009910:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009914:	6a1a      	ldr	r2, [r3, #32]
 8009916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009918:	899b      	ldrh	r3, [r3, #12]
 800991a:	4619      	mov	r1, r3
 800991c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800991e:	440b      	add	r3, r1
 8009920:	3b01      	subs	r3, #1
 8009922:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009924:	8989      	ldrh	r1, [r1, #12]
 8009926:	fbb3 f3f1 	udiv	r3, r3, r1
 800992a:	429a      	cmp	r2, r3
 800992c:	d201      	bcs.n	8009932 <find_volume+0x416>
 800992e:	230d      	movs	r3, #13
 8009930:	e06d      	b.n	8009a0e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009934:	f04f 32ff 	mov.w	r2, #4294967295
 8009938:	619a      	str	r2, [r3, #24]
 800993a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800993c:	699a      	ldr	r2, [r3, #24]
 800993e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009940:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8009942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009944:	2280      	movs	r2, #128	@ 0x80
 8009946:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009948:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800994c:	2b03      	cmp	r3, #3
 800994e:	d149      	bne.n	80099e4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009952:	3338      	adds	r3, #56	@ 0x38
 8009954:	3330      	adds	r3, #48	@ 0x30
 8009956:	4618      	mov	r0, r3
 8009958:	f7fd ff62 	bl	8007820 <ld_word>
 800995c:	4603      	mov	r3, r0
 800995e:	2b01      	cmp	r3, #1
 8009960:	d140      	bne.n	80099e4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009962:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009964:	3301      	adds	r3, #1
 8009966:	4619      	mov	r1, r3
 8009968:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800996a:	f7fe fa0b 	bl	8007d84 <move_window>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d137      	bne.n	80099e4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8009974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009976:	2200      	movs	r2, #0
 8009978:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800997a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800997c:	3338      	adds	r3, #56	@ 0x38
 800997e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009982:	4618      	mov	r0, r3
 8009984:	f7fd ff4c 	bl	8007820 <ld_word>
 8009988:	4603      	mov	r3, r0
 800998a:	461a      	mov	r2, r3
 800998c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009990:	429a      	cmp	r2, r3
 8009992:	d127      	bne.n	80099e4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009996:	3338      	adds	r3, #56	@ 0x38
 8009998:	4618      	mov	r0, r3
 800999a:	f7fd ff5a 	bl	8007852 <ld_dword>
 800999e:	4603      	mov	r3, r0
 80099a0:	4a1d      	ldr	r2, [pc, #116]	@ (8009a18 <find_volume+0x4fc>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d11e      	bne.n	80099e4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80099a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a8:	3338      	adds	r3, #56	@ 0x38
 80099aa:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7fd ff4f 	bl	8007852 <ld_dword>
 80099b4:	4603      	mov	r3, r0
 80099b6:	4a19      	ldr	r2, [pc, #100]	@ (8009a1c <find_volume+0x500>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d113      	bne.n	80099e4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80099bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099be:	3338      	adds	r3, #56	@ 0x38
 80099c0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80099c4:	4618      	mov	r0, r3
 80099c6:	f7fd ff44 	bl	8007852 <ld_dword>
 80099ca:	4602      	mov	r2, r0
 80099cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ce:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80099d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099d2:	3338      	adds	r3, #56	@ 0x38
 80099d4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80099d8:	4618      	mov	r0, r3
 80099da:	f7fd ff3a 	bl	8007852 <ld_dword>
 80099de:	4602      	mov	r2, r0
 80099e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099e2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80099e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099e6:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80099ea:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80099ec:	4b0c      	ldr	r3, [pc, #48]	@ (8009a20 <find_volume+0x504>)
 80099ee:	881b      	ldrh	r3, [r3, #0]
 80099f0:	3301      	adds	r3, #1
 80099f2:	b29a      	uxth	r2, r3
 80099f4:	4b0a      	ldr	r3, [pc, #40]	@ (8009a20 <find_volume+0x504>)
 80099f6:	801a      	strh	r2, [r3, #0]
 80099f8:	4b09      	ldr	r3, [pc, #36]	@ (8009a20 <find_volume+0x504>)
 80099fa:	881a      	ldrh	r2, [r3, #0]
 80099fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099fe:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8009a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a02:	4a08      	ldr	r2, [pc, #32]	@ (8009a24 <find_volume+0x508>)
 8009a04:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009a06:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009a08:	f7fe f954 	bl	8007cb4 <clear_lock>
#endif
	return FR_OK;
 8009a0c:	2300      	movs	r3, #0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3758      	adds	r7, #88	@ 0x58
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	41615252 	.word	0x41615252
 8009a1c:	61417272 	.word	0x61417272
 8009a20:	20001340 	.word	0x20001340
 8009a24:	20001364 	.word	0x20001364

08009a28 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009a32:	2309      	movs	r3, #9
 8009a34:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d01c      	beq.n	8009a76 <validate+0x4e>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d018      	beq.n	8009a76 <validate+0x4e>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d013      	beq.n	8009a76 <validate+0x4e>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	889a      	ldrh	r2, [r3, #4]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	88db      	ldrh	r3, [r3, #6]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d10c      	bne.n	8009a76 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	785b      	ldrb	r3, [r3, #1]
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7fd fe3c 	bl	80076e0 <disk_status>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	f003 0301 	and.w	r3, r3, #1
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d101      	bne.n	8009a76 <validate+0x4e>
			res = FR_OK;
 8009a72:	2300      	movs	r3, #0
 8009a74:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009a76:	7bfb      	ldrb	r3, [r7, #15]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d102      	bne.n	8009a82 <validate+0x5a>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	e000      	b.n	8009a84 <validate+0x5c>
 8009a82:	2300      	movs	r3, #0
 8009a84:	683a      	ldr	r2, [r7, #0]
 8009a86:	6013      	str	r3, [r2, #0]
	return res;
 8009a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3710      	adds	r7, #16
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
	...

08009a94 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b088      	sub	sp, #32
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	60f8      	str	r0, [r7, #12]
 8009a9c:	60b9      	str	r1, [r7, #8]
 8009a9e:	4613      	mov	r3, r2
 8009aa0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009aa6:	f107 0310 	add.w	r3, r7, #16
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7ff fc9c 	bl	80093e8 <get_ldnumber>
 8009ab0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009ab2:	69fb      	ldr	r3, [r7, #28]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	da01      	bge.n	8009abc <f_mount+0x28>
 8009ab8:	230b      	movs	r3, #11
 8009aba:	e02b      	b.n	8009b14 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009abc:	4a17      	ldr	r2, [pc, #92]	@ (8009b1c <f_mount+0x88>)
 8009abe:	69fb      	ldr	r3, [r7, #28]
 8009ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ac4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009ac6:	69bb      	ldr	r3, [r7, #24]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d005      	beq.n	8009ad8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009acc:	69b8      	ldr	r0, [r7, #24]
 8009ace:	f7fe f8f1 	bl	8007cb4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009ad2:	69bb      	ldr	r3, [r7, #24]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d002      	beq.n	8009ae4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009ae4:	68fa      	ldr	r2, [r7, #12]
 8009ae6:	490d      	ldr	r1, [pc, #52]	@ (8009b1c <f_mount+0x88>)
 8009ae8:	69fb      	ldr	r3, [r7, #28]
 8009aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d002      	beq.n	8009afa <f_mount+0x66>
 8009af4:	79fb      	ldrb	r3, [r7, #7]
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d001      	beq.n	8009afe <f_mount+0x6a>
 8009afa:	2300      	movs	r3, #0
 8009afc:	e00a      	b.n	8009b14 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009afe:	f107 010c 	add.w	r1, r7, #12
 8009b02:	f107 0308 	add.w	r3, r7, #8
 8009b06:	2200      	movs	r2, #0
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7ff fd07 	bl	800951c <find_volume>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3720      	adds	r7, #32
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}
 8009b1c:	2000133c 	.word	0x2000133c

08009b20 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b09a      	sub	sp, #104	@ 0x68
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	60f8      	str	r0, [r7, #12]
 8009b28:	60b9      	str	r1, [r7, #8]
 8009b2a:	4613      	mov	r3, r2
 8009b2c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d101      	bne.n	8009b38 <f_open+0x18>
 8009b34:	2309      	movs	r3, #9
 8009b36:	e1b7      	b.n	8009ea8 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009b38:	79fb      	ldrb	r3, [r7, #7]
 8009b3a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b3e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009b40:	79fa      	ldrb	r2, [r7, #7]
 8009b42:	f107 0114 	add.w	r1, r7, #20
 8009b46:	f107 0308 	add.w	r3, r7, #8
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f7ff fce6 	bl	800951c <find_volume>
 8009b50:	4603      	mov	r3, r0
 8009b52:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8009b56:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	f040 819b 	bne.w	8009e96 <f_open+0x376>
		dj.obj.fs = fs;
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009b64:	68ba      	ldr	r2, [r7, #8]
 8009b66:	f107 0318 	add.w	r3, r7, #24
 8009b6a:	4611      	mov	r1, r2
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f7ff fbc5 	bl	80092fc <follow_path>
 8009b72:	4603      	mov	r3, r0
 8009b74:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009b78:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d118      	bne.n	8009bb2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009b80:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009b84:	b25b      	sxtb	r3, r3
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	da03      	bge.n	8009b92 <f_open+0x72>
				res = FR_INVALID_NAME;
 8009b8a:	2306      	movs	r3, #6
 8009b8c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009b90:	e00f      	b.n	8009bb2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009b92:	79fb      	ldrb	r3, [r7, #7]
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	bf8c      	ite	hi
 8009b98:	2301      	movhi	r3, #1
 8009b9a:	2300      	movls	r3, #0
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	f107 0318 	add.w	r3, r7, #24
 8009ba4:	4611      	mov	r1, r2
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f7fd ff3c 	bl	8007a24 <chk_lock>
 8009bac:	4603      	mov	r3, r0
 8009bae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009bb2:	79fb      	ldrb	r3, [r7, #7]
 8009bb4:	f003 031c 	and.w	r3, r3, #28
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d07f      	beq.n	8009cbc <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8009bbc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d017      	beq.n	8009bf4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009bc4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009bc8:	2b04      	cmp	r3, #4
 8009bca:	d10e      	bne.n	8009bea <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009bcc:	f7fd ff86 	bl	8007adc <enq_lock>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d006      	beq.n	8009be4 <f_open+0xc4>
 8009bd6:	f107 0318 	add.w	r3, r7, #24
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7ff f8de 	bl	8008d9c <dir_register>
 8009be0:	4603      	mov	r3, r0
 8009be2:	e000      	b.n	8009be6 <f_open+0xc6>
 8009be4:	2312      	movs	r3, #18
 8009be6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009bea:	79fb      	ldrb	r3, [r7, #7]
 8009bec:	f043 0308 	orr.w	r3, r3, #8
 8009bf0:	71fb      	strb	r3, [r7, #7]
 8009bf2:	e010      	b.n	8009c16 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009bf4:	7fbb      	ldrb	r3, [r7, #30]
 8009bf6:	f003 0311 	and.w	r3, r3, #17
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d003      	beq.n	8009c06 <f_open+0xe6>
					res = FR_DENIED;
 8009bfe:	2307      	movs	r3, #7
 8009c00:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009c04:	e007      	b.n	8009c16 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009c06:	79fb      	ldrb	r3, [r7, #7]
 8009c08:	f003 0304 	and.w	r3, r3, #4
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d002      	beq.n	8009c16 <f_open+0xf6>
 8009c10:	2308      	movs	r3, #8
 8009c12:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009c16:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d168      	bne.n	8009cf0 <f_open+0x1d0>
 8009c1e:	79fb      	ldrb	r3, [r7, #7]
 8009c20:	f003 0308 	and.w	r3, r3, #8
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d063      	beq.n	8009cf0 <f_open+0x1d0>
				dw = GET_FATTIME();
 8009c28:	f7fd fcfc 	bl	8007624 <get_fattime>
 8009c2c:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c30:	330e      	adds	r3, #14
 8009c32:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7fd fe4a 	bl	80078ce <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c3c:	3316      	adds	r3, #22
 8009c3e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009c40:	4618      	mov	r0, r3
 8009c42:	f7fd fe44 	bl	80078ce <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c48:	330b      	adds	r3, #11
 8009c4a:	2220      	movs	r2, #32
 8009c4c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009c52:	4611      	mov	r1, r2
 8009c54:	4618      	mov	r0, r3
 8009c56:	f7fe fe1a 	bl	800888e <ld_clust>
 8009c5a:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009c60:	2200      	movs	r2, #0
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7fe fe32 	bl	80088cc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c6a:	331c      	adds	r3, #28
 8009c6c:	2100      	movs	r1, #0
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7fd fe2d 	bl	80078ce <st_dword>
					fs->wflag = 1;
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	2201      	movs	r2, #1
 8009c78:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009c7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d037      	beq.n	8009cf0 <f_open+0x1d0>
						dw = fs->winsect;
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c84:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8009c86:	f107 0318 	add.w	r3, r7, #24
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7fe fb22 	bl	80082d8 <remove_chain>
 8009c94:	4603      	mov	r3, r0
 8009c96:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8009c9a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d126      	bne.n	8009cf0 <f_open+0x1d0>
							res = move_window(fs, dw);
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f7fe f86c 	bl	8007d84 <move_window>
 8009cac:	4603      	mov	r3, r0
 8009cae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009cb6:	3a01      	subs	r2, #1
 8009cb8:	615a      	str	r2, [r3, #20]
 8009cba:	e019      	b.n	8009cf0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009cbc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d115      	bne.n	8009cf0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009cc4:	7fbb      	ldrb	r3, [r7, #30]
 8009cc6:	f003 0310 	and.w	r3, r3, #16
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d003      	beq.n	8009cd6 <f_open+0x1b6>
					res = FR_NO_FILE;
 8009cce:	2304      	movs	r3, #4
 8009cd0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009cd4:	e00c      	b.n	8009cf0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009cd6:	79fb      	ldrb	r3, [r7, #7]
 8009cd8:	f003 0302 	and.w	r3, r3, #2
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d007      	beq.n	8009cf0 <f_open+0x1d0>
 8009ce0:	7fbb      	ldrb	r3, [r7, #30]
 8009ce2:	f003 0301 	and.w	r3, r3, #1
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d002      	beq.n	8009cf0 <f_open+0x1d0>
						res = FR_DENIED;
 8009cea:	2307      	movs	r3, #7
 8009cec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8009cf0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d126      	bne.n	8009d46 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009cf8:	79fb      	ldrb	r3, [r7, #7]
 8009cfa:	f003 0308 	and.w	r3, r3, #8
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d003      	beq.n	8009d0a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8009d02:	79fb      	ldrb	r3, [r7, #7]
 8009d04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d08:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8009d12:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009d18:	79fb      	ldrb	r3, [r7, #7]
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	bf8c      	ite	hi
 8009d1e:	2301      	movhi	r3, #1
 8009d20:	2300      	movls	r3, #0
 8009d22:	b2db      	uxtb	r3, r3
 8009d24:	461a      	mov	r2, r3
 8009d26:	f107 0318 	add.w	r3, r7, #24
 8009d2a:	4611      	mov	r1, r2
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f7fd fef7 	bl	8007b20 <inc_lock>
 8009d32:	4602      	mov	r2, r0
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	691b      	ldr	r3, [r3, #16]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d102      	bne.n	8009d46 <f_open+0x226>
 8009d40:	2302      	movs	r3, #2
 8009d42:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009d46:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	f040 80a3 	bne.w	8009e96 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009d54:	4611      	mov	r1, r2
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7fe fd99 	bl	800888e <ld_clust>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d64:	331c      	adds	r3, #28
 8009d66:	4618      	mov	r0, r3
 8009d68:	f7fd fd73 	bl	8007852 <ld_dword>
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2200      	movs	r2, #0
 8009d76:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009d78:	697a      	ldr	r2, [r7, #20]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	88da      	ldrh	r2, [r3, #6]
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	79fa      	ldrb	r2, [r7, #7]
 8009d8a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2200      	movs	r2, #0
 8009d96:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	3330      	adds	r3, #48	@ 0x30
 8009da2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009da6:	2100      	movs	r1, #0
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7fd fddd 	bl	8007968 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009dae:	79fb      	ldrb	r3, [r7, #7]
 8009db0:	f003 0320 	and.w	r3, r3, #32
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d06e      	beq.n	8009e96 <f_open+0x376>
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	68db      	ldr	r3, [r3, #12]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d06a      	beq.n	8009e96 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	68da      	ldr	r2, [r3, #12]
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	895b      	ldrh	r3, [r3, #10]
 8009dcc:	461a      	mov	r2, r3
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	899b      	ldrh	r3, [r3, #12]
 8009dd2:	fb02 f303 	mul.w	r3, r2, r3
 8009dd6:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	689b      	ldr	r3, [r3, #8]
 8009ddc:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	68db      	ldr	r3, [r3, #12]
 8009de2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009de4:	e016      	b.n	8009e14 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7fe f887 	bl	8007efe <get_fat>
 8009df0:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8009df2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d802      	bhi.n	8009dfe <f_open+0x2de>
 8009df8:	2302      	movs	r3, #2
 8009dfa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009dfe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e04:	d102      	bne.n	8009e0c <f_open+0x2ec>
 8009e06:	2301      	movs	r3, #1
 8009e08:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009e0c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009e0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e10:	1ad3      	subs	r3, r2, r3
 8009e12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e14:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d103      	bne.n	8009e24 <f_open+0x304>
 8009e1c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009e1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d8e0      	bhi.n	8009de6 <f_open+0x2c6>
				}
				fp->clust = clst;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009e28:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009e2a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d131      	bne.n	8009e96 <f_open+0x376>
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	899b      	ldrh	r3, [r3, #12]
 8009e36:	461a      	mov	r2, r3
 8009e38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e3a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e3e:	fb01 f202 	mul.w	r2, r1, r2
 8009e42:	1a9b      	subs	r3, r3, r2
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d026      	beq.n	8009e96 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f7fe f837 	bl	8007ec0 <clust2sect>
 8009e52:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8009e54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d103      	bne.n	8009e62 <f_open+0x342>
						res = FR_INT_ERR;
 8009e5a:	2302      	movs	r3, #2
 8009e5c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009e60:	e019      	b.n	8009e96 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	899b      	ldrh	r3, [r3, #12]
 8009e66:	461a      	mov	r2, r3
 8009e68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8009e6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e70:	441a      	add	r2, r3
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	7858      	ldrb	r0, [r3, #1]
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	6a1a      	ldr	r2, [r3, #32]
 8009e84:	2301      	movs	r3, #1
 8009e86:	f7fd fc6d 	bl	8007764 <disk_read>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d002      	beq.n	8009e96 <f_open+0x376>
 8009e90:	2301      	movs	r3, #1
 8009e92:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009e96:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d002      	beq.n	8009ea4 <f_open+0x384>
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009ea4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3768      	adds	r7, #104	@ 0x68
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b08e      	sub	sp, #56	@ 0x38
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	607a      	str	r2, [r7, #4]
 8009ebc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f107 0214 	add.w	r2, r7, #20
 8009ece:	4611      	mov	r1, r2
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f7ff fda9 	bl	8009a28 <validate>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009edc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d107      	bne.n	8009ef4 <f_read+0x44>
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	7d5b      	ldrb	r3, [r3, #21]
 8009ee8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009eec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d002      	beq.n	8009efa <f_read+0x4a>
 8009ef4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009ef8:	e135      	b.n	800a166 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	7d1b      	ldrb	r3, [r3, #20]
 8009efe:	f003 0301 	and.w	r3, r3, #1
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d101      	bne.n	8009f0a <f_read+0x5a>
 8009f06:	2307      	movs	r3, #7
 8009f08:	e12d      	b.n	800a166 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	68da      	ldr	r2, [r3, #12]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	699b      	ldr	r3, [r3, #24]
 8009f12:	1ad3      	subs	r3, r2, r3
 8009f14:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	6a3b      	ldr	r3, [r7, #32]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	f240 811e 	bls.w	800a15c <f_read+0x2ac>
 8009f20:	6a3b      	ldr	r3, [r7, #32]
 8009f22:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009f24:	e11a      	b.n	800a15c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	699b      	ldr	r3, [r3, #24]
 8009f2a:	697a      	ldr	r2, [r7, #20]
 8009f2c:	8992      	ldrh	r2, [r2, #12]
 8009f2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f32:	fb01 f202 	mul.w	r2, r1, r2
 8009f36:	1a9b      	subs	r3, r3, r2
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	f040 80d5 	bne.w	800a0e8 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	699b      	ldr	r3, [r3, #24]
 8009f42:	697a      	ldr	r2, [r7, #20]
 8009f44:	8992      	ldrh	r2, [r2, #12]
 8009f46:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f4a:	697a      	ldr	r2, [r7, #20]
 8009f4c:	8952      	ldrh	r2, [r2, #10]
 8009f4e:	3a01      	subs	r2, #1
 8009f50:	4013      	ands	r3, r2
 8009f52:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009f54:	69fb      	ldr	r3, [r7, #28]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d12f      	bne.n	8009fba <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	699b      	ldr	r3, [r3, #24]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d103      	bne.n	8009f6a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	689b      	ldr	r3, [r3, #8]
 8009f66:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f68:	e013      	b.n	8009f92 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d007      	beq.n	8009f82 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	699b      	ldr	r3, [r3, #24]
 8009f76:	4619      	mov	r1, r3
 8009f78:	68f8      	ldr	r0, [r7, #12]
 8009f7a:	f7fe faaa 	bl	80084d2 <clmt_clust>
 8009f7e:	6338      	str	r0, [r7, #48]	@ 0x30
 8009f80:	e007      	b.n	8009f92 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009f82:	68fa      	ldr	r2, [r7, #12]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	69db      	ldr	r3, [r3, #28]
 8009f88:	4619      	mov	r1, r3
 8009f8a:	4610      	mov	r0, r2
 8009f8c:	f7fd ffb7 	bl	8007efe <get_fat>
 8009f90:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d804      	bhi.n	8009fa2 <f_read+0xf2>
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2202      	movs	r2, #2
 8009f9c:	755a      	strb	r2, [r3, #21]
 8009f9e:	2302      	movs	r3, #2
 8009fa0:	e0e1      	b.n	800a166 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fa8:	d104      	bne.n	8009fb4 <f_read+0x104>
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2201      	movs	r2, #1
 8009fae:	755a      	strb	r2, [r3, #21]
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	e0d8      	b.n	800a166 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fb8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009fba:	697a      	ldr	r2, [r7, #20]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	69db      	ldr	r3, [r3, #28]
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	4610      	mov	r0, r2
 8009fc4:	f7fd ff7c 	bl	8007ec0 <clust2sect>
 8009fc8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009fca:	69bb      	ldr	r3, [r7, #24]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d104      	bne.n	8009fda <f_read+0x12a>
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2202      	movs	r2, #2
 8009fd4:	755a      	strb	r2, [r3, #21]
 8009fd6:	2302      	movs	r3, #2
 8009fd8:	e0c5      	b.n	800a166 <f_read+0x2b6>
			sect += csect;
 8009fda:	69ba      	ldr	r2, [r7, #24]
 8009fdc:	69fb      	ldr	r3, [r7, #28]
 8009fde:	4413      	add	r3, r2
 8009fe0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	899b      	ldrh	r3, [r3, #12]
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	fbb3 f3f2 	udiv	r3, r3, r2
 8009fee:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d041      	beq.n	800a07a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009ff6:	69fa      	ldr	r2, [r7, #28]
 8009ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ffa:	4413      	add	r3, r2
 8009ffc:	697a      	ldr	r2, [r7, #20]
 8009ffe:	8952      	ldrh	r2, [r2, #10]
 800a000:	4293      	cmp	r3, r2
 800a002:	d905      	bls.n	800a010 <f_read+0x160>
					cc = fs->csize - csect;
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	895b      	ldrh	r3, [r3, #10]
 800a008:	461a      	mov	r2, r3
 800a00a:	69fb      	ldr	r3, [r7, #28]
 800a00c:	1ad3      	subs	r3, r2, r3
 800a00e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	7858      	ldrb	r0, [r3, #1]
 800a014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a016:	69ba      	ldr	r2, [r7, #24]
 800a018:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a01a:	f7fd fba3 	bl	8007764 <disk_read>
 800a01e:	4603      	mov	r3, r0
 800a020:	2b00      	cmp	r3, #0
 800a022:	d004      	beq.n	800a02e <f_read+0x17e>
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2201      	movs	r2, #1
 800a028:	755a      	strb	r2, [r3, #21]
 800a02a:	2301      	movs	r3, #1
 800a02c:	e09b      	b.n	800a166 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	7d1b      	ldrb	r3, [r3, #20]
 800a032:	b25b      	sxtb	r3, r3
 800a034:	2b00      	cmp	r3, #0
 800a036:	da18      	bge.n	800a06a <f_read+0x1ba>
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	6a1a      	ldr	r2, [r3, #32]
 800a03c:	69bb      	ldr	r3, [r7, #24]
 800a03e:	1ad3      	subs	r3, r2, r3
 800a040:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a042:	429a      	cmp	r2, r3
 800a044:	d911      	bls.n	800a06a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	6a1a      	ldr	r2, [r3, #32]
 800a04a:	69bb      	ldr	r3, [r7, #24]
 800a04c:	1ad3      	subs	r3, r2, r3
 800a04e:	697a      	ldr	r2, [r7, #20]
 800a050:	8992      	ldrh	r2, [r2, #12]
 800a052:	fb02 f303 	mul.w	r3, r2, r3
 800a056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a058:	18d0      	adds	r0, r2, r3
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	899b      	ldrh	r3, [r3, #12]
 800a064:	461a      	mov	r2, r3
 800a066:	f7fd fc5e 	bl	8007926 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	899b      	ldrh	r3, [r3, #12]
 800a06e:	461a      	mov	r2, r3
 800a070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a072:	fb02 f303 	mul.w	r3, r2, r3
 800a076:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800a078:	e05c      	b.n	800a134 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	6a1b      	ldr	r3, [r3, #32]
 800a07e:	69ba      	ldr	r2, [r7, #24]
 800a080:	429a      	cmp	r2, r3
 800a082:	d02e      	beq.n	800a0e2 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	7d1b      	ldrb	r3, [r3, #20]
 800a088:	b25b      	sxtb	r3, r3
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	da18      	bge.n	800a0c0 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	7858      	ldrb	r0, [r3, #1]
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	6a1a      	ldr	r2, [r3, #32]
 800a09c:	2301      	movs	r3, #1
 800a09e:	f7fd fb81 	bl	80077a4 <disk_write>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d004      	beq.n	800a0b2 <f_read+0x202>
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	755a      	strb	r2, [r3, #21]
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	e059      	b.n	800a166 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	7d1b      	ldrb	r3, [r3, #20]
 800a0b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0ba:	b2da      	uxtb	r2, r3
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	7858      	ldrb	r0, [r3, #1]
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	69ba      	ldr	r2, [r7, #24]
 800a0ce:	f7fd fb49 	bl	8007764 <disk_read>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d004      	beq.n	800a0e2 <f_read+0x232>
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	755a      	strb	r2, [r3, #21]
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e041      	b.n	800a166 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	69ba      	ldr	r2, [r7, #24]
 800a0e6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	899b      	ldrh	r3, [r3, #12]
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	699b      	ldr	r3, [r3, #24]
 800a0f2:	697a      	ldr	r2, [r7, #20]
 800a0f4:	8992      	ldrh	r2, [r2, #12]
 800a0f6:	fbb3 f1f2 	udiv	r1, r3, r2
 800a0fa:	fb01 f202 	mul.w	r2, r1, r2
 800a0fe:	1a9b      	subs	r3, r3, r2
 800a100:	1ac3      	subs	r3, r0, r3
 800a102:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a104:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	429a      	cmp	r2, r3
 800a10a:	d901      	bls.n	800a110 <f_read+0x260>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	699b      	ldr	r3, [r3, #24]
 800a11a:	697a      	ldr	r2, [r7, #20]
 800a11c:	8992      	ldrh	r2, [r2, #12]
 800a11e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a122:	fb00 f202 	mul.w	r2, r0, r2
 800a126:	1a9b      	subs	r3, r3, r2
 800a128:	440b      	add	r3, r1
 800a12a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a12c:	4619      	mov	r1, r3
 800a12e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a130:	f7fd fbf9 	bl	8007926 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a134:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a138:	4413      	add	r3, r2
 800a13a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	699a      	ldr	r2, [r3, #24]
 800a140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a142:	441a      	add	r2, r3
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	619a      	str	r2, [r3, #24]
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a14e:	441a      	add	r2, r3
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	601a      	str	r2, [r3, #0]
 800a154:	687a      	ldr	r2, [r7, #4]
 800a156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a158:	1ad3      	subs	r3, r2, r3
 800a15a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	f47f aee1 	bne.w	8009f26 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a164:	2300      	movs	r3, #0
}
 800a166:	4618      	mov	r0, r3
 800a168:	3738      	adds	r7, #56	@ 0x38
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}

0800a16e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a16e:	b580      	push	{r7, lr}
 800a170:	b086      	sub	sp, #24
 800a172:	af00      	add	r7, sp, #0
 800a174:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f107 0208 	add.w	r2, r7, #8
 800a17c:	4611      	mov	r1, r2
 800a17e:	4618      	mov	r0, r3
 800a180:	f7ff fc52 	bl	8009a28 <validate>
 800a184:	4603      	mov	r3, r0
 800a186:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a188:	7dfb      	ldrb	r3, [r7, #23]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d168      	bne.n	800a260 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	7d1b      	ldrb	r3, [r3, #20]
 800a192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a196:	2b00      	cmp	r3, #0
 800a198:	d062      	beq.n	800a260 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	7d1b      	ldrb	r3, [r3, #20]
 800a19e:	b25b      	sxtb	r3, r3
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	da15      	bge.n	800a1d0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	7858      	ldrb	r0, [r3, #1]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6a1a      	ldr	r2, [r3, #32]
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	f7fd faf6 	bl	80077a4 <disk_write>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d001      	beq.n	800a1c2 <f_sync+0x54>
 800a1be:	2301      	movs	r3, #1
 800a1c0:	e04f      	b.n	800a262 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	7d1b      	ldrb	r3, [r3, #20]
 800a1c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1ca:	b2da      	uxtb	r2, r3
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a1d0:	f7fd fa28 	bl	8007624 <get_fattime>
 800a1d4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a1d6:	68ba      	ldr	r2, [r7, #8]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1dc:	4619      	mov	r1, r3
 800a1de:	4610      	mov	r0, r2
 800a1e0:	f7fd fdd0 	bl	8007d84 <move_window>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a1e8:	7dfb      	ldrb	r3, [r7, #23]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d138      	bne.n	800a260 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1f2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	330b      	adds	r3, #11
 800a1f8:	781a      	ldrb	r2, [r3, #0]
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	330b      	adds	r3, #11
 800a1fe:	f042 0220 	orr.w	r2, r2, #32
 800a202:	b2d2      	uxtb	r2, r2
 800a204:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6818      	ldr	r0, [r3, #0]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	689b      	ldr	r3, [r3, #8]
 800a20e:	461a      	mov	r2, r3
 800a210:	68f9      	ldr	r1, [r7, #12]
 800a212:	f7fe fb5b 	bl	80088cc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f103 021c 	add.w	r2, r3, #28
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	68db      	ldr	r3, [r3, #12]
 800a220:	4619      	mov	r1, r3
 800a222:	4610      	mov	r0, r2
 800a224:	f7fd fb53 	bl	80078ce <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	3316      	adds	r3, #22
 800a22c:	6939      	ldr	r1, [r7, #16]
 800a22e:	4618      	mov	r0, r3
 800a230:	f7fd fb4d 	bl	80078ce <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	3312      	adds	r3, #18
 800a238:	2100      	movs	r1, #0
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7fd fb2c 	bl	8007898 <st_word>
					fs->wflag = 1;
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	2201      	movs	r2, #1
 800a244:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	4618      	mov	r0, r3
 800a24a:	f7fd fdc9 	bl	8007de0 <sync_fs>
 800a24e:	4603      	mov	r3, r0
 800a250:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	7d1b      	ldrb	r3, [r3, #20]
 800a256:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a25a:	b2da      	uxtb	r2, r3
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a260:	7dfb      	ldrb	r3, [r7, #23]
}
 800a262:	4618      	mov	r0, r3
 800a264:	3718      	adds	r7, #24
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}

0800a26a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a26a:	b580      	push	{r7, lr}
 800a26c:	b084      	sub	sp, #16
 800a26e:	af00      	add	r7, sp, #0
 800a270:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f7ff ff7b 	bl	800a16e <f_sync>
 800a278:	4603      	mov	r3, r0
 800a27a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a27c:	7bfb      	ldrb	r3, [r7, #15]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d118      	bne.n	800a2b4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f107 0208 	add.w	r2, r7, #8
 800a288:	4611      	mov	r1, r2
 800a28a:	4618      	mov	r0, r3
 800a28c:	f7ff fbcc 	bl	8009a28 <validate>
 800a290:	4603      	mov	r3, r0
 800a292:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a294:	7bfb      	ldrb	r3, [r7, #15]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d10c      	bne.n	800a2b4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	691b      	ldr	r3, [r3, #16]
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f7fd fccc 	bl	8007c3c <dec_lock>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a2a8:	7bfb      	ldrb	r3, [r7, #15]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d102      	bne.n	800a2b4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a2b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3710      	adds	r7, #16
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
	...

0800a2c0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b087      	sub	sp, #28
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	60f8      	str	r0, [r7, #12]
 800a2c8:	60b9      	str	r1, [r7, #8]
 800a2ca:	4613      	mov	r3, r2
 800a2cc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a2d6:	4b1f      	ldr	r3, [pc, #124]	@ (800a354 <FATFS_LinkDriverEx+0x94>)
 800a2d8:	7a5b      	ldrb	r3, [r3, #9]
 800a2da:	b2db      	uxtb	r3, r3
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d131      	bne.n	800a344 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a2e0:	4b1c      	ldr	r3, [pc, #112]	@ (800a354 <FATFS_LinkDriverEx+0x94>)
 800a2e2:	7a5b      	ldrb	r3, [r3, #9]
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	4b1a      	ldr	r3, [pc, #104]	@ (800a354 <FATFS_LinkDriverEx+0x94>)
 800a2ea:	2100      	movs	r1, #0
 800a2ec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a2ee:	4b19      	ldr	r3, [pc, #100]	@ (800a354 <FATFS_LinkDriverEx+0x94>)
 800a2f0:	7a5b      	ldrb	r3, [r3, #9]
 800a2f2:	b2db      	uxtb	r3, r3
 800a2f4:	4a17      	ldr	r2, [pc, #92]	@ (800a354 <FATFS_LinkDriverEx+0x94>)
 800a2f6:	009b      	lsls	r3, r3, #2
 800a2f8:	4413      	add	r3, r2
 800a2fa:	68fa      	ldr	r2, [r7, #12]
 800a2fc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a2fe:	4b15      	ldr	r3, [pc, #84]	@ (800a354 <FATFS_LinkDriverEx+0x94>)
 800a300:	7a5b      	ldrb	r3, [r3, #9]
 800a302:	b2db      	uxtb	r3, r3
 800a304:	461a      	mov	r2, r3
 800a306:	4b13      	ldr	r3, [pc, #76]	@ (800a354 <FATFS_LinkDriverEx+0x94>)
 800a308:	4413      	add	r3, r2
 800a30a:	79fa      	ldrb	r2, [r7, #7]
 800a30c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a30e:	4b11      	ldr	r3, [pc, #68]	@ (800a354 <FATFS_LinkDriverEx+0x94>)
 800a310:	7a5b      	ldrb	r3, [r3, #9]
 800a312:	b2db      	uxtb	r3, r3
 800a314:	1c5a      	adds	r2, r3, #1
 800a316:	b2d1      	uxtb	r1, r2
 800a318:	4a0e      	ldr	r2, [pc, #56]	@ (800a354 <FATFS_LinkDriverEx+0x94>)
 800a31a:	7251      	strb	r1, [r2, #9]
 800a31c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a31e:	7dbb      	ldrb	r3, [r7, #22]
 800a320:	3330      	adds	r3, #48	@ 0x30
 800a322:	b2da      	uxtb	r2, r3
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	3301      	adds	r3, #1
 800a32c:	223a      	movs	r2, #58	@ 0x3a
 800a32e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	3302      	adds	r3, #2
 800a334:	222f      	movs	r2, #47	@ 0x2f
 800a336:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	3303      	adds	r3, #3
 800a33c:	2200      	movs	r2, #0
 800a33e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a340:	2300      	movs	r3, #0
 800a342:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a344:	7dfb      	ldrb	r3, [r7, #23]
}
 800a346:	4618      	mov	r0, r3
 800a348:	371c      	adds	r7, #28
 800a34a:	46bd      	mov	sp, r7
 800a34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a350:	4770      	bx	lr
 800a352:	bf00      	nop
 800a354:	20001564 	.word	0x20001564

0800a358 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b082      	sub	sp, #8
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a362:	2200      	movs	r2, #0
 800a364:	6839      	ldr	r1, [r7, #0]
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f7ff ffaa 	bl	800a2c0 <FATFS_LinkDriverEx>
 800a36c:	4603      	mov	r3, r0
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3708      	adds	r7, #8
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
	...

0800a378 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	4603      	mov	r3, r0
 800a380:	6039      	str	r1, [r7, #0]
 800a382:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800a384:	88fb      	ldrh	r3, [r7, #6]
 800a386:	2b7f      	cmp	r3, #127	@ 0x7f
 800a388:	d802      	bhi.n	800a390 <ff_convert+0x18>
		c = chr;
 800a38a:	88fb      	ldrh	r3, [r7, #6]
 800a38c:	81fb      	strh	r3, [r7, #14]
 800a38e:	e025      	b.n	800a3dc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d00b      	beq.n	800a3ae <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800a396:	88fb      	ldrh	r3, [r7, #6]
 800a398:	2bff      	cmp	r3, #255	@ 0xff
 800a39a:	d805      	bhi.n	800a3a8 <ff_convert+0x30>
 800a39c:	88fb      	ldrh	r3, [r7, #6]
 800a39e:	3b80      	subs	r3, #128	@ 0x80
 800a3a0:	4a12      	ldr	r2, [pc, #72]	@ (800a3ec <ff_convert+0x74>)
 800a3a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3a6:	e000      	b.n	800a3aa <ff_convert+0x32>
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	81fb      	strh	r3, [r7, #14]
 800a3ac:	e016      	b.n	800a3dc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	81fb      	strh	r3, [r7, #14]
 800a3b2:	e009      	b.n	800a3c8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800a3b4:	89fb      	ldrh	r3, [r7, #14]
 800a3b6:	4a0d      	ldr	r2, [pc, #52]	@ (800a3ec <ff_convert+0x74>)
 800a3b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3bc:	88fa      	ldrh	r2, [r7, #6]
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d006      	beq.n	800a3d0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800a3c2:	89fb      	ldrh	r3, [r7, #14]
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	81fb      	strh	r3, [r7, #14]
 800a3c8:	89fb      	ldrh	r3, [r7, #14]
 800a3ca:	2b7f      	cmp	r3, #127	@ 0x7f
 800a3cc:	d9f2      	bls.n	800a3b4 <ff_convert+0x3c>
 800a3ce:	e000      	b.n	800a3d2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800a3d0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800a3d2:	89fb      	ldrh	r3, [r7, #14]
 800a3d4:	3380      	adds	r3, #128	@ 0x80
 800a3d6:	b29b      	uxth	r3, r3
 800a3d8:	b2db      	uxtb	r3, r3
 800a3da:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800a3dc:	89fb      	ldrh	r3, [r7, #14]
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3714      	adds	r7, #20
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr
 800a3ea:	bf00      	nop
 800a3ec:	0800b894 	.word	0x0800b894

0800a3f0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b087      	sub	sp, #28
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800a3fa:	88fb      	ldrh	r3, [r7, #6]
 800a3fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a400:	d201      	bcs.n	800a406 <ff_wtoupper+0x16>
 800a402:	4b3e      	ldr	r3, [pc, #248]	@ (800a4fc <ff_wtoupper+0x10c>)
 800a404:	e000      	b.n	800a408 <ff_wtoupper+0x18>
 800a406:	4b3e      	ldr	r3, [pc, #248]	@ (800a500 <ff_wtoupper+0x110>)
 800a408:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	1c9a      	adds	r2, r3, #2
 800a40e:	617a      	str	r2, [r7, #20]
 800a410:	881b      	ldrh	r3, [r3, #0]
 800a412:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800a414:	8a7b      	ldrh	r3, [r7, #18]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d068      	beq.n	800a4ec <ff_wtoupper+0xfc>
 800a41a:	88fa      	ldrh	r2, [r7, #6]
 800a41c:	8a7b      	ldrh	r3, [r7, #18]
 800a41e:	429a      	cmp	r2, r3
 800a420:	d364      	bcc.n	800a4ec <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	1c9a      	adds	r2, r3, #2
 800a426:	617a      	str	r2, [r7, #20]
 800a428:	881b      	ldrh	r3, [r3, #0]
 800a42a:	823b      	strh	r3, [r7, #16]
 800a42c:	8a3b      	ldrh	r3, [r7, #16]
 800a42e:	0a1b      	lsrs	r3, r3, #8
 800a430:	81fb      	strh	r3, [r7, #14]
 800a432:	8a3b      	ldrh	r3, [r7, #16]
 800a434:	b2db      	uxtb	r3, r3
 800a436:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800a438:	88fa      	ldrh	r2, [r7, #6]
 800a43a:	8a79      	ldrh	r1, [r7, #18]
 800a43c:	8a3b      	ldrh	r3, [r7, #16]
 800a43e:	440b      	add	r3, r1
 800a440:	429a      	cmp	r2, r3
 800a442:	da49      	bge.n	800a4d8 <ff_wtoupper+0xe8>
			switch (cmd) {
 800a444:	89fb      	ldrh	r3, [r7, #14]
 800a446:	2b08      	cmp	r3, #8
 800a448:	d84f      	bhi.n	800a4ea <ff_wtoupper+0xfa>
 800a44a:	a201      	add	r2, pc, #4	@ (adr r2, 800a450 <ff_wtoupper+0x60>)
 800a44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a450:	0800a475 	.word	0x0800a475
 800a454:	0800a487 	.word	0x0800a487
 800a458:	0800a49d 	.word	0x0800a49d
 800a45c:	0800a4a5 	.word	0x0800a4a5
 800a460:	0800a4ad 	.word	0x0800a4ad
 800a464:	0800a4b5 	.word	0x0800a4b5
 800a468:	0800a4bd 	.word	0x0800a4bd
 800a46c:	0800a4c5 	.word	0x0800a4c5
 800a470:	0800a4cd 	.word	0x0800a4cd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800a474:	88fa      	ldrh	r2, [r7, #6]
 800a476:	8a7b      	ldrh	r3, [r7, #18]
 800a478:	1ad3      	subs	r3, r2, r3
 800a47a:	005b      	lsls	r3, r3, #1
 800a47c:	697a      	ldr	r2, [r7, #20]
 800a47e:	4413      	add	r3, r2
 800a480:	881b      	ldrh	r3, [r3, #0]
 800a482:	80fb      	strh	r3, [r7, #6]
 800a484:	e027      	b.n	800a4d6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800a486:	88fa      	ldrh	r2, [r7, #6]
 800a488:	8a7b      	ldrh	r3, [r7, #18]
 800a48a:	1ad3      	subs	r3, r2, r3
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	f003 0301 	and.w	r3, r3, #1
 800a492:	b29b      	uxth	r3, r3
 800a494:	88fa      	ldrh	r2, [r7, #6]
 800a496:	1ad3      	subs	r3, r2, r3
 800a498:	80fb      	strh	r3, [r7, #6]
 800a49a:	e01c      	b.n	800a4d6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800a49c:	88fb      	ldrh	r3, [r7, #6]
 800a49e:	3b10      	subs	r3, #16
 800a4a0:	80fb      	strh	r3, [r7, #6]
 800a4a2:	e018      	b.n	800a4d6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800a4a4:	88fb      	ldrh	r3, [r7, #6]
 800a4a6:	3b20      	subs	r3, #32
 800a4a8:	80fb      	strh	r3, [r7, #6]
 800a4aa:	e014      	b.n	800a4d6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800a4ac:	88fb      	ldrh	r3, [r7, #6]
 800a4ae:	3b30      	subs	r3, #48	@ 0x30
 800a4b0:	80fb      	strh	r3, [r7, #6]
 800a4b2:	e010      	b.n	800a4d6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800a4b4:	88fb      	ldrh	r3, [r7, #6]
 800a4b6:	3b1a      	subs	r3, #26
 800a4b8:	80fb      	strh	r3, [r7, #6]
 800a4ba:	e00c      	b.n	800a4d6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800a4bc:	88fb      	ldrh	r3, [r7, #6]
 800a4be:	3308      	adds	r3, #8
 800a4c0:	80fb      	strh	r3, [r7, #6]
 800a4c2:	e008      	b.n	800a4d6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800a4c4:	88fb      	ldrh	r3, [r7, #6]
 800a4c6:	3b50      	subs	r3, #80	@ 0x50
 800a4c8:	80fb      	strh	r3, [r7, #6]
 800a4ca:	e004      	b.n	800a4d6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800a4cc:	88fb      	ldrh	r3, [r7, #6]
 800a4ce:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800a4d2:	80fb      	strh	r3, [r7, #6]
 800a4d4:	bf00      	nop
			}
			break;
 800a4d6:	e008      	b.n	800a4ea <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800a4d8:	89fb      	ldrh	r3, [r7, #14]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d195      	bne.n	800a40a <ff_wtoupper+0x1a>
 800a4de:	8a3b      	ldrh	r3, [r7, #16]
 800a4e0:	005b      	lsls	r3, r3, #1
 800a4e2:	697a      	ldr	r2, [r7, #20]
 800a4e4:	4413      	add	r3, r2
 800a4e6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800a4e8:	e78f      	b.n	800a40a <ff_wtoupper+0x1a>
			break;
 800a4ea:	bf00      	nop
	}

	return chr;
 800a4ec:	88fb      	ldrh	r3, [r7, #6]
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	371c      	adds	r7, #28
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	0800b994 	.word	0x0800b994
 800a500:	0800bb88 	.word	0x0800bb88

0800a504 <memset>:
 800a504:	4402      	add	r2, r0
 800a506:	4603      	mov	r3, r0
 800a508:	4293      	cmp	r3, r2
 800a50a:	d100      	bne.n	800a50e <memset+0xa>
 800a50c:	4770      	bx	lr
 800a50e:	f803 1b01 	strb.w	r1, [r3], #1
 800a512:	e7f9      	b.n	800a508 <memset+0x4>

0800a514 <__libc_init_array>:
 800a514:	b570      	push	{r4, r5, r6, lr}
 800a516:	4d0d      	ldr	r5, [pc, #52]	@ (800a54c <__libc_init_array+0x38>)
 800a518:	4c0d      	ldr	r4, [pc, #52]	@ (800a550 <__libc_init_array+0x3c>)
 800a51a:	1b64      	subs	r4, r4, r5
 800a51c:	10a4      	asrs	r4, r4, #2
 800a51e:	2600      	movs	r6, #0
 800a520:	42a6      	cmp	r6, r4
 800a522:	d109      	bne.n	800a538 <__libc_init_array+0x24>
 800a524:	4d0b      	ldr	r5, [pc, #44]	@ (800a554 <__libc_init_array+0x40>)
 800a526:	4c0c      	ldr	r4, [pc, #48]	@ (800a558 <__libc_init_array+0x44>)
 800a528:	f000 f818 	bl	800a55c <_init>
 800a52c:	1b64      	subs	r4, r4, r5
 800a52e:	10a4      	asrs	r4, r4, #2
 800a530:	2600      	movs	r6, #0
 800a532:	42a6      	cmp	r6, r4
 800a534:	d105      	bne.n	800a542 <__libc_init_array+0x2e>
 800a536:	bd70      	pop	{r4, r5, r6, pc}
 800a538:	f855 3b04 	ldr.w	r3, [r5], #4
 800a53c:	4798      	blx	r3
 800a53e:	3601      	adds	r6, #1
 800a540:	e7ee      	b.n	800a520 <__libc_init_array+0xc>
 800a542:	f855 3b04 	ldr.w	r3, [r5], #4
 800a546:	4798      	blx	r3
 800a548:	3601      	adds	r6, #1
 800a54a:	e7f2      	b.n	800a532 <__libc_init_array+0x1e>
 800a54c:	0800bc4c 	.word	0x0800bc4c
 800a550:	0800bc4c 	.word	0x0800bc4c
 800a554:	0800bc4c 	.word	0x0800bc4c
 800a558:	0800bc50 	.word	0x0800bc50

0800a55c <_init>:
 800a55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a55e:	bf00      	nop
 800a560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a562:	bc08      	pop	{r3}
 800a564:	469e      	mov	lr, r3
 800a566:	4770      	bx	lr

0800a568 <_fini>:
 800a568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a56a:	bf00      	nop
 800a56c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a56e:	bc08      	pop	{r3}
 800a570:	469e      	mov	lr, r3
 800a572:	4770      	bx	lr
