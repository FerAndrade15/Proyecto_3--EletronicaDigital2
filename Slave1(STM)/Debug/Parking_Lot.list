
Parking_Lot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078ec  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08007ab8  08007ab8  00008ab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b48  08007b48  00009070  2**0
                  CONTENTS
  4 .ARM          00000008  08007b48  08007b48  00008b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b50  08007b50  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b50  08007b50  00008b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007b54  08007b54  00008b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08007b58  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000be8  20000070  08007bc8  00009070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c58  08007bc8  00009c58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001104b  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023b2  00000000  00000000  0001a0eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  0001c4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ca9  00000000  00000000  0001d490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002269a  00000000  00000000  0001e139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013fc7  00000000  00000000  000407d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3d92  00000000  00000000  0005479a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012852c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004aa0  00000000  00000000  00128570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0012d010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000070 	.word	0x20000070
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007a9c 	.word	0x08007a9c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000074 	.word	0x20000074
 8000204:	08007a9c 	.word	0x08007a9c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2f>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae8:	bf24      	itt	cs
 8000aea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000af2:	d90d      	bls.n	8000b10 <__aeabi_d2f+0x30>
 8000af4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000afc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b00:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b08:	bf08      	it	eq
 8000b0a:	f020 0001 	biceq.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b14:	d121      	bne.n	8000b5a <__aeabi_d2f+0x7a>
 8000b16:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b1a:	bfbc      	itt	lt
 8000b1c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	4770      	bxlt	lr
 8000b22:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2a:	f1c2 0218 	rsb	r2, r2, #24
 8000b2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b36:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	f040 0001 	orrne.w	r0, r0, #1
 8000b40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b4c:	ea40 000c 	orr.w	r0, r0, ip
 8000b50:	fa23 f302 	lsr.w	r3, r3, r2
 8000b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b58:	e7cc      	b.n	8000af4 <__aeabi_d2f+0x14>
 8000b5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5e:	d107      	bne.n	8000b70 <__aeabi_d2f+0x90>
 8000b60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b64:	bf1e      	ittt	ne
 8000b66:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b6a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b6e:	4770      	bxne	lr
 8000b70:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b74:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b78:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <__aeabi_uldivmod>:
 8000b80:	b953      	cbnz	r3, 8000b98 <__aeabi_uldivmod+0x18>
 8000b82:	b94a      	cbnz	r2, 8000b98 <__aeabi_uldivmod+0x18>
 8000b84:	2900      	cmp	r1, #0
 8000b86:	bf08      	it	eq
 8000b88:	2800      	cmpeq	r0, #0
 8000b8a:	bf1c      	itt	ne
 8000b8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b90:	f04f 30ff 	movne.w	r0, #4294967295
 8000b94:	f000 b96a 	b.w	8000e6c <__aeabi_idiv0>
 8000b98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba0:	f000 f806 	bl	8000bb0 <__udivmoddi4>
 8000ba4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bac:	b004      	add	sp, #16
 8000bae:	4770      	bx	lr

08000bb0 <__udivmoddi4>:
 8000bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb4:	9d08      	ldr	r5, [sp, #32]
 8000bb6:	460c      	mov	r4, r1
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d14e      	bne.n	8000c5a <__udivmoddi4+0xaa>
 8000bbc:	4694      	mov	ip, r2
 8000bbe:	458c      	cmp	ip, r1
 8000bc0:	4686      	mov	lr, r0
 8000bc2:	fab2 f282 	clz	r2, r2
 8000bc6:	d962      	bls.n	8000c8e <__udivmoddi4+0xde>
 8000bc8:	b14a      	cbz	r2, 8000bde <__udivmoddi4+0x2e>
 8000bca:	f1c2 0320 	rsb	r3, r2, #32
 8000bce:	4091      	lsls	r1, r2
 8000bd0:	fa20 f303 	lsr.w	r3, r0, r3
 8000bd4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd8:	4319      	orrs	r1, r3
 8000bda:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000be2:	fa1f f68c 	uxth.w	r6, ip
 8000be6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bee:	fb07 1114 	mls	r1, r7, r4, r1
 8000bf2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf6:	fb04 f106 	mul.w	r1, r4, r6
 8000bfa:	4299      	cmp	r1, r3
 8000bfc:	d90a      	bls.n	8000c14 <__udivmoddi4+0x64>
 8000bfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000c02:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c06:	f080 8112 	bcs.w	8000e2e <__udivmoddi4+0x27e>
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	f240 810f 	bls.w	8000e2e <__udivmoddi4+0x27e>
 8000c10:	3c02      	subs	r4, #2
 8000c12:	4463      	add	r3, ip
 8000c14:	1a59      	subs	r1, r3, r1
 8000c16:	fa1f f38e 	uxth.w	r3, lr
 8000c1a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c1e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c22:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c26:	fb00 f606 	mul.w	r6, r0, r6
 8000c2a:	429e      	cmp	r6, r3
 8000c2c:	d90a      	bls.n	8000c44 <__udivmoddi4+0x94>
 8000c2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c32:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c36:	f080 80fc 	bcs.w	8000e32 <__udivmoddi4+0x282>
 8000c3a:	429e      	cmp	r6, r3
 8000c3c:	f240 80f9 	bls.w	8000e32 <__udivmoddi4+0x282>
 8000c40:	4463      	add	r3, ip
 8000c42:	3802      	subs	r0, #2
 8000c44:	1b9b      	subs	r3, r3, r6
 8000c46:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	b11d      	cbz	r5, 8000c56 <__udivmoddi4+0xa6>
 8000c4e:	40d3      	lsrs	r3, r2
 8000c50:	2200      	movs	r2, #0
 8000c52:	e9c5 3200 	strd	r3, r2, [r5]
 8000c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d905      	bls.n	8000c6a <__udivmoddi4+0xba>
 8000c5e:	b10d      	cbz	r5, 8000c64 <__udivmoddi4+0xb4>
 8000c60:	e9c5 0100 	strd	r0, r1, [r5]
 8000c64:	2100      	movs	r1, #0
 8000c66:	4608      	mov	r0, r1
 8000c68:	e7f5      	b.n	8000c56 <__udivmoddi4+0xa6>
 8000c6a:	fab3 f183 	clz	r1, r3
 8000c6e:	2900      	cmp	r1, #0
 8000c70:	d146      	bne.n	8000d00 <__udivmoddi4+0x150>
 8000c72:	42a3      	cmp	r3, r4
 8000c74:	d302      	bcc.n	8000c7c <__udivmoddi4+0xcc>
 8000c76:	4290      	cmp	r0, r2
 8000c78:	f0c0 80f0 	bcc.w	8000e5c <__udivmoddi4+0x2ac>
 8000c7c:	1a86      	subs	r6, r0, r2
 8000c7e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c82:	2001      	movs	r0, #1
 8000c84:	2d00      	cmp	r5, #0
 8000c86:	d0e6      	beq.n	8000c56 <__udivmoddi4+0xa6>
 8000c88:	e9c5 6300 	strd	r6, r3, [r5]
 8000c8c:	e7e3      	b.n	8000c56 <__udivmoddi4+0xa6>
 8000c8e:	2a00      	cmp	r2, #0
 8000c90:	f040 8090 	bne.w	8000db4 <__udivmoddi4+0x204>
 8000c94:	eba1 040c 	sub.w	r4, r1, ip
 8000c98:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c9c:	fa1f f78c 	uxth.w	r7, ip
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ca6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000caa:	fb08 4416 	mls	r4, r8, r6, r4
 8000cae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cb2:	fb07 f006 	mul.w	r0, r7, r6
 8000cb6:	4298      	cmp	r0, r3
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x11c>
 8000cba:	eb1c 0303 	adds.w	r3, ip, r3
 8000cbe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x11a>
 8000cc4:	4298      	cmp	r0, r3
 8000cc6:	f200 80cd 	bhi.w	8000e64 <__udivmoddi4+0x2b4>
 8000cca:	4626      	mov	r6, r4
 8000ccc:	1a1c      	subs	r4, r3, r0
 8000cce:	fa1f f38e 	uxth.w	r3, lr
 8000cd2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cd6:	fb08 4410 	mls	r4, r8, r0, r4
 8000cda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cde:	fb00 f707 	mul.w	r7, r0, r7
 8000ce2:	429f      	cmp	r7, r3
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x148>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x146>
 8000cf0:	429f      	cmp	r7, r3
 8000cf2:	f200 80b0 	bhi.w	8000e56 <__udivmoddi4+0x2a6>
 8000cf6:	4620      	mov	r0, r4
 8000cf8:	1bdb      	subs	r3, r3, r7
 8000cfa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cfe:	e7a5      	b.n	8000c4c <__udivmoddi4+0x9c>
 8000d00:	f1c1 0620 	rsb	r6, r1, #32
 8000d04:	408b      	lsls	r3, r1
 8000d06:	fa22 f706 	lsr.w	r7, r2, r6
 8000d0a:	431f      	orrs	r7, r3
 8000d0c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d10:	fa04 f301 	lsl.w	r3, r4, r1
 8000d14:	ea43 030c 	orr.w	r3, r3, ip
 8000d18:	40f4      	lsrs	r4, r6
 8000d1a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d1e:	0c38      	lsrs	r0, r7, #16
 8000d20:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d24:	fbb4 fef0 	udiv	lr, r4, r0
 8000d28:	fa1f fc87 	uxth.w	ip, r7
 8000d2c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d30:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d34:	fb0e f90c 	mul.w	r9, lr, ip
 8000d38:	45a1      	cmp	r9, r4
 8000d3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d3e:	d90a      	bls.n	8000d56 <__udivmoddi4+0x1a6>
 8000d40:	193c      	adds	r4, r7, r4
 8000d42:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d46:	f080 8084 	bcs.w	8000e52 <__udivmoddi4+0x2a2>
 8000d4a:	45a1      	cmp	r9, r4
 8000d4c:	f240 8081 	bls.w	8000e52 <__udivmoddi4+0x2a2>
 8000d50:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d54:	443c      	add	r4, r7
 8000d56:	eba4 0409 	sub.w	r4, r4, r9
 8000d5a:	fa1f f983 	uxth.w	r9, r3
 8000d5e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d62:	fb00 4413 	mls	r4, r0, r3, r4
 8000d66:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d6e:	45a4      	cmp	ip, r4
 8000d70:	d907      	bls.n	8000d82 <__udivmoddi4+0x1d2>
 8000d72:	193c      	adds	r4, r7, r4
 8000d74:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d78:	d267      	bcs.n	8000e4a <__udivmoddi4+0x29a>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	d965      	bls.n	8000e4a <__udivmoddi4+0x29a>
 8000d7e:	3b02      	subs	r3, #2
 8000d80:	443c      	add	r4, r7
 8000d82:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d86:	fba0 9302 	umull	r9, r3, r0, r2
 8000d8a:	eba4 040c 	sub.w	r4, r4, ip
 8000d8e:	429c      	cmp	r4, r3
 8000d90:	46ce      	mov	lr, r9
 8000d92:	469c      	mov	ip, r3
 8000d94:	d351      	bcc.n	8000e3a <__udivmoddi4+0x28a>
 8000d96:	d04e      	beq.n	8000e36 <__udivmoddi4+0x286>
 8000d98:	b155      	cbz	r5, 8000db0 <__udivmoddi4+0x200>
 8000d9a:	ebb8 030e 	subs.w	r3, r8, lr
 8000d9e:	eb64 040c 	sbc.w	r4, r4, ip
 8000da2:	fa04 f606 	lsl.w	r6, r4, r6
 8000da6:	40cb      	lsrs	r3, r1
 8000da8:	431e      	orrs	r6, r3
 8000daa:	40cc      	lsrs	r4, r1
 8000dac:	e9c5 6400 	strd	r6, r4, [r5]
 8000db0:	2100      	movs	r1, #0
 8000db2:	e750      	b.n	8000c56 <__udivmoddi4+0xa6>
 8000db4:	f1c2 0320 	rsb	r3, r2, #32
 8000db8:	fa20 f103 	lsr.w	r1, r0, r3
 8000dbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc0:	fa24 f303 	lsr.w	r3, r4, r3
 8000dc4:	4094      	lsls	r4, r2
 8000dc6:	430c      	orrs	r4, r1
 8000dc8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dcc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dd0:	fa1f f78c 	uxth.w	r7, ip
 8000dd4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd8:	fb08 3110 	mls	r1, r8, r0, r3
 8000ddc:	0c23      	lsrs	r3, r4, #16
 8000dde:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de2:	fb00 f107 	mul.w	r1, r0, r7
 8000de6:	4299      	cmp	r1, r3
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x24c>
 8000dea:	eb1c 0303 	adds.w	r3, ip, r3
 8000dee:	f100 36ff 	add.w	r6, r0, #4294967295
 8000df2:	d22c      	bcs.n	8000e4e <__udivmoddi4+0x29e>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	d92a      	bls.n	8000e4e <__udivmoddi4+0x29e>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	4463      	add	r3, ip
 8000dfc:	1a5b      	subs	r3, r3, r1
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e04:	fb08 3311 	mls	r3, r8, r1, r3
 8000e08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e0c:	fb01 f307 	mul.w	r3, r1, r7
 8000e10:	42a3      	cmp	r3, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x276>
 8000e14:	eb1c 0404 	adds.w	r4, ip, r4
 8000e18:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e1c:	d213      	bcs.n	8000e46 <__udivmoddi4+0x296>
 8000e1e:	42a3      	cmp	r3, r4
 8000e20:	d911      	bls.n	8000e46 <__udivmoddi4+0x296>
 8000e22:	3902      	subs	r1, #2
 8000e24:	4464      	add	r4, ip
 8000e26:	1ae4      	subs	r4, r4, r3
 8000e28:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e2c:	e739      	b.n	8000ca2 <__udivmoddi4+0xf2>
 8000e2e:	4604      	mov	r4, r0
 8000e30:	e6f0      	b.n	8000c14 <__udivmoddi4+0x64>
 8000e32:	4608      	mov	r0, r1
 8000e34:	e706      	b.n	8000c44 <__udivmoddi4+0x94>
 8000e36:	45c8      	cmp	r8, r9
 8000e38:	d2ae      	bcs.n	8000d98 <__udivmoddi4+0x1e8>
 8000e3a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e3e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e42:	3801      	subs	r0, #1
 8000e44:	e7a8      	b.n	8000d98 <__udivmoddi4+0x1e8>
 8000e46:	4631      	mov	r1, r6
 8000e48:	e7ed      	b.n	8000e26 <__udivmoddi4+0x276>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	e799      	b.n	8000d82 <__udivmoddi4+0x1d2>
 8000e4e:	4630      	mov	r0, r6
 8000e50:	e7d4      	b.n	8000dfc <__udivmoddi4+0x24c>
 8000e52:	46d6      	mov	lr, sl
 8000e54:	e77f      	b.n	8000d56 <__udivmoddi4+0x1a6>
 8000e56:	4463      	add	r3, ip
 8000e58:	3802      	subs	r0, #2
 8000e5a:	e74d      	b.n	8000cf8 <__udivmoddi4+0x148>
 8000e5c:	4606      	mov	r6, r0
 8000e5e:	4623      	mov	r3, r4
 8000e60:	4608      	mov	r0, r1
 8000e62:	e70f      	b.n	8000c84 <__udivmoddi4+0xd4>
 8000e64:	3e02      	subs	r6, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	e730      	b.n	8000ccc <__udivmoddi4+0x11c>
 8000e6a:	bf00      	nop

08000e6c <__aeabi_idiv0>:
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <setPixelColor>:

extern float brilloled;


//carga un RGB_Color deseado al led desado
void setPixelColor(uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
 8000e70:	b490      	push	{r4, r7}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4604      	mov	r4, r0
 8000e78:	4608      	mov	r0, r1
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4623      	mov	r3, r4
 8000e80:	80fb      	strh	r3, [r7, #6]
 8000e82:	4603      	mov	r3, r0
 8000e84:	717b      	strb	r3, [r7, #5]
 8000e86:	460b      	mov	r3, r1
 8000e88:	713b      	strb	r3, [r7, #4]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	70fb      	strb	r3, [r7, #3]
	LED_Data[n][0] = n;
 8000e8e:	88fb      	ldrh	r3, [r7, #6]
 8000e90:	88fa      	ldrh	r2, [r7, #6]
 8000e92:	b2d1      	uxtb	r1, r2
 8000e94:	4a0c      	ldr	r2, [pc, #48]	@ (8000ec8 <setPixelColor+0x58>)
 8000e96:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[n][1] = g;
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec8 <setPixelColor+0x58>)
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	4413      	add	r3, r2
 8000ea2:	793a      	ldrb	r2, [r7, #4]
 8000ea4:	705a      	strb	r2, [r3, #1]
	LED_Data[n][2] = r;
 8000ea6:	88fb      	ldrh	r3, [r7, #6]
 8000ea8:	4a07      	ldr	r2, [pc, #28]	@ (8000ec8 <setPixelColor+0x58>)
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4413      	add	r3, r2
 8000eae:	797a      	ldrb	r2, [r7, #5]
 8000eb0:	709a      	strb	r2, [r3, #2]
	LED_Data[n][3] = b;
 8000eb2:	88fb      	ldrh	r3, [r7, #6]
 8000eb4:	4a04      	ldr	r2, [pc, #16]	@ (8000ec8 <setPixelColor+0x58>)
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	4413      	add	r3, r2
 8000eba:	78fa      	ldrb	r2, [r7, #3]
 8000ebc:	70da      	strb	r2, [r3, #3]
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc90      	pop	{r4, r7}
 8000ec6:	4770      	bx	lr
 8000ec8:	2000008c 	.word	0x2000008c

08000ecc <setBrightness>:

void setBrightness(uint8_t b) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
	if(b>100)
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b64      	cmp	r3, #100	@ 0x64
 8000eda:	d901      	bls.n	8000ee0 <setBrightness+0x14>
		b = 100;
 8000edc:	2364      	movs	r3, #100	@ 0x64
 8000ede:	71fb      	strb	r3, [r7, #7]
	brilloled = b;
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	ee07 3a90 	vmov	s15, r3
 8000ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000eea:	4b1e      	ldr	r3, [pc, #120]	@ (8000f64 <setBrightness+0x98>)
 8000eec:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < numPixels; i++) {
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	e02d      	b.n	8000f52 <setBrightness+0x86>
		LED_Mod[i][0] = LED_Data[i][0];
 8000ef6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f68 <setBrightness+0x9c>)
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8000efe:	4a1b      	ldr	r2, [pc, #108]	@ (8000f6c <setBrightness+0xa0>)
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (uint8_t j = 1; j < 4; j++) {
 8000f06:	2301      	movs	r3, #1
 8000f08:	72fb      	strb	r3, [r7, #11]
 8000f0a:	e01c      	b.n	8000f46 <setBrightness+0x7a>
			// Aplicar corrección gamma y brillo
			int8_t brill = Gamma_correccion(LED_Data[i][j], brilloled);
 8000f0c:	7afb      	ldrb	r3, [r7, #11]
 8000f0e:	4916      	ldr	r1, [pc, #88]	@ (8000f68 <setBrightness+0x9c>)
 8000f10:	68fa      	ldr	r2, [r7, #12]
 8000f12:	0092      	lsls	r2, r2, #2
 8000f14:	440a      	add	r2, r1
 8000f16:	4413      	add	r3, r2
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	4a12      	ldr	r2, [pc, #72]	@ (8000f64 <setBrightness+0x98>)
 8000f1c:	edd2 7a00 	vldr	s15, [r2]
 8000f20:	eeb0 0a67 	vmov.f32	s0, s15
 8000f24:	4618      	mov	r0, r3
 8000f26:	f000 f8ef 	bl	8001108 <Gamma_correccion>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	72bb      	strb	r3, [r7, #10]
			LED_Mod[i][j] = brill;
 8000f2e:	7afb      	ldrb	r3, [r7, #11]
 8000f30:	7ab8      	ldrb	r0, [r7, #10]
 8000f32:	490e      	ldr	r1, [pc, #56]	@ (8000f6c <setBrightness+0xa0>)
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	0092      	lsls	r2, r2, #2
 8000f38:	440a      	add	r2, r1
 8000f3a:	4413      	add	r3, r2
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 1; j < 4; j++) {
 8000f40:	7afb      	ldrb	r3, [r7, #11]
 8000f42:	3301      	adds	r3, #1
 8000f44:	72fb      	strb	r3, [r7, #11]
 8000f46:	7afb      	ldrb	r3, [r7, #11]
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	d9df      	bls.n	8000f0c <setBrightness+0x40>
	for (int i = 0; i < numPixels; i++) {
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2b27      	cmp	r3, #39	@ 0x27
 8000f56:	ddce      	ble.n	8000ef6 <setBrightness+0x2a>
		}
	}
}
 8000f58:	bf00      	nop
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000b00 	.word	0x20000b00
 8000f68:	2000008c 	.word	0x2000008c
 8000f6c:	2000012c 	.word	0x2000012c

08000f70 <pixelShow>:

void pixelShow(void) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b088      	sub	sp, #32
 8000f74:	af00      	add	r7, sp, #0
	uint32_t RGB_Color = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60bb      	str	r3, [r7, #8]
	uint32_t indx = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]

	for (int i = 0; i < numPixels; i++) {
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61bb      	str	r3, [r7, #24]
 8000f82:	e061      	b.n	8001048 <pixelShow+0xd8>
		LED_Mod[i][0] = LED_Data[i][0];
 8000f84:	4a44      	ldr	r2, [pc, #272]	@ (8001098 <pixelShow+0x128>)
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8000f8c:	4a43      	ldr	r2, [pc, #268]	@ (800109c <pixelShow+0x12c>)
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (uint8_t j = 1; j < 4; j++) {
 8000f94:	2301      	movs	r3, #1
 8000f96:	75fb      	strb	r3, [r7, #23]
 8000f98:	e01c      	b.n	8000fd4 <pixelShow+0x64>
			// Aplicar corrección gamma y brillo
			int8_t brill = Gamma_correccion(LED_Data[i][j], brilloled);
 8000f9a:	7dfb      	ldrb	r3, [r7, #23]
 8000f9c:	493e      	ldr	r1, [pc, #248]	@ (8001098 <pixelShow+0x128>)
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	0092      	lsls	r2, r2, #2
 8000fa2:	440a      	add	r2, r1
 8000fa4:	4413      	add	r3, r2
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	4a3d      	ldr	r2, [pc, #244]	@ (80010a0 <pixelShow+0x130>)
 8000faa:	edd2 7a00 	vldr	s15, [r2]
 8000fae:	eeb0 0a67 	vmov.f32	s0, s15
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 f8a8 	bl	8001108 <Gamma_correccion>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	71fb      	strb	r3, [r7, #7]
			LED_Mod[i][j] = brill;
 8000fbc:	7dfb      	ldrb	r3, [r7, #23]
 8000fbe:	79f8      	ldrb	r0, [r7, #7]
 8000fc0:	4936      	ldr	r1, [pc, #216]	@ (800109c <pixelShow+0x12c>)
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	0092      	lsls	r2, r2, #2
 8000fc6:	440a      	add	r2, r1
 8000fc8:	4413      	add	r3, r2
 8000fca:	4602      	mov	r2, r0
 8000fcc:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 1; j < 4; j++) {
 8000fce:	7dfb      	ldrb	r3, [r7, #23]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	75fb      	strb	r3, [r7, #23]
 8000fd4:	7dfb      	ldrb	r3, [r7, #23]
 8000fd6:	2b03      	cmp	r3, #3
 8000fd8:	d9df      	bls.n	8000f9a <pixelShow+0x2a>
		}
		RGB_Color = (((LED_Mod[i][1] << 16) | (LED_Mod[i][2] << 8)| (LED_Mod[i][3])));
 8000fda:	4a30      	ldr	r2, [pc, #192]	@ (800109c <pixelShow+0x12c>)
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	4413      	add	r3, r2
 8000fe2:	785b      	ldrb	r3, [r3, #1]
 8000fe4:	041a      	lsls	r2, r3, #16
 8000fe6:	492d      	ldr	r1, [pc, #180]	@ (800109c <pixelShow+0x12c>)
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	440b      	add	r3, r1
 8000fee:	789b      	ldrb	r3, [r3, #2]
 8000ff0:	021b      	lsls	r3, r3, #8
 8000ff2:	431a      	orrs	r2, r3
 8000ff4:	4929      	ldr	r1, [pc, #164]	@ (800109c <pixelShow+0x12c>)
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	78db      	ldrb	r3, [r3, #3]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	60bb      	str	r3, [r7, #8]

		for (int i = 23; i >= 0; i--) {
 8001002:	2317      	movs	r3, #23
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	e019      	b.n	800103c <pixelShow+0xcc>
			if (RGB_Color & (1 << i)) {
 8001008:	2201      	movs	r2, #1
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	461a      	mov	r2, r3
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	4013      	ands	r3, r2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d005      	beq.n	8001026 <pixelShow+0xb6>
				pwmData[indx] = CCR_1; // Poner 1
 800101a:	4a22      	ldr	r2, [pc, #136]	@ (80010a4 <pixelShow+0x134>)
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	2143      	movs	r1, #67	@ 0x43
 8001020:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001024:	e004      	b.n	8001030 <pixelShow+0xc0>
			}else
				pwmData[indx] = CCR_0; // Poner 0
 8001026:	4a1f      	ldr	r2, [pc, #124]	@ (80010a4 <pixelShow+0x134>)
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	2122      	movs	r1, #34	@ 0x22
 800102c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			indx++;
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	3301      	adds	r3, #1
 8001034:	61fb      	str	r3, [r7, #28]
		for (int i = 23; i >= 0; i--) {
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	3b01      	subs	r3, #1
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	2b00      	cmp	r3, #0
 8001040:	dae2      	bge.n	8001008 <pixelShow+0x98>
	for (int i = 0; i < numPixels; i++) {
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	3301      	adds	r3, #1
 8001046:	61bb      	str	r3, [r7, #24]
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	2b27      	cmp	r3, #39	@ 0x27
 800104c:	dd9a      	ble.n	8000f84 <pixelShow+0x14>
		}
	}
	for (int i = 0; i < 50; i++) {
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	e00a      	b.n	800106a <pixelShow+0xfa>
		pwmData[indx] = 0;
 8001054:	4a13      	ldr	r2, [pc, #76]	@ (80010a4 <pixelShow+0x134>)
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	2100      	movs	r1, #0
 800105a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3301      	adds	r3, #1
 8001062:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < 50; i++) {
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	3301      	adds	r3, #1
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2b31      	cmp	r3, #49	@ 0x31
 800106e:	ddf1      	ble.n	8001054 <pixelShow+0xe4>
	}
	HAL_TIM_PWM_Start_DMA(&neoPixel_timer, neoPixel_canal, (uint32_t*) pwmData, indx);
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	b29b      	uxth	r3, r3
 8001074:	4a0b      	ldr	r2, [pc, #44]	@ (80010a4 <pixelShow+0x134>)
 8001076:	2100      	movs	r1, #0
 8001078:	480b      	ldr	r0, [pc, #44]	@ (80010a8 <pixelShow+0x138>)
 800107a:	f004 fb2f 	bl	80056dc <HAL_TIM_PWM_Start_DMA>
	while(!datasentflag);
 800107e:	bf00      	nop
 8001080:	4b0a      	ldr	r3, [pc, #40]	@ (80010ac <pixelShow+0x13c>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d0fb      	beq.n	8001080 <pixelShow+0x110>
	datasentflag = 0;
 8001088:	4b08      	ldr	r3, [pc, #32]	@ (80010ac <pixelShow+0x13c>)
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
}
 800108e:	bf00      	nop
 8001090:	3720      	adds	r7, #32
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	2000008c 	.word	0x2000008c
 800109c:	2000012c 	.word	0x2000012c
 80010a0:	20000b00 	.word	0x20000b00
 80010a4:	200001cc 	.word	0x200001cc
 80010a8:	20000a08 	.word	0x20000a08
 80010ac:	200009b0 	.word	0x200009b0

080010b0 <pixelClear>:

void pixelClear(void) {
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < numPixels; i++) {
 80010b6:	2300      	movs	r3, #0
 80010b8:	71fb      	strb	r3, [r7, #7]
 80010ba:	e019      	b.n	80010f0 <pixelClear+0x40>
		LED_Data[i][0] = i;
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	4911      	ldr	r1, [pc, #68]	@ (8001104 <pixelClear+0x54>)
 80010c0:	79fa      	ldrb	r2, [r7, #7]
 80010c2:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
		LED_Data[i][1] = 0;
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	4a0e      	ldr	r2, [pc, #56]	@ (8001104 <pixelClear+0x54>)
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	4413      	add	r3, r2
 80010ce:	2200      	movs	r2, #0
 80010d0:	705a      	strb	r2, [r3, #1]
		LED_Data[i][2] = 0;
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001104 <pixelClear+0x54>)
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	4413      	add	r3, r2
 80010da:	2200      	movs	r2, #0
 80010dc:	709a      	strb	r2, [r3, #2]
		LED_Data[i][3] = 0;
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	4a08      	ldr	r2, [pc, #32]	@ (8001104 <pixelClear+0x54>)
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	4413      	add	r3, r2
 80010e6:	2200      	movs	r2, #0
 80010e8:	70da      	strb	r2, [r3, #3]
	for (uint8_t i = 0; i < numPixels; i++) {
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	3301      	adds	r3, #1
 80010ee:	71fb      	strb	r3, [r7, #7]
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	2b27      	cmp	r3, #39	@ 0x27
 80010f4:	d9e2      	bls.n	80010bc <pixelClear+0xc>
	}
}
 80010f6:	bf00      	nop
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	2000008c 	.word	0x2000008c

08001108 <Gamma_correccion>:

uint8_t Gamma_correccion(uint8_t c, float b) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	ed87 0a02 	vstr	s0, [r7, #8]
 8001114:	73fb      	strb	r3, [r7, #15]
// Limitar el valor de brillo a un rango de 0 a 100
	if (b > 100.0f)
 8001116:	edd7 7a02 	vldr	s15, [r7, #8]
 800111a:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8001200 <Gamma_correccion+0xf8>
 800111e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001126:	dd01      	ble.n	800112c <Gamma_correccion+0x24>
		b = 100.0f;
 8001128:	4b36      	ldr	r3, [pc, #216]	@ (8001204 <Gamma_correccion+0xfc>)
 800112a:	60bb      	str	r3, [r7, #8]
	if (b < 0.0f)
 800112c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001130:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001138:	d502      	bpl.n	8001140 <Gamma_correccion+0x38>
		b = 0.0f;
 800113a:	f04f 0300 	mov.w	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]

	// Normalizo el brillo al rango de 0.0 a 1.0
	float brillo_factor = b / 100.0f;
 8001140:	ed97 7a02 	vldr	s14, [r7, #8]
 8001144:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8001200 <Gamma_correccion+0xf8>
 8001148:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800114c:	edc7 7a06 	vstr	s15, [r7, #24]

	// aplica el facot
	float adjustedColor = c * brillo_factor;
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	ee07 3a90 	vmov	s15, r3
 8001156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800115a:	ed97 7a06 	vldr	s14, [r7, #24]
 800115e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001162:	edc7 7a05 	vstr	s15, [r7, #20]

	// formula de escalamiento gamma
	float gammaCorrectedColor = pow((adjustedColor / 255.0f), GAMMA) * 255.0f;
 8001166:	edd7 7a05 	vldr	s15, [r7, #20]
 800116a:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001208 <Gamma_correccion+0x100>
 800116e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001172:	ee16 0a90 	vmov	r0, s13
 8001176:	f7ff f9ab 	bl	80004d0 <__aeabi_f2d>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 80011f0 <Gamma_correccion+0xe8>
 8001182:	ec43 2b10 	vmov	d0, r2, r3
 8001186:	f005 fd2b 	bl	8006be0 <pow>
 800118a:	ec51 0b10 	vmov	r0, r1, d0
 800118e:	a31a      	add	r3, pc, #104	@ (adr r3, 80011f8 <Gamma_correccion+0xf0>)
 8001190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001194:	f7ff f9f4 	bl	8000580 <__aeabi_dmul>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4610      	mov	r0, r2
 800119e:	4619      	mov	r1, r3
 80011a0:	f7ff fc9e 	bl	8000ae0 <__aeabi_d2f>
 80011a4:	4603      	mov	r3, r0
 80011a6:	61fb      	str	r3, [r7, #28]

	//analiza que este dentro los limites
	if (gammaCorrectedColor > 255.0f)
 80011a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80011ac:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001208 <Gamma_correccion+0x100>
 80011b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b8:	dd01      	ble.n	80011be <Gamma_correccion+0xb6>
	gammaCorrectedColor = 255.0f;
 80011ba:	4b14      	ldr	r3, [pc, #80]	@ (800120c <Gamma_correccion+0x104>)
 80011bc:	61fb      	str	r3, [r7, #28]
	if (gammaCorrectedColor < 0.0f)
 80011be:	edd7 7a07 	vldr	s15, [r7, #28]
 80011c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ca:	d502      	bpl.n	80011d2 <Gamma_correccion+0xca>
	gammaCorrectedColor = 0.0f;
 80011cc:	f04f 0300 	mov.w	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]

	// lo regresa como 8 bit escalado
	return (uint8_t) gammaCorrectedColor;
 80011d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80011d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011da:	edc7 7a01 	vstr	s15, [r7, #4]
 80011de:	793b      	ldrb	r3, [r7, #4]
 80011e0:	b2db      	uxtb	r3, r3
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3720      	adds	r7, #32
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	f3af 8000 	nop.w
 80011f0:	a0000000 	.word	0xa0000000
 80011f4:	40019999 	.word	0x40019999
 80011f8:	00000000 	.word	0x00000000
 80011fc:	406fe000 	.word	0x406fe000
 8001200:	42c80000 	.word	0x42c80000
 8001204:	42c80000 	.word	0x42c80000
 8001208:	437f0000 	.word	0x437f0000
 800120c:	437f0000 	.word	0x437f0000

08001210 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&neoPixel_timer, neoPixel_canal);
 8001218:	2100      	movs	r1, #0
 800121a:	4805      	ldr	r0, [pc, #20]	@ (8001230 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 800121c:	f004 fc26 	bl	8005a6c <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8001220:	4b04      	ldr	r3, [pc, #16]	@ (8001234 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001222:	2201      	movs	r2, #1
 8001224:	701a      	strb	r2, [r3, #0]
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000a08 	.word	0x20000a08
 8001234:	200009b0 	.word	0x200009b0

08001238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800123e:	f000 fe59 	bl	8001ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001242:	f000 f8b1 	bl	80013a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001246:	f000 fa15 	bl	8001674 <MX_GPIO_Init>
  MX_DMA_Init();
 800124a:	f000 f9f3 	bl	8001634 <MX_DMA_Init>
  MX_I2C1_Init();
 800124e:	f000 f917 	bl	8001480 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001252:	f000 f9c5 	bl	80015e0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001256:	f000 f941 	bl	80014dc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	// Neopixels Settings (unique color all the time)

	//I2C Communication
	if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK){
 800125a:	484d      	ldr	r0, [pc, #308]	@ (8001390 <main+0x158>)
 800125c:	f001 ffaf 	bl	80031be <HAL_I2C_EnableListen_IT>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <main+0x32>
	  Error_Handler();
 8001266:	f000 fc4d 	bl	8001b04 <Error_Handler>
	}

	// Display 7 segmentos
	showDisplay(keys);
 800126a:	4b4a      	ldr	r3, [pc, #296]	@ (8001394 <main+0x15c>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f000 fa9e 	bl	80017b0 <showDisplay>


	GPIO_PinState currentState = HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin);
 8001274:	2120      	movs	r1, #32
 8001276:	4848      	ldr	r0, [pc, #288]	@ (8001398 <main+0x160>)
 8001278:	f001 fd18 	bl	8002cac <HAL_GPIO_ReadPin>
 800127c:	4603      	mov	r3, r0
 800127e:	70fb      	strb	r3, [r7, #3]
	switch (currentState) {
 8001280:	78fb      	ldrb	r3, [r7, #3]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d005      	beq.n	8001292 <main+0x5a>
 8001286:	2b01      	cmp	r3, #1
 8001288:	d107      	bne.n	800129a <main+0x62>
	  case GPIO_PIN_SET: key[0] = 0; break;
 800128a:	4b44      	ldr	r3, [pc, #272]	@ (800139c <main+0x164>)
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
 8001290:	e004      	b.n	800129c <main+0x64>
	  case GPIO_PIN_RESET: key[0] = 1; break;
 8001292:	4b42      	ldr	r3, [pc, #264]	@ (800139c <main+0x164>)
 8001294:	2201      	movs	r2, #1
 8001296:	701a      	strb	r2, [r3, #0]
 8001298:	e000      	b.n	800129c <main+0x64>
	  default: break;
 800129a:	bf00      	nop
	}

	currentState = HAL_GPIO_ReadPin(S2_GPIO_Port, S2_Pin);
 800129c:	2140      	movs	r1, #64	@ 0x40
 800129e:	483e      	ldr	r0, [pc, #248]	@ (8001398 <main+0x160>)
 80012a0:	f001 fd04 	bl	8002cac <HAL_GPIO_ReadPin>
 80012a4:	4603      	mov	r3, r0
 80012a6:	70fb      	strb	r3, [r7, #3]
	switch (currentState) {
 80012a8:	78fb      	ldrb	r3, [r7, #3]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d005      	beq.n	80012ba <main+0x82>
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d107      	bne.n	80012c2 <main+0x8a>
		case GPIO_PIN_SET: key[1] = 0; break;
 80012b2:	4b3a      	ldr	r3, [pc, #232]	@ (800139c <main+0x164>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	705a      	strb	r2, [r3, #1]
 80012b8:	e004      	b.n	80012c4 <main+0x8c>
		case GPIO_PIN_RESET: key[1] = 1; break;
 80012ba:	4b38      	ldr	r3, [pc, #224]	@ (800139c <main+0x164>)
 80012bc:	2201      	movs	r2, #1
 80012be:	705a      	strb	r2, [r3, #1]
 80012c0:	e000      	b.n	80012c4 <main+0x8c>
		default: break;
 80012c2:	bf00      	nop
	}

	currentState = HAL_GPIO_ReadPin(S3_GPIO_Port, S3_Pin);
 80012c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012c8:	4833      	ldr	r0, [pc, #204]	@ (8001398 <main+0x160>)
 80012ca:	f001 fcef 	bl	8002cac <HAL_GPIO_ReadPin>
 80012ce:	4603      	mov	r3, r0
 80012d0:	70fb      	strb	r3, [r7, #3]
	switch (currentState) {
 80012d2:	78fb      	ldrb	r3, [r7, #3]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d005      	beq.n	80012e4 <main+0xac>
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d107      	bne.n	80012ec <main+0xb4>
	  	  case GPIO_PIN_SET: key[2] = 0; break;
 80012dc:	4b2f      	ldr	r3, [pc, #188]	@ (800139c <main+0x164>)
 80012de:	2200      	movs	r2, #0
 80012e0:	709a      	strb	r2, [r3, #2]
 80012e2:	e004      	b.n	80012ee <main+0xb6>
		case GPIO_PIN_RESET: key[2] = 1; break;
 80012e4:	4b2d      	ldr	r3, [pc, #180]	@ (800139c <main+0x164>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	709a      	strb	r2, [r3, #2]
 80012ea:	e000      	b.n	80012ee <main+0xb6>
		default: break;
 80012ec:	bf00      	nop
	}

	currentState = HAL_GPIO_ReadPin(S4_GPIO_Port, S4_Pin);
 80012ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012f2:	4829      	ldr	r0, [pc, #164]	@ (8001398 <main+0x160>)
 80012f4:	f001 fcda 	bl	8002cac <HAL_GPIO_ReadPin>
 80012f8:	4603      	mov	r3, r0
 80012fa:	70fb      	strb	r3, [r7, #3]
	switch (currentState){
 80012fc:	78fb      	ldrb	r3, [r7, #3]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d005      	beq.n	800130e <main+0xd6>
 8001302:	2b01      	cmp	r3, #1
 8001304:	d107      	bne.n	8001316 <main+0xde>
			case GPIO_PIN_SET: key[3] = 0; break;
 8001306:	4b25      	ldr	r3, [pc, #148]	@ (800139c <main+0x164>)
 8001308:	2200      	movs	r2, #0
 800130a:	70da      	strb	r2, [r3, #3]
 800130c:	e004      	b.n	8001318 <main+0xe0>
			case GPIO_PIN_RESET: key[3] = 1; break;
 800130e:	4b23      	ldr	r3, [pc, #140]	@ (800139c <main+0x164>)
 8001310:	2201      	movs	r2, #1
 8001312:	70da      	strb	r2, [r3, #3]
 8001314:	e000      	b.n	8001318 <main+0xe0>
			default: break;
 8001316:	bf00      	nop
	}

	start = 1;
 8001318:	4b21      	ldr	r3, [pc, #132]	@ (80013a0 <main+0x168>)
 800131a:	2201      	movs	r2, #1
 800131c:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(start == 1){
 800131e:	4b20      	ldr	r3, [pc, #128]	@ (80013a0 <main+0x168>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d1fb      	bne.n	800131e <main+0xe6>
		  pixelClear();
 8001326:	f7ff fec3 	bl	80010b0 <pixelClear>
		  for(int i = 0; i< 8; i++){
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	e01a      	b.n	8001366 <main+0x12e>
			  if(keys_memory[i] == 1){
 8001330:	4a1c      	ldr	r2, [pc, #112]	@ (80013a4 <main+0x16c>)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d107      	bne.n	800134c <main+0x114>
				  setPixelColor(i, 255,  0,  0);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	b298      	uxth	r0, r3
 8001340:	2300      	movs	r3, #0
 8001342:	2200      	movs	r2, #0
 8001344:	21ff      	movs	r1, #255	@ 0xff
 8001346:	f7ff fd93 	bl	8000e70 <setPixelColor>
 800134a:	e006      	b.n	800135a <main+0x122>
			  }
			  else{
				  setPixelColor(i, 0,  255,  0);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	b298      	uxth	r0, r3
 8001350:	2300      	movs	r3, #0
 8001352:	22ff      	movs	r2, #255	@ 0xff
 8001354:	2100      	movs	r1, #0
 8001356:	f7ff fd8b 	bl	8000e70 <setPixelColor>
			  }
			  HAL_Delay(2);
 800135a:	2002      	movs	r0, #2
 800135c:	f000 fe3c 	bl	8001fd8 <HAL_Delay>
		  for(int i = 0; i< 8; i++){
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3301      	adds	r3, #1
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b07      	cmp	r3, #7
 800136a:	dde1      	ble.n	8001330 <main+0xf8>
		  }
		  setBrightness(20);
 800136c:	2014      	movs	r0, #20
 800136e:	f7ff fdad 	bl	8000ecc <setBrightness>
		  pixelShow();
 8001372:	f7ff fdfd 	bl	8000f70 <pixelShow>
		  // Display 7 segmentos
		  showDisplay(8-keys);
 8001376:	4b07      	ldr	r3, [pc, #28]	@ (8001394 <main+0x15c>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	f1c3 0308 	rsb	r3, r3, #8
 800137e:	b2db      	uxtb	r3, r3
 8001380:	4618      	mov	r0, r3
 8001382:	f000 fa15 	bl	80017b0 <showDisplay>
		  start = 0;
 8001386:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <main+0x168>)
 8001388:	2200      	movs	r2, #0
 800138a:	701a      	strb	r2, [r3, #0]
	  if(start == 1){
 800138c:	e7c7      	b.n	800131e <main+0xe6>
 800138e:	bf00      	nop
 8001390:	200009b4 	.word	0x200009b4
 8001394:	20000b18 	.word	0x20000b18
 8001398:	40020800 	.word	0x40020800
 800139c:	20000b10 	.word	0x20000b10
 80013a0:	20000b04 	.word	0x20000b04
 80013a4:	20000b08 	.word	0x20000b08

080013a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b094      	sub	sp, #80	@ 0x50
 80013ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	2234      	movs	r2, #52	@ 0x34
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f005 fbe0 	bl	8006b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013bc:	f107 0308 	add.w	r3, r7, #8
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013cc:	2300      	movs	r3, #0
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	4b29      	ldr	r3, [pc, #164]	@ (8001478 <SystemClock_Config+0xd0>)
 80013d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d4:	4a28      	ldr	r2, [pc, #160]	@ (8001478 <SystemClock_Config+0xd0>)
 80013d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013da:	6413      	str	r3, [r2, #64]	@ 0x40
 80013dc:	4b26      	ldr	r3, [pc, #152]	@ (8001478 <SystemClock_Config+0xd0>)
 80013de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013e8:	2300      	movs	r3, #0
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	4b23      	ldr	r3, [pc, #140]	@ (800147c <SystemClock_Config+0xd4>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80013f4:	4a21      	ldr	r2, [pc, #132]	@ (800147c <SystemClock_Config+0xd4>)
 80013f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	4b1f      	ldr	r3, [pc, #124]	@ (800147c <SystemClock_Config+0xd4>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001404:	603b      	str	r3, [r7, #0]
 8001406:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001408:	2302      	movs	r3, #2
 800140a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800140c:	2301      	movs	r3, #1
 800140e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001410:	2310      	movs	r3, #16
 8001412:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001414:	2302      	movs	r3, #2
 8001416:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001418:	2300      	movs	r3, #0
 800141a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800141c:	2308      	movs	r3, #8
 800141e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001420:	2354      	movs	r3, #84	@ 0x54
 8001422:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001424:	2302      	movs	r3, #2
 8001426:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001428:	2302      	movs	r3, #2
 800142a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800142c:	2302      	movs	r3, #2
 800142e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001430:	f107 031c 	add.w	r3, r7, #28
 8001434:	4618      	mov	r0, r3
 8001436:	f003 fe63 	bl	8005100 <HAL_RCC_OscConfig>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001440:	f000 fb60 	bl	8001b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001444:	230f      	movs	r3, #15
 8001446:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001448:	2302      	movs	r3, #2
 800144a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800144c:	2300      	movs	r3, #0
 800144e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001450:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001454:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001456:	2300      	movs	r3, #0
 8001458:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800145a:	f107 0308 	add.w	r3, r7, #8
 800145e:	2102      	movs	r1, #2
 8001460:	4618      	mov	r0, r3
 8001462:	f003 fb89 	bl	8004b78 <HAL_RCC_ClockConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800146c:	f000 fb4a 	bl	8001b04 <Error_Handler>
  }
}
 8001470:	bf00      	nop
 8001472:	3750      	adds	r7, #80	@ 0x50
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40023800 	.word	0x40023800
 800147c:	40007000 	.word	0x40007000

08001480 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001484:	4b12      	ldr	r3, [pc, #72]	@ (80014d0 <MX_I2C1_Init+0x50>)
 8001486:	4a13      	ldr	r2, [pc, #76]	@ (80014d4 <MX_I2C1_Init+0x54>)
 8001488:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800148a:	4b11      	ldr	r3, [pc, #68]	@ (80014d0 <MX_I2C1_Init+0x50>)
 800148c:	4a12      	ldr	r2, [pc, #72]	@ (80014d8 <MX_I2C1_Init+0x58>)
 800148e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001490:	4b0f      	ldr	r3, [pc, #60]	@ (80014d0 <MX_I2C1_Init+0x50>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 64;
 8001496:	4b0e      	ldr	r3, [pc, #56]	@ (80014d0 <MX_I2C1_Init+0x50>)
 8001498:	2240      	movs	r2, #64	@ 0x40
 800149a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800149c:	4b0c      	ldr	r3, [pc, #48]	@ (80014d0 <MX_I2C1_Init+0x50>)
 800149e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014a4:	4b0a      	ldr	r3, [pc, #40]	@ (80014d0 <MX_I2C1_Init+0x50>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014aa:	4b09      	ldr	r3, [pc, #36]	@ (80014d0 <MX_I2C1_Init+0x50>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014b0:	4b07      	ldr	r3, [pc, #28]	@ (80014d0 <MX_I2C1_Init+0x50>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014b6:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <MX_I2C1_Init+0x50>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014bc:	4804      	ldr	r0, [pc, #16]	@ (80014d0 <MX_I2C1_Init+0x50>)
 80014be:	f001 fc3f 	bl	8002d40 <HAL_I2C_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014c8:	f000 fb1c 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	200009b4 	.word	0x200009b4
 80014d4:	40005400 	.word	0x40005400
 80014d8:	000186a0 	.word	0x000186a0

080014dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b092      	sub	sp, #72	@ 0x48
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
 80014fc:	615a      	str	r2, [r3, #20]
 80014fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	2220      	movs	r2, #32
 8001504:	2100      	movs	r1, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f005 fb38 	bl	8006b7c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800150c:	4b32      	ldr	r3, [pc, #200]	@ (80015d8 <MX_TIM1_Init+0xfc>)
 800150e:	4a33      	ldr	r2, [pc, #204]	@ (80015dc <MX_TIM1_Init+0x100>)
 8001510:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001512:	4b31      	ldr	r3, [pc, #196]	@ (80015d8 <MX_TIM1_Init+0xfc>)
 8001514:	2200      	movs	r2, #0
 8001516:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001518:	4b2f      	ldr	r3, [pc, #188]	@ (80015d8 <MX_TIM1_Init+0xfc>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 150-1;
 800151e:	4b2e      	ldr	r3, [pc, #184]	@ (80015d8 <MX_TIM1_Init+0xfc>)
 8001520:	2295      	movs	r2, #149	@ 0x95
 8001522:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001524:	4b2c      	ldr	r3, [pc, #176]	@ (80015d8 <MX_TIM1_Init+0xfc>)
 8001526:	2200      	movs	r2, #0
 8001528:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800152a:	4b2b      	ldr	r3, [pc, #172]	@ (80015d8 <MX_TIM1_Init+0xfc>)
 800152c:	2200      	movs	r2, #0
 800152e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001530:	4b29      	ldr	r3, [pc, #164]	@ (80015d8 <MX_TIM1_Init+0xfc>)
 8001532:	2200      	movs	r2, #0
 8001534:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001536:	4828      	ldr	r0, [pc, #160]	@ (80015d8 <MX_TIM1_Init+0xfc>)
 8001538:	f004 f880 	bl	800563c <HAL_TIM_PWM_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8001542:	f000 fadf 	bl	8001b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001546:	2300      	movs	r3, #0
 8001548:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800154e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001552:	4619      	mov	r1, r3
 8001554:	4820      	ldr	r0, [pc, #128]	@ (80015d8 <MX_TIM1_Init+0xfc>)
 8001556:	f004 ff7f 	bl	8006458 <HAL_TIMEx_MasterConfigSynchronization>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001560:	f000 fad0 	bl	8001b04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001564:	2360      	movs	r3, #96	@ 0x60
 8001566:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800156c:	2300      	movs	r3, #0
 800156e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001570:	2300      	movs	r3, #0
 8001572:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001574:	2300      	movs	r3, #0
 8001576:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001578:	2300      	movs	r3, #0
 800157a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800157c:	2300      	movs	r3, #0
 800157e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001580:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001584:	2200      	movs	r2, #0
 8001586:	4619      	mov	r1, r3
 8001588:	4813      	ldr	r0, [pc, #76]	@ (80015d8 <MX_TIM1_Init+0xfc>)
 800158a:	f004 fb41 	bl	8005c10 <HAL_TIM_PWM_ConfigChannel>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001594:	f000 fab6 	bl	8001b04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001598:	2300      	movs	r3, #0
 800159a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	4619      	mov	r1, r3
 80015ba:	4807      	ldr	r0, [pc, #28]	@ (80015d8 <MX_TIM1_Init+0xfc>)
 80015bc:	f004 ffc8 	bl	8006550 <HAL_TIMEx_ConfigBreakDeadTime>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80015c6:	f000 fa9d 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015ca:	4803      	ldr	r0, [pc, #12]	@ (80015d8 <MX_TIM1_Init+0xfc>)
 80015cc:	f000 fb74 	bl	8001cb8 <HAL_TIM_MspPostInit>

}
 80015d0:	bf00      	nop
 80015d2:	3748      	adds	r7, #72	@ 0x48
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000a08 	.word	0x20000a08
 80015dc:	40010000 	.word	0x40010000

080015e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015e4:	4b11      	ldr	r3, [pc, #68]	@ (800162c <MX_USART2_UART_Init+0x4c>)
 80015e6:	4a12      	ldr	r2, [pc, #72]	@ (8001630 <MX_USART2_UART_Init+0x50>)
 80015e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015ea:	4b10      	ldr	r3, [pc, #64]	@ (800162c <MX_USART2_UART_Init+0x4c>)
 80015ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015f2:	4b0e      	ldr	r3, [pc, #56]	@ (800162c <MX_USART2_UART_Init+0x4c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015f8:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <MX_USART2_UART_Init+0x4c>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015fe:	4b0b      	ldr	r3, [pc, #44]	@ (800162c <MX_USART2_UART_Init+0x4c>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001604:	4b09      	ldr	r3, [pc, #36]	@ (800162c <MX_USART2_UART_Init+0x4c>)
 8001606:	220c      	movs	r2, #12
 8001608:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160a:	4b08      	ldr	r3, [pc, #32]	@ (800162c <MX_USART2_UART_Init+0x4c>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001610:	4b06      	ldr	r3, [pc, #24]	@ (800162c <MX_USART2_UART_Init+0x4c>)
 8001612:	2200      	movs	r2, #0
 8001614:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001616:	4805      	ldr	r0, [pc, #20]	@ (800162c <MX_USART2_UART_Init+0x4c>)
 8001618:	f004 ffec 	bl	80065f4 <HAL_UART_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001622:	f000 fa6f 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000ab0 	.word	0x20000ab0
 8001630:	40004400 	.word	0x40004400

08001634 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	4b0c      	ldr	r3, [pc, #48]	@ (8001670 <MX_DMA_Init+0x3c>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	4a0b      	ldr	r2, [pc, #44]	@ (8001670 <MX_DMA_Init+0x3c>)
 8001644:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001648:	6313      	str	r3, [r2, #48]	@ 0x30
 800164a:	4b09      	ldr	r3, [pc, #36]	@ (8001670 <MX_DMA_Init+0x3c>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	2100      	movs	r1, #0
 800165a:	2039      	movs	r0, #57	@ 0x39
 800165c:	f000 fdbb 	bl	80021d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001660:	2039      	movs	r0, #57	@ 0x39
 8001662:	f000 fdd4 	bl	800220e <HAL_NVIC_EnableIRQ>

}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800

08001674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b088      	sub	sp, #32
 8001678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167a:	f107 030c 	add.w	r3, r7, #12
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]
 8001686:	60da      	str	r2, [r3, #12]
 8001688:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	4b44      	ldr	r3, [pc, #272]	@ (80017a0 <MX_GPIO_Init+0x12c>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	4a43      	ldr	r2, [pc, #268]	@ (80017a0 <MX_GPIO_Init+0x12c>)
 8001694:	f043 0304 	orr.w	r3, r3, #4
 8001698:	6313      	str	r3, [r2, #48]	@ 0x30
 800169a:	4b41      	ldr	r3, [pc, #260]	@ (80017a0 <MX_GPIO_Init+0x12c>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	607b      	str	r3, [r7, #4]
 80016aa:	4b3d      	ldr	r3, [pc, #244]	@ (80017a0 <MX_GPIO_Init+0x12c>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	4a3c      	ldr	r2, [pc, #240]	@ (80017a0 <MX_GPIO_Init+0x12c>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b6:	4b3a      	ldr	r3, [pc, #232]	@ (80017a0 <MX_GPIO_Init+0x12c>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	603b      	str	r3, [r7, #0]
 80016c6:	4b36      	ldr	r3, [pc, #216]	@ (80017a0 <MX_GPIO_Init+0x12c>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	4a35      	ldr	r2, [pc, #212]	@ (80017a0 <MX_GPIO_Init+0x12c>)
 80016cc:	f043 0302 	orr.w	r3, r3, #2
 80016d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d2:	4b33      	ldr	r3, [pc, #204]	@ (80017a0 <MX_GPIO_Init+0x12c>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A_Pin|B_Pin|G_Pin|F_Pin, GPIO_PIN_RESET);
 80016de:	2200      	movs	r2, #0
 80016e0:	210f      	movs	r1, #15
 80016e2:	4830      	ldr	r0, [pc, #192]	@ (80017a4 <MX_GPIO_Init+0x130>)
 80016e4:	f001 fafa 	bl	8002cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, E_Pin|D_Pin, GPIO_PIN_RESET);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2112      	movs	r1, #18
 80016ec:	482e      	ldr	r0, [pc, #184]	@ (80017a8 <MX_GPIO_Init+0x134>)
 80016ee:	f001 faf5 	bl	8002cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2101      	movs	r1, #1
 80016f6:	482d      	ldr	r0, [pc, #180]	@ (80017ac <MX_GPIO_Init+0x138>)
 80016f8:	f001 faf0 	bl	8002cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A_Pin B_Pin G_Pin F_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|G_Pin|F_Pin;
 80016fc:	230f      	movs	r3, #15
 80016fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001700:	2301      	movs	r3, #1
 8001702:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001708:	2300      	movs	r3, #0
 800170a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	4619      	mov	r1, r3
 8001712:	4824      	ldr	r0, [pc, #144]	@ (80017a4 <MX_GPIO_Init+0x130>)
 8001714:	f001 f936 	bl	8002984 <HAL_GPIO_Init>

  /*Configure GPIO pins : E_Pin D_Pin */
  GPIO_InitStruct.Pin = E_Pin|D_Pin;
 8001718:	2312      	movs	r3, #18
 800171a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171c:	2301      	movs	r3, #1
 800171e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001728:	f107 030c 	add.w	r3, r7, #12
 800172c:	4619      	mov	r1, r3
 800172e:	481e      	ldr	r0, [pc, #120]	@ (80017a8 <MX_GPIO_Init+0x134>)
 8001730:	f001 f928 	bl	8002984 <HAL_GPIO_Init>

  /*Configure GPIO pins : S1_Pin S2_Pin */
  GPIO_InitStruct.Pin = S1_Pin|S2_Pin;
 8001734:	2360      	movs	r3, #96	@ 0x60
 8001736:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001738:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800173c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001742:	f107 030c 	add.w	r3, r7, #12
 8001746:	4619      	mov	r1, r3
 8001748:	4816      	ldr	r0, [pc, #88]	@ (80017a4 <MX_GPIO_Init+0x130>)
 800174a:	f001 f91b 	bl	8002984 <HAL_GPIO_Init>

  /*Configure GPIO pin : C_Pin */
  GPIO_InitStruct.Pin = C_Pin;
 800174e:	2301      	movs	r3, #1
 8001750:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001752:	2301      	movs	r3, #1
 8001754:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(C_GPIO_Port, &GPIO_InitStruct);
 800175e:	f107 030c 	add.w	r3, r7, #12
 8001762:	4619      	mov	r1, r3
 8001764:	4811      	ldr	r0, [pc, #68]	@ (80017ac <MX_GPIO_Init+0x138>)
 8001766:	f001 f90d 	bl	8002984 <HAL_GPIO_Init>

  /*Configure GPIO pins : S3_Pin S4_Pin */
  GPIO_InitStruct.Pin = S3_Pin|S4_Pin;
 800176a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800176e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001770:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001774:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800177a:	f107 030c 	add.w	r3, r7, #12
 800177e:	4619      	mov	r1, r3
 8001780:	4808      	ldr	r0, [pc, #32]	@ (80017a4 <MX_GPIO_Init+0x130>)
 8001782:	f001 f8ff 	bl	8002984 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	2100      	movs	r1, #0
 800178a:	2017      	movs	r0, #23
 800178c:	f000 fd23 	bl	80021d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001790:	2017      	movs	r0, #23
 8001792:	f000 fd3c 	bl	800220e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001796:	bf00      	nop
 8001798:	3720      	adds	r7, #32
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40020800 	.word	0x40020800
 80017a8:	40020000 	.word	0x40020000
 80017ac:	40020400 	.word	0x40020400

080017b0 <showDisplay>:

/* USER CODE BEGIN 4 */

/* Display 7 segmentos*/
void showDisplay(uint8_t number) {	// It updates every display's pin, it compares every pattern bit to set or reset the display pin
 80017b0:	b5b0      	push	{r4, r5, r7, lr}
 80017b2:	b092      	sub	sp, #72	@ 0x48
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
	uint8_t displayN[] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71};							// Numbers for display, hex, 0-F
 80017ba:	4b20      	ldr	r3, [pc, #128]	@ (800183c <showDisplay+0x8c>)
 80017bc:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 80017c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	GPIO_TypeDef *display_ports[] = {A_GPIO_Port, B_GPIO_Port, C_GPIO_Port, D_GPIO_Port, E_GPIO_Port, F_GPIO_Port, G_GPIO_Port}; 	// pin port, add dot if necessary
 80017c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001840 <showDisplay+0x90>)
 80017c8:	f107 0418 	add.w	r4, r7, #24
 80017cc:	461d      	mov	r5, r3
 80017ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint16_t display_pins[] = {A_Pin, B_Pin, C_Pin, D_Pin, E_Pin, F_Pin, G_Pin}; 													// pin number, add dot if necessary
 80017da:	4b1a      	ldr	r3, [pc, #104]	@ (8001844 <showDisplay+0x94>)
 80017dc:	f107 0408 	add.w	r4, r7, #8
 80017e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017e2:	c407      	stmia	r4!, {r0, r1, r2}
 80017e4:	8023      	strh	r3, [r4, #0]
	for (int k = 0; k < 7; k++) HAL_GPIO_WritePin(display_ports[k], display_pins[k], (displayN[number]>> k) & 1); 					// Not using dot, if using dot, k<8
 80017e6:	2300      	movs	r3, #0
 80017e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80017ea:	e01e      	b.n	800182a <showDisplay+0x7a>
 80017ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	3348      	adds	r3, #72	@ 0x48
 80017f2:	443b      	add	r3, r7
 80017f4:	f853 0c30 	ldr.w	r0, [r3, #-48]
 80017f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	3348      	adds	r3, #72	@ 0x48
 80017fe:	443b      	add	r3, r7
 8001800:	f833 1c40 	ldrh.w	r1, [r3, #-64]
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	3348      	adds	r3, #72	@ 0x48
 8001808:	443b      	add	r3, r7
 800180a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800180e:	461a      	mov	r2, r3
 8001810:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001812:	fa42 f303 	asr.w	r3, r2, r3
 8001816:	b2db      	uxtb	r3, r3
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	b2db      	uxtb	r3, r3
 800181e:	461a      	mov	r2, r3
 8001820:	f001 fa5c 	bl	8002cdc <HAL_GPIO_WritePin>
 8001824:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001826:	3301      	adds	r3, #1
 8001828:	647b      	str	r3, [r7, #68]	@ 0x44
 800182a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800182c:	2b06      	cmp	r3, #6
 800182e:	dddd      	ble.n	80017ec <showDisplay+0x3c>
}
 8001830:	bf00      	nop
 8001832:	bf00      	nop
 8001834:	3748      	adds	r7, #72	@ 0x48
 8001836:	46bd      	mov	sp, r7
 8001838:	bdb0      	pop	{r4, r5, r7, pc}
 800183a:	bf00      	nop
 800183c:	08007ab8 	.word	0x08007ab8
 8001840:	08007ac8 	.word	0x08007ac8
 8001844:	08007ae4 	.word	0x08007ae4

08001848 <HAL_GPIO_EXTI_Callback>:

/* External Interruptions: Sensors */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == S1_Pin && start == 0){
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	2b20      	cmp	r3, #32
 8001856:	d117      	bne.n	8001888 <HAL_GPIO_EXTI_Callback+0x40>
 8001858:	4b38      	ldr	r3, [pc, #224]	@ (800193c <HAL_GPIO_EXTI_Callback+0xf4>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d113      	bne.n	8001888 <HAL_GPIO_EXTI_Callback+0x40>
			GPIO_PinState currentState1 = HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin);
 8001860:	2120      	movs	r1, #32
 8001862:	4837      	ldr	r0, [pc, #220]	@ (8001940 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001864:	f001 fa22 	bl	8002cac <HAL_GPIO_ReadPin>
 8001868:	4603      	mov	r3, r0
 800186a:	73fb      	strb	r3, [r7, #15]
			switch (currentState1) {
 800186c:	7bfb      	ldrb	r3, [r7, #15]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d005      	beq.n	800187e <HAL_GPIO_EXTI_Callback+0x36>
 8001872:	2b01      	cmp	r3, #1
 8001874:	d107      	bne.n	8001886 <HAL_GPIO_EXTI_Callback+0x3e>
				case GPIO_PIN_SET: key[0] = 0; break;
 8001876:	4b33      	ldr	r3, [pc, #204]	@ (8001944 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
 800187c:	e004      	b.n	8001888 <HAL_GPIO_EXTI_Callback+0x40>
				case GPIO_PIN_RESET: key[0] = 1; break;
 800187e:	4b31      	ldr	r3, [pc, #196]	@ (8001944 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001880:	2201      	movs	r2, #1
 8001882:	701a      	strb	r2, [r3, #0]
 8001884:	e000      	b.n	8001888 <HAL_GPIO_EXTI_Callback+0x40>
				default: break;
 8001886:	bf00      	nop
			}
		}

		if(GPIO_Pin == S2_Pin && start == 0){
 8001888:	88fb      	ldrh	r3, [r7, #6]
 800188a:	2b40      	cmp	r3, #64	@ 0x40
 800188c:	d117      	bne.n	80018be <HAL_GPIO_EXTI_Callback+0x76>
 800188e:	4b2b      	ldr	r3, [pc, #172]	@ (800193c <HAL_GPIO_EXTI_Callback+0xf4>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d113      	bne.n	80018be <HAL_GPIO_EXTI_Callback+0x76>
			GPIO_PinState currentState2 = HAL_GPIO_ReadPin(S2_GPIO_Port, S2_Pin);
 8001896:	2140      	movs	r1, #64	@ 0x40
 8001898:	4829      	ldr	r0, [pc, #164]	@ (8001940 <HAL_GPIO_EXTI_Callback+0xf8>)
 800189a:	f001 fa07 	bl	8002cac <HAL_GPIO_ReadPin>
 800189e:	4603      	mov	r3, r0
 80018a0:	73bb      	strb	r3, [r7, #14]
			switch (currentState2) {
 80018a2:	7bbb      	ldrb	r3, [r7, #14]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d005      	beq.n	80018b4 <HAL_GPIO_EXTI_Callback+0x6c>
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d107      	bne.n	80018bc <HAL_GPIO_EXTI_Callback+0x74>
				case GPIO_PIN_SET: key[1] = 0; break;
 80018ac:	4b25      	ldr	r3, [pc, #148]	@ (8001944 <HAL_GPIO_EXTI_Callback+0xfc>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	705a      	strb	r2, [r3, #1]
 80018b2:	e004      	b.n	80018be <HAL_GPIO_EXTI_Callback+0x76>
				case GPIO_PIN_RESET: key[1] = 1; break;
 80018b4:	4b23      	ldr	r3, [pc, #140]	@ (8001944 <HAL_GPIO_EXTI_Callback+0xfc>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	705a      	strb	r2, [r3, #1]
 80018ba:	e000      	b.n	80018be <HAL_GPIO_EXTI_Callback+0x76>
				default: break;
 80018bc:	bf00      	nop
			}
		}

		if(GPIO_Pin == S3_Pin && start == 0){
 80018be:	88fb      	ldrh	r3, [r7, #6]
 80018c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018c4:	d118      	bne.n	80018f8 <HAL_GPIO_EXTI_Callback+0xb0>
 80018c6:	4b1d      	ldr	r3, [pc, #116]	@ (800193c <HAL_GPIO_EXTI_Callback+0xf4>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d114      	bne.n	80018f8 <HAL_GPIO_EXTI_Callback+0xb0>
			GPIO_PinState currentState3 = HAL_GPIO_ReadPin(S3_GPIO_Port, S3_Pin);
 80018ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018d2:	481b      	ldr	r0, [pc, #108]	@ (8001940 <HAL_GPIO_EXTI_Callback+0xf8>)
 80018d4:	f001 f9ea 	bl	8002cac <HAL_GPIO_ReadPin>
 80018d8:	4603      	mov	r3, r0
 80018da:	737b      	strb	r3, [r7, #13]
			switch (currentState3) {
 80018dc:	7b7b      	ldrb	r3, [r7, #13]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d005      	beq.n	80018ee <HAL_GPIO_EXTI_Callback+0xa6>
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d107      	bne.n	80018f6 <HAL_GPIO_EXTI_Callback+0xae>
				case GPIO_PIN_SET: key[2] = 0; break;
 80018e6:	4b17      	ldr	r3, [pc, #92]	@ (8001944 <HAL_GPIO_EXTI_Callback+0xfc>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	709a      	strb	r2, [r3, #2]
 80018ec:	e004      	b.n	80018f8 <HAL_GPIO_EXTI_Callback+0xb0>
				case GPIO_PIN_RESET: key[2] = 1; break;
 80018ee:	4b15      	ldr	r3, [pc, #84]	@ (8001944 <HAL_GPIO_EXTI_Callback+0xfc>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	709a      	strb	r2, [r3, #2]
 80018f4:	e000      	b.n	80018f8 <HAL_GPIO_EXTI_Callback+0xb0>
				default: break;
 80018f6:	bf00      	nop
			}
		}

		if(GPIO_Pin == S4_Pin && start == 0){
 80018f8:	88fb      	ldrh	r3, [r7, #6]
 80018fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018fe:	d118      	bne.n	8001932 <HAL_GPIO_EXTI_Callback+0xea>
 8001900:	4b0e      	ldr	r3, [pc, #56]	@ (800193c <HAL_GPIO_EXTI_Callback+0xf4>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d114      	bne.n	8001932 <HAL_GPIO_EXTI_Callback+0xea>
			GPIO_PinState currentState4 = HAL_GPIO_ReadPin(S4_GPIO_Port, S4_Pin);
 8001908:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800190c:	480c      	ldr	r0, [pc, #48]	@ (8001940 <HAL_GPIO_EXTI_Callback+0xf8>)
 800190e:	f001 f9cd 	bl	8002cac <HAL_GPIO_ReadPin>
 8001912:	4603      	mov	r3, r0
 8001914:	733b      	strb	r3, [r7, #12]
			switch (currentState4) {
 8001916:	7b3b      	ldrb	r3, [r7, #12]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d005      	beq.n	8001928 <HAL_GPIO_EXTI_Callback+0xe0>
 800191c:	2b01      	cmp	r3, #1
 800191e:	d107      	bne.n	8001930 <HAL_GPIO_EXTI_Callback+0xe8>
				case GPIO_PIN_SET: key[3] = 0; break;
 8001920:	4b08      	ldr	r3, [pc, #32]	@ (8001944 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001922:	2200      	movs	r2, #0
 8001924:	70da      	strb	r2, [r3, #3]
 8001926:	e004      	b.n	8001932 <HAL_GPIO_EXTI_Callback+0xea>
				case GPIO_PIN_RESET: key[3] = 1; break;
 8001928:	4b06      	ldr	r3, [pc, #24]	@ (8001944 <HAL_GPIO_EXTI_Callback+0xfc>)
 800192a:	2201      	movs	r2, #1
 800192c:	70da      	strb	r2, [r3, #3]
 800192e:	e000      	b.n	8001932 <HAL_GPIO_EXTI_Callback+0xea>
				default: break;
 8001930:	bf00      	nop
			}
		}
}
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000b04 	.word	0x20000b04
 8001940:	40020800 	.word	0x40020800
 8001944:	20000b10 	.word	0x20000b10

08001948 <HAL_I2C_ListenCpltCallback>:

/* I2C Callbacks */
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c){													//At the end of the firts data analysis
 8001948:	b580      	push	{r7, lr}
 800194a:	b088      	sub	sp, #32
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f001 fc34 	bl	80031be <HAL_I2C_EnableListen_IT>
	keys = 0;
 8001956:	4b3b      	ldr	r3, [pc, #236]	@ (8001a44 <HAL_I2C_ListenCpltCallback+0xfc>)
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]
	uint8_t acceptData = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	77fb      	strb	r3, [r7, #31]
	for (int i = 0; i < 8; i++) if(keys_memory[i] != (RxData[0] & (1 << i))) acceptData = 1;
 8001960:	2300      	movs	r3, #0
 8001962:	61bb      	str	r3, [r7, #24]
 8001964:	e013      	b.n	800198e <HAL_I2C_ListenCpltCallback+0x46>
 8001966:	4a38      	ldr	r2, [pc, #224]	@ (8001a48 <HAL_I2C_ListenCpltCallback+0x100>)
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	4413      	add	r3, r2
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	4619      	mov	r1, r3
 8001970:	4b36      	ldr	r3, [pc, #216]	@ (8001a4c <HAL_I2C_ListenCpltCallback+0x104>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	2201      	movs	r2, #1
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	4003      	ands	r3, r0
 8001980:	4299      	cmp	r1, r3
 8001982:	d001      	beq.n	8001988 <HAL_I2C_ListenCpltCallback+0x40>
 8001984:	2301      	movs	r3, #1
 8001986:	77fb      	strb	r3, [r7, #31]
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	3301      	adds	r3, #1
 800198c:	61bb      	str	r3, [r7, #24]
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	2b07      	cmp	r3, #7
 8001992:	dde8      	ble.n	8001966 <HAL_I2C_ListenCpltCallback+0x1e>
	if(acceptData){
 8001994:	7ffb      	ldrb	r3, [r7, #31]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d030      	beq.n	80019fc <HAL_I2C_ListenCpltCallback+0xb4>
		for (int i = 0; i < 8; i++) keys_memory[i] = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
 800199e:	e007      	b.n	80019b0 <HAL_I2C_ListenCpltCallback+0x68>
 80019a0:	4a29      	ldr	r2, [pc, #164]	@ (8001a48 <HAL_I2C_ListenCpltCallback+0x100>)
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	4413      	add	r3, r2
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	3301      	adds	r3, #1
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	2b07      	cmp	r3, #7
 80019b4:	ddf4      	ble.n	80019a0 <HAL_I2C_ListenCpltCallback+0x58>
		for (int i = 0; i < 8; i++) {
 80019b6:	2300      	movs	r3, #0
 80019b8:	613b      	str	r3, [r7, #16]
 80019ba:	e017      	b.n	80019ec <HAL_I2C_ListenCpltCallback+0xa4>
			if((RxData[0] & (1 << i))) {
 80019bc:	4b23      	ldr	r3, [pc, #140]	@ (8001a4c <HAL_I2C_ListenCpltCallback+0x104>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	fa42 f303 	asr.w	r3, r2, r3
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d00a      	beq.n	80019e6 <HAL_I2C_ListenCpltCallback+0x9e>
				keys++;
 80019d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001a44 <HAL_I2C_ListenCpltCallback+0xfc>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	3301      	adds	r3, #1
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a44 <HAL_I2C_ListenCpltCallback+0xfc>)
 80019da:	701a      	strb	r2, [r3, #0]
				keys_memory[i] = 1;
 80019dc:	4a1a      	ldr	r2, [pc, #104]	@ (8001a48 <HAL_I2C_ListenCpltCallback+0x100>)
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	4413      	add	r3, r2
 80019e2:	2201      	movs	r2, #1
 80019e4:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 8; i++) {
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	3301      	adds	r3, #1
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	2b07      	cmp	r3, #7
 80019f0:	dde4      	ble.n	80019bc <HAL_I2C_ListenCpltCallback+0x74>
			}
		}
		start = 1;
 80019f2:	4b17      	ldr	r3, [pc, #92]	@ (8001a50 <HAL_I2C_ListenCpltCallback+0x108>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	701a      	strb	r2, [r3, #0]
		acceptData = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	77fb      	strb	r3, [r7, #31]
	}
	TxData[0] = 0;
 80019fc:	4b15      	ldr	r3, [pc, #84]	@ (8001a54 <HAL_I2C_ListenCpltCallback+0x10c>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 4; j++){
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	e015      	b.n	8001a34 <HAL_I2C_ListenCpltCallback+0xec>
		if(key[j]==1){
 8001a08:	4a13      	ldr	r2, [pc, #76]	@ (8001a58 <HAL_I2C_ListenCpltCallback+0x110>)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d10c      	bne.n	8001a2e <HAL_I2C_ListenCpltCallback+0xe6>
			TxData[0] |= (1<<j);
 8001a14:	4b0f      	ldr	r3, [pc, #60]	@ (8001a54 <HAL_I2C_ListenCpltCallback+0x10c>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	b25a      	sxtb	r2, r3
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a22:	b25b      	sxtb	r3, r3
 8001a24:	4313      	orrs	r3, r2
 8001a26:	b25b      	sxtb	r3, r3
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a54 <HAL_I2C_ListenCpltCallback+0x10c>)
 8001a2c:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 4; j++){
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	3301      	adds	r3, #1
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2b03      	cmp	r3, #3
 8001a38:	dde6      	ble.n	8001a08 <HAL_I2C_ListenCpltCallback+0xc0>
		}
	}
}
 8001a3a:	bf00      	nop
 8001a3c:	bf00      	nop
 8001a3e:	3720      	adds	r7, #32
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20000b18 	.word	0x20000b18
 8001a48:	20000b08 	.word	0x20000b08
 8001a4c:	20000af8 	.word	0x20000af8
 8001a50:	20000b04 	.word	0x20000b04
 8001a54:	20000afc 	.word	0x20000afc
 8001a58:	20000b10 	.word	0x20000b10

08001a5c <HAL_I2C_SlaveTxCpltCallback>:
void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *I2cHandle){												//Tx Transfer completed callback -> End Transmission
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <HAL_I2C_SlaveRxCpltCallback>:
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHandle){												//Rx Transfer completed callback -> End Receiving
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart2, RxData, 4, 1000);
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <HAL_I2C_AddrCallback>:
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)		// Slave Address Match Callback
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	70fb      	strb	r3, [r7, #3]
 8001a90:	4613      	mov	r3, r2
 8001a92:	803b      	strh	r3, [r7, #0]
	if (TransferDirection == I2C_DIRECTION_TRANSMIT)  // if the master wants to transmit the data
 8001a94:	78fb      	ldrb	r3, [r7, #3]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d10b      	bne.n	8001ab2 <HAL_I2C_AddrCallback+0x2e>
	{
		if (HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, (uint8_t *) RxData, RxSIZE, I2C_FIRST_AND_LAST_FRAME) != HAL_OK){
 8001a9a:	2308      	movs	r3, #8
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	490e      	ldr	r1, [pc, #56]	@ (8001ad8 <HAL_I2C_AddrCallback+0x54>)
 8001aa0:	480e      	ldr	r0, [pc, #56]	@ (8001adc <HAL_I2C_AddrCallback+0x58>)
 8001aa2:	f001 fb19 	bl	80030d8 <HAL_I2C_Slave_Seq_Receive_IT>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d010      	beq.n	8001ace <HAL_I2C_AddrCallback+0x4a>
			Error_Handler();
 8001aac:	f000 f82a 	bl	8001b04 <Error_Handler>
	else if (TransferDirection == I2C_DIRECTION_RECEIVE){
		if (HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, (uint8_t *) TxData, TxSIZE, I2C_FIRST_AND_LAST_FRAME) != HAL_OK){
			Error_Handler();
		}
	}
}
 8001ab0:	e00d      	b.n	8001ace <HAL_I2C_AddrCallback+0x4a>
	else if (TransferDirection == I2C_DIRECTION_RECEIVE){
 8001ab2:	78fb      	ldrb	r3, [r7, #3]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d10a      	bne.n	8001ace <HAL_I2C_AddrCallback+0x4a>
		if (HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, (uint8_t *) TxData, TxSIZE, I2C_FIRST_AND_LAST_FRAME) != HAL_OK){
 8001ab8:	2308      	movs	r3, #8
 8001aba:	2201      	movs	r2, #1
 8001abc:	4908      	ldr	r1, [pc, #32]	@ (8001ae0 <HAL_I2C_AddrCallback+0x5c>)
 8001abe:	4807      	ldr	r0, [pc, #28]	@ (8001adc <HAL_I2C_AddrCallback+0x58>)
 8001ac0:	f001 fa97 	bl	8002ff2 <HAL_I2C_Slave_Seq_Transmit_IT>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_I2C_AddrCallback+0x4a>
			Error_Handler();
 8001aca:	f000 f81b 	bl	8001b04 <Error_Handler>
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000af8 	.word	0x20000af8
 8001adc:	200009b4 	.word	0x200009b4
 8001ae0:	20000afc 	.word	0x20000afc

08001ae4 <HAL_I2C_ErrorCallback>:
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)													// I2C Communication Error callback
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
	if(HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF){
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f001 fdc0 	bl	8003672 <HAL_I2C_GetError>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b04      	cmp	r3, #4
 8001af6:	d001      	beq.n	8001afc <HAL_I2C_ErrorCallback+0x18>
		Error_Handler();
 8001af8:	f000 f804 	bl	8001b04 <Error_Handler>
	}
}
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b08:	b672      	cpsid	i
}
 8001b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b0c:	bf00      	nop
 8001b0e:	e7fd      	b.n	8001b0c <Error_Handler+0x8>

08001b10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	4b10      	ldr	r3, [pc, #64]	@ (8001b5c <HAL_MspInit+0x4c>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1e:	4a0f      	ldr	r2, [pc, #60]	@ (8001b5c <HAL_MspInit+0x4c>)
 8001b20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b26:	4b0d      	ldr	r3, [pc, #52]	@ (8001b5c <HAL_MspInit+0x4c>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b2e:	607b      	str	r3, [r7, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	603b      	str	r3, [r7, #0]
 8001b36:	4b09      	ldr	r3, [pc, #36]	@ (8001b5c <HAL_MspInit+0x4c>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3a:	4a08      	ldr	r2, [pc, #32]	@ (8001b5c <HAL_MspInit+0x4c>)
 8001b3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b42:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <HAL_MspInit+0x4c>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b4a:	603b      	str	r3, [r7, #0]
 8001b4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	40023800 	.word	0x40023800

08001b60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08a      	sub	sp, #40	@ 0x28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a21      	ldr	r2, [pc, #132]	@ (8001c04 <HAL_I2C_MspInit+0xa4>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d13c      	bne.n	8001bfc <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	4b20      	ldr	r3, [pc, #128]	@ (8001c08 <HAL_I2C_MspInit+0xa8>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	4a1f      	ldr	r2, [pc, #124]	@ (8001c08 <HAL_I2C_MspInit+0xa8>)
 8001b8c:	f043 0302 	orr.w	r3, r3, #2
 8001b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b92:	4b1d      	ldr	r3, [pc, #116]	@ (8001c08 <HAL_I2C_MspInit+0xa8>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b9e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ba4:	2312      	movs	r3, #18
 8001ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bac:	2303      	movs	r3, #3
 8001bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bb0:	2304      	movs	r3, #4
 8001bb2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4814      	ldr	r0, [pc, #80]	@ (8001c0c <HAL_I2C_MspInit+0xac>)
 8001bbc:	f000 fee2 	bl	8002984 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	4b10      	ldr	r3, [pc, #64]	@ (8001c08 <HAL_I2C_MspInit+0xa8>)
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc8:	4a0f      	ldr	r2, [pc, #60]	@ (8001c08 <HAL_I2C_MspInit+0xa8>)
 8001bca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bce:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bd0:	4b0d      	ldr	r3, [pc, #52]	@ (8001c08 <HAL_I2C_MspInit+0xa8>)
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2100      	movs	r1, #0
 8001be0:	201f      	movs	r0, #31
 8001be2:	f000 faf8 	bl	80021d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001be6:	201f      	movs	r0, #31
 8001be8:	f000 fb11 	bl	800220e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001bec:	2200      	movs	r2, #0
 8001bee:	2100      	movs	r1, #0
 8001bf0:	2020      	movs	r0, #32
 8001bf2:	f000 faf0 	bl	80021d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001bf6:	2020      	movs	r0, #32
 8001bf8:	f000 fb09 	bl	800220e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001bfc:	bf00      	nop
 8001bfe:	3728      	adds	r7, #40	@ 0x28
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40005400 	.word	0x40005400
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40020400 	.word	0x40020400

08001c10 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a22      	ldr	r2, [pc, #136]	@ (8001ca8 <HAL_TIM_PWM_MspInit+0x98>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d13d      	bne.n	8001c9e <HAL_TIM_PWM_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	4b21      	ldr	r3, [pc, #132]	@ (8001cac <HAL_TIM_PWM_MspInit+0x9c>)
 8001c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2a:	4a20      	ldr	r2, [pc, #128]	@ (8001cac <HAL_TIM_PWM_MspInit+0x9c>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c32:	4b1e      	ldr	r3, [pc, #120]	@ (8001cac <HAL_TIM_PWM_MspInit+0x9c>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001c3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb0 <HAL_TIM_PWM_MspInit+0xa0>)
 8001c40:	4a1c      	ldr	r2, [pc, #112]	@ (8001cb4 <HAL_TIM_PWM_MspInit+0xa4>)
 8001c42:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001c44:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb0 <HAL_TIM_PWM_MspInit+0xa0>)
 8001c46:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8001c4a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c4c:	4b18      	ldr	r3, [pc, #96]	@ (8001cb0 <HAL_TIM_PWM_MspInit+0xa0>)
 8001c4e:	2240      	movs	r2, #64	@ 0x40
 8001c50:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c52:	4b17      	ldr	r3, [pc, #92]	@ (8001cb0 <HAL_TIM_PWM_MspInit+0xa0>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001c58:	4b15      	ldr	r3, [pc, #84]	@ (8001cb0 <HAL_TIM_PWM_MspInit+0xa0>)
 8001c5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c5e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c60:	4b13      	ldr	r3, [pc, #76]	@ (8001cb0 <HAL_TIM_PWM_MspInit+0xa0>)
 8001c62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c66:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c68:	4b11      	ldr	r3, [pc, #68]	@ (8001cb0 <HAL_TIM_PWM_MspInit+0xa0>)
 8001c6a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c6e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001c70:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb0 <HAL_TIM_PWM_MspInit+0xa0>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001c76:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb0 <HAL_TIM_PWM_MspInit+0xa0>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb0 <HAL_TIM_PWM_MspInit+0xa0>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001c82:	480b      	ldr	r0, [pc, #44]	@ (8001cb0 <HAL_TIM_PWM_MspInit+0xa0>)
 8001c84:	f000 fade 	bl	8002244 <HAL_DMA_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 8001c8e:	f7ff ff39 	bl	8001b04 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a06      	ldr	r2, [pc, #24]	@ (8001cb0 <HAL_TIM_PWM_MspInit+0xa0>)
 8001c96:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c98:	4a05      	ldr	r2, [pc, #20]	@ (8001cb0 <HAL_TIM_PWM_MspInit+0xa0>)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001c9e:	bf00      	nop
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40010000 	.word	0x40010000
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	20000a50 	.word	0x20000a50
 8001cb4:	40026428 	.word	0x40026428

08001cb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	f107 030c 	add.w	r3, r7, #12
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a12      	ldr	r2, [pc, #72]	@ (8001d20 <HAL_TIM_MspPostInit+0x68>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d11e      	bne.n	8001d18 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	4b11      	ldr	r3, [pc, #68]	@ (8001d24 <HAL_TIM_MspPostInit+0x6c>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce2:	4a10      	ldr	r2, [pc, #64]	@ (8001d24 <HAL_TIM_MspPostInit+0x6c>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cea:	4b0e      	ldr	r3, [pc, #56]	@ (8001d24 <HAL_TIM_MspPostInit+0x6c>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cf6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cfa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0c:	f107 030c 	add.w	r3, r7, #12
 8001d10:	4619      	mov	r1, r3
 8001d12:	4805      	ldr	r0, [pc, #20]	@ (8001d28 <HAL_TIM_MspPostInit+0x70>)
 8001d14:	f000 fe36 	bl	8002984 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d18:	bf00      	nop
 8001d1a:	3720      	adds	r7, #32
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40010000 	.word	0x40010000
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40020000 	.word	0x40020000

08001d2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08a      	sub	sp, #40	@ 0x28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a19      	ldr	r2, [pc, #100]	@ (8001db0 <HAL_UART_MspInit+0x84>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d12b      	bne.n	8001da6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]
 8001d52:	4b18      	ldr	r3, [pc, #96]	@ (8001db4 <HAL_UART_MspInit+0x88>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d56:	4a17      	ldr	r2, [pc, #92]	@ (8001db4 <HAL_UART_MspInit+0x88>)
 8001d58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d5e:	4b15      	ldr	r3, [pc, #84]	@ (8001db4 <HAL_UART_MspInit+0x88>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	4b11      	ldr	r3, [pc, #68]	@ (8001db4 <HAL_UART_MspInit+0x88>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	4a10      	ldr	r2, [pc, #64]	@ (8001db4 <HAL_UART_MspInit+0x88>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001db4 <HAL_UART_MspInit+0x88>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d86:	230c      	movs	r3, #12
 8001d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d92:	2303      	movs	r3, #3
 8001d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d96:	2307      	movs	r3, #7
 8001d98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9a:	f107 0314 	add.w	r3, r7, #20
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4805      	ldr	r0, [pc, #20]	@ (8001db8 <HAL_UART_MspInit+0x8c>)
 8001da2:	f000 fdef 	bl	8002984 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001da6:	bf00      	nop
 8001da8:	3728      	adds	r7, #40	@ 0x28
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40004400 	.word	0x40004400
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40020000 	.word	0x40020000

08001dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001dc0:	bf00      	nop
 8001dc2:	e7fd      	b.n	8001dc0 <NMI_Handler+0x4>

08001dc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dc8:	bf00      	nop
 8001dca:	e7fd      	b.n	8001dc8 <HardFault_Handler+0x4>

08001dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd0:	bf00      	nop
 8001dd2:	e7fd      	b.n	8001dd0 <MemManage_Handler+0x4>

08001dd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dd8:	bf00      	nop
 8001dda:	e7fd      	b.n	8001dd8 <BusFault_Handler+0x4>

08001ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de0:	bf00      	nop
 8001de2:	e7fd      	b.n	8001de0 <UsageFault_Handler+0x4>

08001de4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e12:	f000 f8c1 	bl	8001f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S1_Pin);
 8001e1e:	2020      	movs	r0, #32
 8001e20:	f000 ff76 	bl	8002d10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S2_Pin);
 8001e24:	2040      	movs	r0, #64	@ 0x40
 8001e26:	f000 ff73 	bl	8002d10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S3_Pin);
 8001e2a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001e2e:	f000 ff6f 	bl	8002d10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S4_Pin);
 8001e32:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001e36:	f000 ff6b 	bl	8002d10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001e44:	4802      	ldr	r0, [pc, #8]	@ (8001e50 <I2C1_EV_IRQHandler+0x10>)
 8001e46:	f001 f9f0 	bl	800322a <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	200009b4 	.word	0x200009b4

08001e54 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001e58:	4802      	ldr	r0, [pc, #8]	@ (8001e64 <I2C1_ER_IRQHandler+0x10>)
 8001e5a:	f001 fb39 	bl	80034d0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	200009b4 	.word	0x200009b4

08001e68 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001e6c:	4802      	ldr	r0, [pc, #8]	@ (8001e78 <DMA2_Stream1_IRQHandler+0x10>)
 8001e6e:	f000 fb11 	bl	8002494 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000a50 	.word	0x20000a50

08001e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e80:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <SystemInit+0x20>)
 8001e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e86:	4a05      	ldr	r2, [pc, #20]	@ (8001e9c <SystemInit+0x20>)
 8001e88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ea0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ed8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ea4:	f7ff ffea 	bl	8001e7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ea8:	480c      	ldr	r0, [pc, #48]	@ (8001edc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001eaa:	490d      	ldr	r1, [pc, #52]	@ (8001ee0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001eac:	4a0d      	ldr	r2, [pc, #52]	@ (8001ee4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eb0:	e002      	b.n	8001eb8 <LoopCopyDataInit>

08001eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eb6:	3304      	adds	r3, #4

08001eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ebc:	d3f9      	bcc.n	8001eb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ec0:	4c0a      	ldr	r4, [pc, #40]	@ (8001eec <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ec4:	e001      	b.n	8001eca <LoopFillZerobss>

08001ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ec8:	3204      	adds	r2, #4

08001eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ecc:	d3fb      	bcc.n	8001ec6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001ece:	f004 fe63 	bl	8006b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ed2:	f7ff f9b1 	bl	8001238 <main>
  bx  lr    
 8001ed6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ed8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ee0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001ee4:	08007b58 	.word	0x08007b58
  ldr r2, =_sbss
 8001ee8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001eec:	20000c58 	.word	0x20000c58

08001ef0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ef0:	e7fe      	b.n	8001ef0 <ADC_IRQHandler>
	...

08001ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8001f34 <HAL_Init+0x40>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a0d      	ldr	r2, [pc, #52]	@ (8001f34 <HAL_Init+0x40>)
 8001efe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f04:	4b0b      	ldr	r3, [pc, #44]	@ (8001f34 <HAL_Init+0x40>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a0a      	ldr	r2, [pc, #40]	@ (8001f34 <HAL_Init+0x40>)
 8001f0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f10:	4b08      	ldr	r3, [pc, #32]	@ (8001f34 <HAL_Init+0x40>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a07      	ldr	r2, [pc, #28]	@ (8001f34 <HAL_Init+0x40>)
 8001f16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f1c:	2003      	movs	r0, #3
 8001f1e:	f000 f94f 	bl	80021c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f22:	200f      	movs	r0, #15
 8001f24:	f000 f808 	bl	8001f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f28:	f7ff fdf2 	bl	8001b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40023c00 	.word	0x40023c00

08001f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f40:	4b12      	ldr	r3, [pc, #72]	@ (8001f8c <HAL_InitTick+0x54>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4b12      	ldr	r3, [pc, #72]	@ (8001f90 <HAL_InitTick+0x58>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f56:	4618      	mov	r0, r3
 8001f58:	f000 f967 	bl	800222a <HAL_SYSTICK_Config>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e00e      	b.n	8001f84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b0f      	cmp	r3, #15
 8001f6a:	d80a      	bhi.n	8001f82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	f04f 30ff 	mov.w	r0, #4294967295
 8001f74:	f000 f92f 	bl	80021d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f78:	4a06      	ldr	r2, [pc, #24]	@ (8001f94 <HAL_InitTick+0x5c>)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	e000      	b.n	8001f84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20000000 	.word	0x20000000
 8001f90:	20000008 	.word	0x20000008
 8001f94:	20000004 	.word	0x20000004

08001f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f9c:	4b06      	ldr	r3, [pc, #24]	@ (8001fb8 <HAL_IncTick+0x20>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4b06      	ldr	r3, [pc, #24]	@ (8001fbc <HAL_IncTick+0x24>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	4a04      	ldr	r2, [pc, #16]	@ (8001fbc <HAL_IncTick+0x24>)
 8001faa:	6013      	str	r3, [r2, #0]
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	20000008 	.word	0x20000008
 8001fbc:	20000b1c 	.word	0x20000b1c

08001fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fc4:	4b03      	ldr	r3, [pc, #12]	@ (8001fd4 <HAL_GetTick+0x14>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	20000b1c 	.word	0x20000b1c

08001fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fe0:	f7ff ffee 	bl	8001fc0 <HAL_GetTick>
 8001fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff0:	d005      	beq.n	8001ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800201c <HAL_Delay+0x44>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ffe:	bf00      	nop
 8002000:	f7ff ffde 	bl	8001fc0 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	429a      	cmp	r2, r3
 800200e:	d8f7      	bhi.n	8002000 <HAL_Delay+0x28>
  {
  }
}
 8002010:	bf00      	nop
 8002012:	bf00      	nop
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000008 	.word	0x20000008

08002020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002030:	4b0c      	ldr	r3, [pc, #48]	@ (8002064 <__NVIC_SetPriorityGrouping+0x44>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800203c:	4013      	ands	r3, r2
 800203e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002048:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800204c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002052:	4a04      	ldr	r2, [pc, #16]	@ (8002064 <__NVIC_SetPriorityGrouping+0x44>)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	60d3      	str	r3, [r2, #12]
}
 8002058:	bf00      	nop
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800206c:	4b04      	ldr	r3, [pc, #16]	@ (8002080 <__NVIC_GetPriorityGrouping+0x18>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	0a1b      	lsrs	r3, r3, #8
 8002072:	f003 0307 	and.w	r3, r3, #7
}
 8002076:	4618      	mov	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800208e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002092:	2b00      	cmp	r3, #0
 8002094:	db0b      	blt.n	80020ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	f003 021f 	and.w	r2, r3, #31
 800209c:	4907      	ldr	r1, [pc, #28]	@ (80020bc <__NVIC_EnableIRQ+0x38>)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	095b      	lsrs	r3, r3, #5
 80020a4:	2001      	movs	r0, #1
 80020a6:	fa00 f202 	lsl.w	r2, r0, r2
 80020aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	e000e100 	.word	0xe000e100

080020c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	6039      	str	r1, [r7, #0]
 80020ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	db0a      	blt.n	80020ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	490c      	ldr	r1, [pc, #48]	@ (800210c <__NVIC_SetPriority+0x4c>)
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	0112      	lsls	r2, r2, #4
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	440b      	add	r3, r1
 80020e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020e8:	e00a      	b.n	8002100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	4908      	ldr	r1, [pc, #32]	@ (8002110 <__NVIC_SetPriority+0x50>)
 80020f0:	79fb      	ldrb	r3, [r7, #7]
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	3b04      	subs	r3, #4
 80020f8:	0112      	lsls	r2, r2, #4
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	440b      	add	r3, r1
 80020fe:	761a      	strb	r2, [r3, #24]
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	e000e100 	.word	0xe000e100
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002114:	b480      	push	{r7}
 8002116:	b089      	sub	sp, #36	@ 0x24
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	f1c3 0307 	rsb	r3, r3, #7
 800212e:	2b04      	cmp	r3, #4
 8002130:	bf28      	it	cs
 8002132:	2304      	movcs	r3, #4
 8002134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3304      	adds	r3, #4
 800213a:	2b06      	cmp	r3, #6
 800213c:	d902      	bls.n	8002144 <NVIC_EncodePriority+0x30>
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3b03      	subs	r3, #3
 8002142:	e000      	b.n	8002146 <NVIC_EncodePriority+0x32>
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002148:	f04f 32ff 	mov.w	r2, #4294967295
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43da      	mvns	r2, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	401a      	ands	r2, r3
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800215c:	f04f 31ff 	mov.w	r1, #4294967295
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	fa01 f303 	lsl.w	r3, r1, r3
 8002166:	43d9      	mvns	r1, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800216c:	4313      	orrs	r3, r2
         );
}
 800216e:	4618      	mov	r0, r3
 8002170:	3724      	adds	r7, #36	@ 0x24
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
	...

0800217c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3b01      	subs	r3, #1
 8002188:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800218c:	d301      	bcc.n	8002192 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800218e:	2301      	movs	r3, #1
 8002190:	e00f      	b.n	80021b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002192:	4a0a      	ldr	r2, [pc, #40]	@ (80021bc <SysTick_Config+0x40>)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3b01      	subs	r3, #1
 8002198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800219a:	210f      	movs	r1, #15
 800219c:	f04f 30ff 	mov.w	r0, #4294967295
 80021a0:	f7ff ff8e 	bl	80020c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021a4:	4b05      	ldr	r3, [pc, #20]	@ (80021bc <SysTick_Config+0x40>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021aa:	4b04      	ldr	r3, [pc, #16]	@ (80021bc <SysTick_Config+0x40>)
 80021ac:	2207      	movs	r2, #7
 80021ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	e000e010 	.word	0xe000e010

080021c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7ff ff29 	bl	8002020 <__NVIC_SetPriorityGrouping>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b086      	sub	sp, #24
 80021da:	af00      	add	r7, sp, #0
 80021dc:	4603      	mov	r3, r0
 80021de:	60b9      	str	r1, [r7, #8]
 80021e0:	607a      	str	r2, [r7, #4]
 80021e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021e8:	f7ff ff3e 	bl	8002068 <__NVIC_GetPriorityGrouping>
 80021ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	68b9      	ldr	r1, [r7, #8]
 80021f2:	6978      	ldr	r0, [r7, #20]
 80021f4:	f7ff ff8e 	bl	8002114 <NVIC_EncodePriority>
 80021f8:	4602      	mov	r2, r0
 80021fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021fe:	4611      	mov	r1, r2
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff ff5d 	bl	80020c0 <__NVIC_SetPriority>
}
 8002206:	bf00      	nop
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	4603      	mov	r3, r0
 8002216:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff ff31 	bl	8002084 <__NVIC_EnableIRQ>
}
 8002222:	bf00      	nop
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b082      	sub	sp, #8
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff ffa2 	bl	800217c <SysTick_Config>
 8002238:	4603      	mov	r3, r0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002250:	f7ff feb6 	bl	8001fc0 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e099      	b.n	8002394 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2202      	movs	r2, #2
 8002264:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0201 	bic.w	r2, r2, #1
 800227e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002280:	e00f      	b.n	80022a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002282:	f7ff fe9d 	bl	8001fc0 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b05      	cmp	r3, #5
 800228e:	d908      	bls.n	80022a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2220      	movs	r2, #32
 8002294:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2203      	movs	r2, #3
 800229a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e078      	b.n	8002394 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1e8      	bne.n	8002282 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	4b38      	ldr	r3, [pc, #224]	@ (800239c <HAL_DMA_Init+0x158>)
 80022bc:	4013      	ands	r3, r2
 80022be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f8:	2b04      	cmp	r3, #4
 80022fa:	d107      	bne.n	800230c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002304:	4313      	orrs	r3, r2
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	4313      	orrs	r3, r2
 800230a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	f023 0307 	bic.w	r3, r3, #7
 8002322:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	4313      	orrs	r3, r2
 800232c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002332:	2b04      	cmp	r3, #4
 8002334:	d117      	bne.n	8002366 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	4313      	orrs	r3, r2
 800233e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00e      	beq.n	8002366 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 fa9f 	bl	800288c <DMA_CheckFifoParam>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d008      	beq.n	8002366 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2240      	movs	r2, #64	@ 0x40
 8002358:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002362:	2301      	movs	r3, #1
 8002364:	e016      	b.n	8002394 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 fa56 	bl	8002820 <DMA_CalcBaseAndBitshift>
 8002374:	4603      	mov	r3, r0
 8002376:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800237c:	223f      	movs	r2, #63	@ 0x3f
 800237e:	409a      	lsls	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	f010803f 	.word	0xf010803f

080023a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
 80023ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023ae:	2300      	movs	r3, #0
 80023b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d101      	bne.n	80023c6 <HAL_DMA_Start_IT+0x26>
 80023c2:	2302      	movs	r3, #2
 80023c4:	e040      	b.n	8002448 <HAL_DMA_Start_IT+0xa8>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d12f      	bne.n	800243a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2202      	movs	r2, #2
 80023de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	68b9      	ldr	r1, [r7, #8]
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 f9e8 	bl	80027c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023f8:	223f      	movs	r2, #63	@ 0x3f
 80023fa:	409a      	lsls	r2, r3
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f042 0216 	orr.w	r2, r2, #22
 800240e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002414:	2b00      	cmp	r3, #0
 8002416:	d007      	beq.n	8002428 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0208 	orr.w	r2, r2, #8
 8002426:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0201 	orr.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	e005      	b.n	8002446 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002442:	2302      	movs	r3, #2
 8002444:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002446:	7dfb      	ldrb	r3, [r7, #23]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d004      	beq.n	800246e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2280      	movs	r2, #128	@ 0x80
 8002468:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e00c      	b.n	8002488 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2205      	movs	r2, #5
 8002472:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0201 	bic.w	r2, r2, #1
 8002484:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024a0:	4b8e      	ldr	r3, [pc, #568]	@ (80026dc <HAL_DMA_IRQHandler+0x248>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a8e      	ldr	r2, [pc, #568]	@ (80026e0 <HAL_DMA_IRQHandler+0x24c>)
 80024a6:	fba2 2303 	umull	r2, r3, r2, r3
 80024aa:	0a9b      	lsrs	r3, r3, #10
 80024ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024be:	2208      	movs	r2, #8
 80024c0:	409a      	lsls	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	4013      	ands	r3, r2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d01a      	beq.n	8002500 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d013      	beq.n	8002500 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0204 	bic.w	r2, r2, #4
 80024e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ec:	2208      	movs	r2, #8
 80024ee:	409a      	lsls	r2, r3
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f8:	f043 0201 	orr.w	r2, r3, #1
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002504:	2201      	movs	r2, #1
 8002506:	409a      	lsls	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4013      	ands	r3, r2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d012      	beq.n	8002536 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00b      	beq.n	8002536 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002522:	2201      	movs	r2, #1
 8002524:	409a      	lsls	r2, r3
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800252e:	f043 0202 	orr.w	r2, r3, #2
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800253a:	2204      	movs	r2, #4
 800253c:	409a      	lsls	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4013      	ands	r3, r2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d012      	beq.n	800256c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00b      	beq.n	800256c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002558:	2204      	movs	r2, #4
 800255a:	409a      	lsls	r2, r3
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002564:	f043 0204 	orr.w	r2, r3, #4
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002570:	2210      	movs	r2, #16
 8002572:	409a      	lsls	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4013      	ands	r3, r2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d043      	beq.n	8002604 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b00      	cmp	r3, #0
 8002588:	d03c      	beq.n	8002604 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800258e:	2210      	movs	r2, #16
 8002590:	409a      	lsls	r2, r3
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d018      	beq.n	80025d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d108      	bne.n	80025c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d024      	beq.n	8002604 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	4798      	blx	r3
 80025c2:	e01f      	b.n	8002604 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d01b      	beq.n	8002604 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	4798      	blx	r3
 80025d4:	e016      	b.n	8002604 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d107      	bne.n	80025f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0208 	bic.w	r2, r2, #8
 80025f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002608:	2220      	movs	r2, #32
 800260a:	409a      	lsls	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4013      	ands	r3, r2
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 808f 	beq.w	8002734 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0310 	and.w	r3, r3, #16
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 8087 	beq.w	8002734 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800262a:	2220      	movs	r2, #32
 800262c:	409a      	lsls	r2, r3
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b05      	cmp	r3, #5
 800263c:	d136      	bne.n	80026ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0216 	bic.w	r2, r2, #22
 800264c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695a      	ldr	r2, [r3, #20]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800265c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002662:	2b00      	cmp	r3, #0
 8002664:	d103      	bne.n	800266e <HAL_DMA_IRQHandler+0x1da>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800266a:	2b00      	cmp	r3, #0
 800266c:	d007      	beq.n	800267e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0208 	bic.w	r2, r2, #8
 800267c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002682:	223f      	movs	r2, #63	@ 0x3f
 8002684:	409a      	lsls	r2, r3
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d07e      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	4798      	blx	r3
        }
        return;
 80026aa:	e079      	b.n	80027a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d01d      	beq.n	80026f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10d      	bne.n	80026e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d031      	beq.n	8002734 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	4798      	blx	r3
 80026d8:	e02c      	b.n	8002734 <HAL_DMA_IRQHandler+0x2a0>
 80026da:	bf00      	nop
 80026dc:	20000000 	.word	0x20000000
 80026e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d023      	beq.n	8002734 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	4798      	blx	r3
 80026f4:	e01e      	b.n	8002734 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10f      	bne.n	8002724 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0210 	bic.w	r2, r2, #16
 8002712:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002738:	2b00      	cmp	r3, #0
 800273a:	d032      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d022      	beq.n	800278e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2205      	movs	r2, #5
 800274c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0201 	bic.w	r2, r2, #1
 800275e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	3301      	adds	r3, #1
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	429a      	cmp	r2, r3
 800276a:	d307      	bcc.n	800277c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f2      	bne.n	8002760 <HAL_DMA_IRQHandler+0x2cc>
 800277a:	e000      	b.n	800277e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800277c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002792:	2b00      	cmp	r3, #0
 8002794:	d005      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	4798      	blx	r3
 800279e:	e000      	b.n	80027a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80027a0:	bf00      	nop
    }
  }
}
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027b6:	b2db      	uxtb	r3, r3
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
 80027d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80027e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	2b40      	cmp	r3, #64	@ 0x40
 80027f0:	d108      	bne.n	8002804 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002802:	e007      	b.n	8002814 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	60da      	str	r2, [r3, #12]
}
 8002814:	bf00      	nop
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	3b10      	subs	r3, #16
 8002830:	4a14      	ldr	r2, [pc, #80]	@ (8002884 <DMA_CalcBaseAndBitshift+0x64>)
 8002832:	fba2 2303 	umull	r2, r3, r2, r3
 8002836:	091b      	lsrs	r3, r3, #4
 8002838:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800283a:	4a13      	ldr	r2, [pc, #76]	@ (8002888 <DMA_CalcBaseAndBitshift+0x68>)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4413      	add	r3, r2
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	461a      	mov	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2b03      	cmp	r3, #3
 800284c:	d909      	bls.n	8002862 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002856:	f023 0303 	bic.w	r3, r3, #3
 800285a:	1d1a      	adds	r2, r3, #4
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002860:	e007      	b.n	8002872 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800286a:	f023 0303 	bic.w	r3, r3, #3
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002876:	4618      	mov	r0, r3
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	aaaaaaab 	.word	0xaaaaaaab
 8002888:	08007b0c 	.word	0x08007b0c

0800288c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002894:	2300      	movs	r3, #0
 8002896:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800289c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d11f      	bne.n	80028e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2b03      	cmp	r3, #3
 80028aa:	d856      	bhi.n	800295a <DMA_CheckFifoParam+0xce>
 80028ac:	a201      	add	r2, pc, #4	@ (adr r2, 80028b4 <DMA_CheckFifoParam+0x28>)
 80028ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b2:	bf00      	nop
 80028b4:	080028c5 	.word	0x080028c5
 80028b8:	080028d7 	.word	0x080028d7
 80028bc:	080028c5 	.word	0x080028c5
 80028c0:	0800295b 	.word	0x0800295b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d046      	beq.n	800295e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028d4:	e043      	b.n	800295e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028da:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80028de:	d140      	bne.n	8002962 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028e4:	e03d      	b.n	8002962 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028ee:	d121      	bne.n	8002934 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2b03      	cmp	r3, #3
 80028f4:	d837      	bhi.n	8002966 <DMA_CheckFifoParam+0xda>
 80028f6:	a201      	add	r2, pc, #4	@ (adr r2, 80028fc <DMA_CheckFifoParam+0x70>)
 80028f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fc:	0800290d 	.word	0x0800290d
 8002900:	08002913 	.word	0x08002913
 8002904:	0800290d 	.word	0x0800290d
 8002908:	08002925 	.word	0x08002925
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	73fb      	strb	r3, [r7, #15]
      break;
 8002910:	e030      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002916:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d025      	beq.n	800296a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002922:	e022      	b.n	800296a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002928:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800292c:	d11f      	bne.n	800296e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002932:	e01c      	b.n	800296e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2b02      	cmp	r3, #2
 8002938:	d903      	bls.n	8002942 <DMA_CheckFifoParam+0xb6>
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2b03      	cmp	r3, #3
 800293e:	d003      	beq.n	8002948 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002940:	e018      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	73fb      	strb	r3, [r7, #15]
      break;
 8002946:	e015      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00e      	beq.n	8002972 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	73fb      	strb	r3, [r7, #15]
      break;
 8002958:	e00b      	b.n	8002972 <DMA_CheckFifoParam+0xe6>
      break;
 800295a:	bf00      	nop
 800295c:	e00a      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
      break;
 800295e:	bf00      	nop
 8002960:	e008      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
      break;
 8002962:	bf00      	nop
 8002964:	e006      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
      break;
 8002966:	bf00      	nop
 8002968:	e004      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
      break;
 800296a:	bf00      	nop
 800296c:	e002      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
      break;   
 800296e:	bf00      	nop
 8002970:	e000      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
      break;
 8002972:	bf00      	nop
    }
  } 
  
  return status; 
 8002974:	7bfb      	ldrb	r3, [r7, #15]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop

08002984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002984:	b480      	push	{r7}
 8002986:	b089      	sub	sp, #36	@ 0x24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800298e:	2300      	movs	r3, #0
 8002990:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002992:	2300      	movs	r3, #0
 8002994:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002996:	2300      	movs	r3, #0
 8002998:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800299a:	2300      	movs	r3, #0
 800299c:	61fb      	str	r3, [r7, #28]
 800299e:	e165      	b.n	8002c6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029a0:	2201      	movs	r2, #1
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	4013      	ands	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	f040 8154 	bne.w	8002c66 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d005      	beq.n	80029d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d130      	bne.n	8002a38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	2203      	movs	r2, #3
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	43db      	mvns	r3, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4013      	ands	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	68da      	ldr	r2, [r3, #12]
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	091b      	lsrs	r3, r3, #4
 8002a22:	f003 0201 	and.w	r2, r3, #1
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	2b03      	cmp	r3, #3
 8002a42:	d017      	beq.n	8002a74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	2203      	movs	r2, #3
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d123      	bne.n	8002ac8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	08da      	lsrs	r2, r3, #3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3208      	adds	r2, #8
 8002a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	220f      	movs	r2, #15
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	691a      	ldr	r2, [r3, #16]
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	08da      	lsrs	r2, r3, #3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	3208      	adds	r2, #8
 8002ac2:	69b9      	ldr	r1, [r7, #24]
 8002ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	2203      	movs	r2, #3
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4013      	ands	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f003 0203 	and.w	r2, r3, #3
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 80ae 	beq.w	8002c66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	4b5d      	ldr	r3, [pc, #372]	@ (8002c84 <HAL_GPIO_Init+0x300>)
 8002b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b12:	4a5c      	ldr	r2, [pc, #368]	@ (8002c84 <HAL_GPIO_Init+0x300>)
 8002b14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b18:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b1a:	4b5a      	ldr	r3, [pc, #360]	@ (8002c84 <HAL_GPIO_Init+0x300>)
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b26:	4a58      	ldr	r2, [pc, #352]	@ (8002c88 <HAL_GPIO_Init+0x304>)
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	089b      	lsrs	r3, r3, #2
 8002b2c:	3302      	adds	r3, #2
 8002b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	220f      	movs	r2, #15
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	43db      	mvns	r3, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4013      	ands	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a4f      	ldr	r2, [pc, #316]	@ (8002c8c <HAL_GPIO_Init+0x308>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d025      	beq.n	8002b9e <HAL_GPIO_Init+0x21a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a4e      	ldr	r2, [pc, #312]	@ (8002c90 <HAL_GPIO_Init+0x30c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d01f      	beq.n	8002b9a <HAL_GPIO_Init+0x216>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a4d      	ldr	r2, [pc, #308]	@ (8002c94 <HAL_GPIO_Init+0x310>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d019      	beq.n	8002b96 <HAL_GPIO_Init+0x212>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a4c      	ldr	r2, [pc, #304]	@ (8002c98 <HAL_GPIO_Init+0x314>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d013      	beq.n	8002b92 <HAL_GPIO_Init+0x20e>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a4b      	ldr	r2, [pc, #300]	@ (8002c9c <HAL_GPIO_Init+0x318>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d00d      	beq.n	8002b8e <HAL_GPIO_Init+0x20a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a4a      	ldr	r2, [pc, #296]	@ (8002ca0 <HAL_GPIO_Init+0x31c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d007      	beq.n	8002b8a <HAL_GPIO_Init+0x206>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a49      	ldr	r2, [pc, #292]	@ (8002ca4 <HAL_GPIO_Init+0x320>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d101      	bne.n	8002b86 <HAL_GPIO_Init+0x202>
 8002b82:	2306      	movs	r3, #6
 8002b84:	e00c      	b.n	8002ba0 <HAL_GPIO_Init+0x21c>
 8002b86:	2307      	movs	r3, #7
 8002b88:	e00a      	b.n	8002ba0 <HAL_GPIO_Init+0x21c>
 8002b8a:	2305      	movs	r3, #5
 8002b8c:	e008      	b.n	8002ba0 <HAL_GPIO_Init+0x21c>
 8002b8e:	2304      	movs	r3, #4
 8002b90:	e006      	b.n	8002ba0 <HAL_GPIO_Init+0x21c>
 8002b92:	2303      	movs	r3, #3
 8002b94:	e004      	b.n	8002ba0 <HAL_GPIO_Init+0x21c>
 8002b96:	2302      	movs	r3, #2
 8002b98:	e002      	b.n	8002ba0 <HAL_GPIO_Init+0x21c>
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e000      	b.n	8002ba0 <HAL_GPIO_Init+0x21c>
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	69fa      	ldr	r2, [r7, #28]
 8002ba2:	f002 0203 	and.w	r2, r2, #3
 8002ba6:	0092      	lsls	r2, r2, #2
 8002ba8:	4093      	lsls	r3, r2
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bb0:	4935      	ldr	r1, [pc, #212]	@ (8002c88 <HAL_GPIO_Init+0x304>)
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	089b      	lsrs	r3, r3, #2
 8002bb6:	3302      	adds	r3, #2
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bbe:	4b3a      	ldr	r3, [pc, #232]	@ (8002ca8 <HAL_GPIO_Init+0x324>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002be2:	4a31      	ldr	r2, [pc, #196]	@ (8002ca8 <HAL_GPIO_Init+0x324>)
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002be8:	4b2f      	ldr	r3, [pc, #188]	@ (8002ca8 <HAL_GPIO_Init+0x324>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c0c:	4a26      	ldr	r2, [pc, #152]	@ (8002ca8 <HAL_GPIO_Init+0x324>)
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c12:	4b25      	ldr	r3, [pc, #148]	@ (8002ca8 <HAL_GPIO_Init+0x324>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c36:	4a1c      	ldr	r2, [pc, #112]	@ (8002ca8 <HAL_GPIO_Init+0x324>)
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ca8 <HAL_GPIO_Init+0x324>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	43db      	mvns	r3, r3
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c60:	4a11      	ldr	r2, [pc, #68]	@ (8002ca8 <HAL_GPIO_Init+0x324>)
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	61fb      	str	r3, [r7, #28]
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	2b0f      	cmp	r3, #15
 8002c70:	f67f ae96 	bls.w	80029a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c74:	bf00      	nop
 8002c76:	bf00      	nop
 8002c78:	3724      	adds	r7, #36	@ 0x24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	40023800 	.word	0x40023800
 8002c88:	40013800 	.word	0x40013800
 8002c8c:	40020000 	.word	0x40020000
 8002c90:	40020400 	.word	0x40020400
 8002c94:	40020800 	.word	0x40020800
 8002c98:	40020c00 	.word	0x40020c00
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	40021400 	.word	0x40021400
 8002ca4:	40021800 	.word	0x40021800
 8002ca8:	40013c00 	.word	0x40013c00

08002cac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	691a      	ldr	r2, [r3, #16]
 8002cbc:	887b      	ldrh	r3, [r7, #2]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d002      	beq.n	8002cca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	73fb      	strb	r3, [r7, #15]
 8002cc8:	e001      	b.n	8002cce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3714      	adds	r7, #20
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	807b      	strh	r3, [r7, #2]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cec:	787b      	ldrb	r3, [r7, #1]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cf2:	887a      	ldrh	r2, [r7, #2]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cf8:	e003      	b.n	8002d02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cfa:	887b      	ldrh	r3, [r7, #2]
 8002cfc:	041a      	lsls	r2, r3, #16
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	619a      	str	r2, [r3, #24]
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
	...

08002d10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	4603      	mov	r3, r0
 8002d18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d1a:	4b08      	ldr	r3, [pc, #32]	@ (8002d3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d1c:	695a      	ldr	r2, [r3, #20]
 8002d1e:	88fb      	ldrh	r3, [r7, #6]
 8002d20:	4013      	ands	r3, r2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d006      	beq.n	8002d34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d26:	4a05      	ldr	r2, [pc, #20]	@ (8002d3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d28:	88fb      	ldrh	r3, [r7, #6]
 8002d2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d2c:	88fb      	ldrh	r3, [r7, #6]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fe fd8a 	bl	8001848 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d34:	bf00      	nop
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40013c00 	.word	0x40013c00

08002d40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e12b      	b.n	8002faa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d106      	bne.n	8002d6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7fe fefa 	bl	8001b60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2224      	movs	r2, #36	@ 0x24
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0201 	bic.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002da2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002da4:	f001 ffda 	bl	8004d5c <HAL_RCC_GetPCLK1Freq>
 8002da8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	4a81      	ldr	r2, [pc, #516]	@ (8002fb4 <HAL_I2C_Init+0x274>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d807      	bhi.n	8002dc4 <HAL_I2C_Init+0x84>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4a80      	ldr	r2, [pc, #512]	@ (8002fb8 <HAL_I2C_Init+0x278>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	bf94      	ite	ls
 8002dbc:	2301      	movls	r3, #1
 8002dbe:	2300      	movhi	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	e006      	b.n	8002dd2 <HAL_I2C_Init+0x92>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4a7d      	ldr	r2, [pc, #500]	@ (8002fbc <HAL_I2C_Init+0x27c>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	bf94      	ite	ls
 8002dcc:	2301      	movls	r3, #1
 8002dce:	2300      	movhi	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e0e7      	b.n	8002faa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	4a78      	ldr	r2, [pc, #480]	@ (8002fc0 <HAL_I2C_Init+0x280>)
 8002dde:	fba2 2303 	umull	r2, r3, r2, r3
 8002de2:	0c9b      	lsrs	r3, r3, #18
 8002de4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	4a6a      	ldr	r2, [pc, #424]	@ (8002fb4 <HAL_I2C_Init+0x274>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d802      	bhi.n	8002e14 <HAL_I2C_Init+0xd4>
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	3301      	adds	r3, #1
 8002e12:	e009      	b.n	8002e28 <HAL_I2C_Init+0xe8>
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002e1a:	fb02 f303 	mul.w	r3, r2, r3
 8002e1e:	4a69      	ldr	r2, [pc, #420]	@ (8002fc4 <HAL_I2C_Init+0x284>)
 8002e20:	fba2 2303 	umull	r2, r3, r2, r3
 8002e24:	099b      	lsrs	r3, r3, #6
 8002e26:	3301      	adds	r3, #1
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6812      	ldr	r2, [r2, #0]
 8002e2c:	430b      	orrs	r3, r1
 8002e2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002e3a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	495c      	ldr	r1, [pc, #368]	@ (8002fb4 <HAL_I2C_Init+0x274>)
 8002e44:	428b      	cmp	r3, r1
 8002e46:	d819      	bhi.n	8002e7c <HAL_I2C_Init+0x13c>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	1e59      	subs	r1, r3, #1
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e56:	1c59      	adds	r1, r3, #1
 8002e58:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002e5c:	400b      	ands	r3, r1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00a      	beq.n	8002e78 <HAL_I2C_Init+0x138>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	1e59      	subs	r1, r3, #1
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e70:	3301      	adds	r3, #1
 8002e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e76:	e051      	b.n	8002f1c <HAL_I2C_Init+0x1dc>
 8002e78:	2304      	movs	r3, #4
 8002e7a:	e04f      	b.n	8002f1c <HAL_I2C_Init+0x1dc>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d111      	bne.n	8002ea8 <HAL_I2C_Init+0x168>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	1e58      	subs	r0, r3, #1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6859      	ldr	r1, [r3, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	440b      	add	r3, r1
 8002e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e96:	3301      	adds	r3, #1
 8002e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	bf0c      	ite	eq
 8002ea0:	2301      	moveq	r3, #1
 8002ea2:	2300      	movne	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	e012      	b.n	8002ece <HAL_I2C_Init+0x18e>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	1e58      	subs	r0, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6859      	ldr	r1, [r3, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	0099      	lsls	r1, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	bf0c      	ite	eq
 8002ec8:	2301      	moveq	r3, #1
 8002eca:	2300      	movne	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <HAL_I2C_Init+0x196>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e022      	b.n	8002f1c <HAL_I2C_Init+0x1dc>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10e      	bne.n	8002efc <HAL_I2C_Init+0x1bc>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	1e58      	subs	r0, r3, #1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6859      	ldr	r1, [r3, #4]
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	440b      	add	r3, r1
 8002eec:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002efa:	e00f      	b.n	8002f1c <HAL_I2C_Init+0x1dc>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	1e58      	subs	r0, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6859      	ldr	r1, [r3, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	0099      	lsls	r1, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f12:	3301      	adds	r3, #1
 8002f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	6809      	ldr	r1, [r1, #0]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69da      	ldr	r2, [r3, #28]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002f4a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6911      	ldr	r1, [r2, #16]
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	68d2      	ldr	r2, [r2, #12]
 8002f56:	4311      	orrs	r1, r2
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	430b      	orrs	r3, r1
 8002f5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695a      	ldr	r2, [r3, #20]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2220      	movs	r2, #32
 8002f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	000186a0 	.word	0x000186a0
 8002fb8:	001e847f 	.word	0x001e847f
 8002fbc:	003d08ff 	.word	0x003d08ff
 8002fc0:	431bde83 	.word	0x431bde83
 8002fc4:	10624dd3 	.word	0x10624dd3

08002fc8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fda:	2b80      	cmp	r3, #128	@ 0x80
 8002fdc:	d103      	bne.n	8002fe6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	611a      	str	r2, [r3, #16]
  }
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b087      	sub	sp, #28
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	60f8      	str	r0, [r7, #12]
 8002ffa:	60b9      	str	r1, [r7, #8]
 8002ffc:	603b      	str	r3, [r7, #0]
 8002ffe:	4613      	mov	r3, r2
 8003000:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003008:	b2db      	uxtb	r3, r3
 800300a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800300e:	2b28      	cmp	r3, #40	@ 0x28
 8003010:	d15b      	bne.n	80030ca <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d002      	beq.n	800301e <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 8003018:	88fb      	ldrh	r3, [r7, #6]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e054      	b.n	80030cc <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 800302c:	2302      	movs	r3, #2
 800302e:	e04d      	b.n	80030cc <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b01      	cmp	r3, #1
 8003044:	d007      	beq.n	8003056 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f042 0201 	orr.w	r2, r2, #1
 8003054:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003064:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2229      	movs	r2, #41	@ 0x29
 800306a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2220      	movs	r2, #32
 8003072:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	88fa      	ldrh	r2, [r7, #6]
 8003086:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800308c:	b29a      	uxth	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	617b      	str	r3, [r7, #20]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	617b      	str	r3, [r7, #20]
 80030ac:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80030c4:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80030c6:	2300      	movs	r3, #0
 80030c8:	e000      	b.n	80030cc <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 80030ca:	2302      	movs	r3, #2
  }
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	371c      	adds	r7, #28
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80030d8:	b480      	push	{r7}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	603b      	str	r3, [r7, #0]
 80030e4:	4613      	mov	r3, r2
 80030e6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80030f4:	2b28      	cmp	r3, #40	@ 0x28
 80030f6:	d15b      	bne.n	80031b0 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d002      	beq.n	8003104 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 80030fe:	88fb      	ldrh	r3, [r7, #6]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e054      	b.n	80031b2 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8003112:	2302      	movs	r3, #2
 8003114:	e04d      	b.n	80031b2 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b01      	cmp	r3, #1
 800312a:	d007      	beq.n	800313c <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0201 	orr.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800314a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	222a      	movs	r2, #42	@ 0x2a
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2220      	movs	r2, #32
 8003158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	88fa      	ldrh	r2, [r7, #6]
 800316c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003172:	b29a      	uxth	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800317e:	2300      	movs	r3, #0
 8003180:	617b      	str	r3, [r7, #20]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	617b      	str	r3, [r7, #20]
 8003192:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80031aa:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80031ac:	2300      	movs	r3, #0
 80031ae:	e000      	b.n	80031b2 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 80031b0:	2302      	movs	r3, #2
  }
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	371c      	adds	r7, #28
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b20      	cmp	r3, #32
 80031d0:	d124      	bne.n	800321c <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2228      	movs	r2, #40	@ 0x28
 80031d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d007      	beq.n	80031f8 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0201 	orr.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003206:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003216:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003218:	2300      	movs	r3, #0
 800321a:	e000      	b.n	800321e <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800321c:	2302      	movs	r3, #2
  }
}
 800321e:	4618      	mov	r0, r3
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b088      	sub	sp, #32
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003232:	2300      	movs	r3, #0
 8003234:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003242:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800324a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003252:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003254:	7bfb      	ldrb	r3, [r7, #15]
 8003256:	2b10      	cmp	r3, #16
 8003258:	d003      	beq.n	8003262 <HAL_I2C_EV_IRQHandler+0x38>
 800325a:	7bfb      	ldrb	r3, [r7, #15]
 800325c:	2b40      	cmp	r3, #64	@ 0x40
 800325e:	f040 80b1 	bne.w	80033c4 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b00      	cmp	r3, #0
 800327a:	d10d      	bne.n	8003298 <HAL_I2C_EV_IRQHandler+0x6e>
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003282:	d003      	beq.n	800328c <HAL_I2C_EV_IRQHandler+0x62>
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800328a:	d101      	bne.n	8003290 <HAL_I2C_EV_IRQHandler+0x66>
 800328c:	2301      	movs	r3, #1
 800328e:	e000      	b.n	8003292 <HAL_I2C_EV_IRQHandler+0x68>
 8003290:	2300      	movs	r3, #0
 8003292:	2b01      	cmp	r3, #1
 8003294:	f000 8114 	beq.w	80034c0 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00b      	beq.n	80032ba <HAL_I2C_EV_IRQHandler+0x90>
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d006      	beq.n	80032ba <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f001 fc47 	bl	8004b40 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 fd4c 	bl	8003d50 <I2C_Master_SB>
 80032b8:	e083      	b.n	80033c2 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	f003 0308 	and.w	r3, r3, #8
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d008      	beq.n	80032d6 <HAL_I2C_EV_IRQHandler+0xac>
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 fdc4 	bl	8003e5c <I2C_Master_ADD10>
 80032d4:	e075      	b.n	80033c2 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d008      	beq.n	80032f2 <HAL_I2C_EV_IRQHandler+0xc8>
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 fde0 	bl	8003eb0 <I2C_Master_ADDR>
 80032f0:	e067      	b.n	80033c2 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d036      	beq.n	800336a <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003306:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800330a:	f000 80db 	beq.w	80034c4 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00d      	beq.n	8003334 <HAL_I2C_EV_IRQHandler+0x10a>
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800331e:	2b00      	cmp	r3, #0
 8003320:	d008      	beq.n	8003334 <HAL_I2C_EV_IRQHandler+0x10a>
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	2b00      	cmp	r3, #0
 800332a:	d103      	bne.n	8003334 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f9ac 	bl	800368a <I2C_MasterTransmit_TXE>
 8003332:	e046      	b.n	80033c2 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 80c2 	beq.w	80034c4 <HAL_I2C_EV_IRQHandler+0x29a>
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 80bc 	beq.w	80034c4 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800334c:	7bbb      	ldrb	r3, [r7, #14]
 800334e:	2b21      	cmp	r3, #33	@ 0x21
 8003350:	d103      	bne.n	800335a <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 fa35 	bl	80037c2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003358:	e0b4      	b.n	80034c4 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800335a:	7bfb      	ldrb	r3, [r7, #15]
 800335c:	2b40      	cmp	r3, #64	@ 0x40
 800335e:	f040 80b1 	bne.w	80034c4 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 faa3 	bl	80038ae <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003368:	e0ac      	b.n	80034c4 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003374:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003378:	f000 80a4 	beq.w	80034c4 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00d      	beq.n	80033a2 <HAL_I2C_EV_IRQHandler+0x178>
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800338c:	2b00      	cmp	r3, #0
 800338e:	d008      	beq.n	80033a2 <HAL_I2C_EV_IRQHandler+0x178>
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	f003 0304 	and.w	r3, r3, #4
 8003396:	2b00      	cmp	r3, #0
 8003398:	d103      	bne.n	80033a2 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 fb1f 	bl	80039de <I2C_MasterReceive_RXNE>
 80033a0:	e00f      	b.n	80033c2 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 808b 	beq.w	80034c4 <HAL_I2C_EV_IRQHandler+0x29a>
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 8085 	beq.w	80034c4 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 fbd7 	bl	8003b6e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033c0:	e080      	b.n	80034c4 <HAL_I2C_EV_IRQHandler+0x29a>
 80033c2:	e07f      	b.n	80034c4 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d004      	beq.n	80033d6 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	61fb      	str	r3, [r7, #28]
 80033d4:	e007      	b.n	80033e6 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d011      	beq.n	8003414 <HAL_I2C_EV_IRQHandler+0x1ea>
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00c      	beq.n	8003414 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800340a:	69b9      	ldr	r1, [r7, #24]
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 ff9e 	bl	800434e <I2C_Slave_ADDR>
 8003412:	e05a      	b.n	80034ca <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	f003 0310 	and.w	r3, r3, #16
 800341a:	2b00      	cmp	r3, #0
 800341c:	d008      	beq.n	8003430 <HAL_I2C_EV_IRQHandler+0x206>
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 ffd9 	bl	80043e0 <I2C_Slave_STOPF>
 800342e:	e04c      	b.n	80034ca <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003430:	7bbb      	ldrb	r3, [r7, #14]
 8003432:	2b21      	cmp	r3, #33	@ 0x21
 8003434:	d002      	beq.n	800343c <HAL_I2C_EV_IRQHandler+0x212>
 8003436:	7bbb      	ldrb	r3, [r7, #14]
 8003438:	2b29      	cmp	r3, #41	@ 0x29
 800343a:	d120      	bne.n	800347e <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00d      	beq.n	8003462 <HAL_I2C_EV_IRQHandler+0x238>
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <HAL_I2C_EV_IRQHandler+0x238>
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f003 0304 	and.w	r3, r3, #4
 8003456:	2b00      	cmp	r3, #0
 8003458:	d103      	bne.n	8003462 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 feb9 	bl	80041d2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003460:	e032      	b.n	80034c8 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b00      	cmp	r3, #0
 800346a:	d02d      	beq.n	80034c8 <HAL_I2C_EV_IRQHandler+0x29e>
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003472:	2b00      	cmp	r3, #0
 8003474:	d028      	beq.n	80034c8 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fee8 	bl	800424c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800347c:	e024      	b.n	80034c8 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00d      	beq.n	80034a4 <HAL_I2C_EV_IRQHandler+0x27a>
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800348e:	2b00      	cmp	r3, #0
 8003490:	d008      	beq.n	80034a4 <HAL_I2C_EV_IRQHandler+0x27a>
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b00      	cmp	r3, #0
 800349a:	d103      	bne.n	80034a4 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 fef6 	bl	800428e <I2C_SlaveReceive_RXNE>
 80034a2:	e012      	b.n	80034ca <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00d      	beq.n	80034ca <HAL_I2C_EV_IRQHandler+0x2a0>
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d008      	beq.n	80034ca <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 ff26 	bl	800430a <I2C_SlaveReceive_BTF>
 80034be:	e004      	b.n	80034ca <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80034c0:	bf00      	nop
 80034c2:	e002      	b.n	80034ca <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034c4:	bf00      	nop
 80034c6:	e000      	b.n	80034ca <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034c8:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80034ca:	3720      	adds	r7, #32
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b08a      	sub	sp, #40	@ 0x28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80034e8:	2300      	movs	r3, #0
 80034ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034f2:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00d      	beq.n	800351a <HAL_I2C_ER_IRQHandler+0x4a>
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003504:	2b00      	cmp	r3, #0
 8003506:	d008      	beq.n	800351a <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350a:	f043 0301 	orr.w	r3, r3, #1
 800350e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003518:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800351a:	6a3b      	ldr	r3, [r7, #32]
 800351c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00d      	beq.n	8003540 <HAL_I2C_ER_IRQHandler+0x70>
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800352a:	2b00      	cmp	r3, #0
 800352c:	d008      	beq.n	8003540 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800352e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003530:	f043 0302 	orr.w	r3, r3, #2
 8003534:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800353e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003546:	2b00      	cmp	r3, #0
 8003548:	d03e      	beq.n	80035c8 <HAL_I2C_ER_IRQHandler+0xf8>
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003550:	2b00      	cmp	r3, #0
 8003552:	d039      	beq.n	80035c8 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8003554:	7efb      	ldrb	r3, [r7, #27]
 8003556:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800355c:	b29b      	uxth	r3, r3
 800355e:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003566:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356c:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800356e:	7ebb      	ldrb	r3, [r7, #26]
 8003570:	2b20      	cmp	r3, #32
 8003572:	d112      	bne.n	800359a <HAL_I2C_ER_IRQHandler+0xca>
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10f      	bne.n	800359a <HAL_I2C_ER_IRQHandler+0xca>
 800357a:	7cfb      	ldrb	r3, [r7, #19]
 800357c:	2b21      	cmp	r3, #33	@ 0x21
 800357e:	d008      	beq.n	8003592 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003580:	7cfb      	ldrb	r3, [r7, #19]
 8003582:	2b29      	cmp	r3, #41	@ 0x29
 8003584:	d005      	beq.n	8003592 <HAL_I2C_ER_IRQHandler+0xc2>
 8003586:	7cfb      	ldrb	r3, [r7, #19]
 8003588:	2b28      	cmp	r3, #40	@ 0x28
 800358a:	d106      	bne.n	800359a <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2b21      	cmp	r3, #33	@ 0x21
 8003590:	d103      	bne.n	800359a <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f001 f854 	bl	8004640 <I2C_Slave_AF>
 8003598:	e016      	b.n	80035c8 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035a2:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80035a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a6:	f043 0304 	orr.w	r3, r3, #4
 80035aa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80035ac:	7efb      	ldrb	r3, [r7, #27]
 80035ae:	2b10      	cmp	r3, #16
 80035b0:	d002      	beq.n	80035b8 <HAL_I2C_ER_IRQHandler+0xe8>
 80035b2:	7efb      	ldrb	r3, [r7, #27]
 80035b4:	2b40      	cmp	r3, #64	@ 0x40
 80035b6:	d107      	bne.n	80035c8 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035c6:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00d      	beq.n	80035ee <HAL_I2C_ER_IRQHandler+0x11e>
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d008      	beq.n	80035ee <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80035dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035de:	f043 0308 	orr.w	r3, r3, #8
 80035e2:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80035ec:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80035ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d008      	beq.n	8003606 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f001 f891 	bl	8004728 <I2C_ITError>
  }
}
 8003606:	bf00      	nop
 8003608:	3728      	adds	r7, #40	@ 0x28
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003616:	bf00      	nop
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800363e:	bf00      	nop
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800367e:	4618      	mov	r0, r3
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b084      	sub	sp, #16
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003698:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036a0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d150      	bne.n	8003752 <I2C_MasterTransmit_TXE+0xc8>
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
 80036b2:	2b21      	cmp	r3, #33	@ 0x21
 80036b4:	d14d      	bne.n	8003752 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d01d      	beq.n	80036f8 <I2C_MasterTransmit_TXE+0x6e>
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2b20      	cmp	r3, #32
 80036c0:	d01a      	beq.n	80036f8 <I2C_MasterTransmit_TXE+0x6e>
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80036c8:	d016      	beq.n	80036f8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80036d8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2211      	movs	r2, #17
 80036de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f7ff ff8c 	bl	800360e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036f6:	e060      	b.n	80037ba <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003706:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003716:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2220      	movs	r2, #32
 8003722:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b40      	cmp	r3, #64	@ 0x40
 8003730:	d107      	bne.n	8003742 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7ff ff7b 	bl	8003636 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003740:	e03b      	b.n	80037ba <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7ff ff5f 	bl	800360e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003750:	e033      	b.n	80037ba <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003752:	7bfb      	ldrb	r3, [r7, #15]
 8003754:	2b21      	cmp	r3, #33	@ 0x21
 8003756:	d005      	beq.n	8003764 <I2C_MasterTransmit_TXE+0xda>
 8003758:	7bbb      	ldrb	r3, [r7, #14]
 800375a:	2b40      	cmp	r3, #64	@ 0x40
 800375c:	d12d      	bne.n	80037ba <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800375e:	7bfb      	ldrb	r3, [r7, #15]
 8003760:	2b22      	cmp	r3, #34	@ 0x22
 8003762:	d12a      	bne.n	80037ba <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003768:	b29b      	uxth	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d108      	bne.n	8003780 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800377c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800377e:	e01c      	b.n	80037ba <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b40      	cmp	r3, #64	@ 0x40
 800378a:	d103      	bne.n	8003794 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f88e 	bl	80038ae <I2C_MemoryTransmit_TXE_BTF>
}
 8003792:	e012      	b.n	80037ba <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003798:	781a      	ldrb	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80037b8:	e7ff      	b.n	80037ba <I2C_MasterTransmit_TXE+0x130>
 80037ba:	bf00      	nop
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b084      	sub	sp, #16
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ce:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b21      	cmp	r3, #33	@ 0x21
 80037da:	d164      	bne.n	80038a6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d012      	beq.n	800380c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ea:	781a      	ldrb	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003800:	b29b      	uxth	r3, r3
 8003802:	3b01      	subs	r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800380a:	e04c      	b.n	80038a6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2b08      	cmp	r3, #8
 8003810:	d01d      	beq.n	800384e <I2C_MasterTransmit_BTF+0x8c>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2b20      	cmp	r3, #32
 8003816:	d01a      	beq.n	800384e <I2C_MasterTransmit_BTF+0x8c>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800381e:	d016      	beq.n	800384e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800382e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2211      	movs	r2, #17
 8003834:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2220      	movs	r2, #32
 8003842:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7ff fee1 	bl	800360e <HAL_I2C_MasterTxCpltCallback>
}
 800384c:	e02b      	b.n	80038a6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800385c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800386c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b40      	cmp	r3, #64	@ 0x40
 8003886:	d107      	bne.n	8003898 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7ff fed0 	bl	8003636 <HAL_I2C_MemTxCpltCallback>
}
 8003896:	e006      	b.n	80038a6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7ff feb4 	bl	800360e <HAL_I2C_MasterTxCpltCallback>
}
 80038a6:	bf00      	nop
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b084      	sub	sp, #16
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038bc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d11d      	bne.n	8003902 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d10b      	bne.n	80038e6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038de:	1c9a      	adds	r2, r3, #2
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80038e4:	e077      	b.n	80039d6 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	121b      	asrs	r3, r3, #8
 80038ee:	b2da      	uxtb	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038fa:	1c5a      	adds	r2, r3, #1
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003900:	e069      	b.n	80039d6 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003906:	2b01      	cmp	r3, #1
 8003908:	d10b      	bne.n	8003922 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800390e:	b2da      	uxtb	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003920:	e059      	b.n	80039d6 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003926:	2b02      	cmp	r3, #2
 8003928:	d152      	bne.n	80039d0 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800392a:	7bfb      	ldrb	r3, [r7, #15]
 800392c:	2b22      	cmp	r3, #34	@ 0x22
 800392e:	d10d      	bne.n	800394c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800393e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003944:	1c5a      	adds	r2, r3, #1
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800394a:	e044      	b.n	80039d6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003950:	b29b      	uxth	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d015      	beq.n	8003982 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	2b21      	cmp	r3, #33	@ 0x21
 800395a:	d112      	bne.n	8003982 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003960:	781a      	ldrb	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396c:	1c5a      	adds	r2, r3, #1
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003976:	b29b      	uxth	r3, r3
 8003978:	3b01      	subs	r3, #1
 800397a:	b29a      	uxth	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003980:	e029      	b.n	80039d6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003986:	b29b      	uxth	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	d124      	bne.n	80039d6 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800398c:	7bfb      	ldrb	r3, [r7, #15]
 800398e:	2b21      	cmp	r3, #33	@ 0x21
 8003990:	d121      	bne.n	80039d6 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80039a0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039b0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f7ff fe34 	bl	8003636 <HAL_I2C_MemTxCpltCallback>
}
 80039ce:	e002      	b.n	80039d6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f7ff faf9 	bl	8002fc8 <I2C_Flush_DR>
}
 80039d6:	bf00      	nop
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b084      	sub	sp, #16
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b22      	cmp	r3, #34	@ 0x22
 80039f0:	f040 80b9 	bne.w	8003b66 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f8:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	2b03      	cmp	r3, #3
 8003a06:	d921      	bls.n	8003a4c <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	691a      	ldr	r2, [r3, #16]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1a:	1c5a      	adds	r2, r3, #1
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	3b01      	subs	r3, #1
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	2b03      	cmp	r3, #3
 8003a36:	f040 8096 	bne.w	8003b66 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685a      	ldr	r2, [r3, #4]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a48:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003a4a:	e08c      	b.n	8003b66 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d07f      	beq.n	8003b54 <I2C_MasterReceive_RXNE+0x176>
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d002      	beq.n	8003a60 <I2C_MasterReceive_RXNE+0x82>
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d179      	bne.n	8003b54 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f001 f83b 	bl	8004adc <I2C_WaitOnSTOPRequestThroughIT>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d14c      	bne.n	8003b06 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a7a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003a8a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	691a      	ldr	r2, [r3, #16]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9e:	1c5a      	adds	r2, r3, #1
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b40      	cmp	r3, #64	@ 0x40
 8003ac4:	d10a      	bne.n	8003adc <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7ff fdb8 	bl	800364a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003ada:	e044      	b.n	8003b66 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2b08      	cmp	r3, #8
 8003ae8:	d002      	beq.n	8003af0 <I2C_MasterReceive_RXNE+0x112>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2b20      	cmp	r3, #32
 8003aee:	d103      	bne.n	8003af8 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	631a      	str	r2, [r3, #48]	@ 0x30
 8003af6:	e002      	b.n	8003afe <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2212      	movs	r2, #18
 8003afc:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7ff fd8f 	bl	8003622 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b04:	e02f      	b.n	8003b66 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b14:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b20:	b2d2      	uxtb	r2, r2
 8003b22:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b28:	1c5a      	adds	r2, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f7fd ffc9 	bl	8001ae4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b52:	e008      	b.n	8003b66 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b62:	605a      	str	r2, [r3, #4]
}
 8003b64:	e7ff      	b.n	8003b66 <I2C_MasterReceive_RXNE+0x188>
 8003b66:	bf00      	nop
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b084      	sub	sp, #16
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b7a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	d11b      	bne.n	8003bbe <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b94:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba0:	b2d2      	uxtb	r2, r2
 8003ba2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba8:	1c5a      	adds	r2, r3, #1
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003bbc:	e0c4      	b.n	8003d48 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	2b03      	cmp	r3, #3
 8003bc6:	d129      	bne.n	8003c1c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bd6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d00a      	beq.n	8003bf4 <I2C_MasterReceive_BTF+0x86>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d007      	beq.n	8003bf4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bf2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	691a      	ldr	r2, [r3, #16]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c06:	1c5a      	adds	r2, r3, #1
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	3b01      	subs	r3, #1
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003c1a:	e095      	b.n	8003d48 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d17d      	bne.n	8003d22 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d002      	beq.n	8003c32 <I2C_MasterReceive_BTF+0xc4>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2b10      	cmp	r3, #16
 8003c30:	d108      	bne.n	8003c44 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	e016      	b.n	8003c72 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d002      	beq.n	8003c50 <I2C_MasterReceive_BTF+0xe2>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d108      	bne.n	8003c62 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	e007      	b.n	8003c72 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c70:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	691a      	ldr	r2, [r3, #16]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	3b01      	subs	r3, #1
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	691a      	ldr	r2, [r3, #16]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003caa:	1c5a      	adds	r2, r3, #1
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003ccc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b40      	cmp	r3, #64	@ 0x40
 8003ce0:	d10a      	bne.n	8003cf8 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7ff fcaa 	bl	800364a <HAL_I2C_MemRxCpltCallback>
}
 8003cf6:	e027      	b.n	8003d48 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b08      	cmp	r3, #8
 8003d04:	d002      	beq.n	8003d0c <I2C_MasterReceive_BTF+0x19e>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2b20      	cmp	r3, #32
 8003d0a:	d103      	bne.n	8003d14 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d12:	e002      	b.n	8003d1a <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2212      	movs	r2, #18
 8003d18:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7ff fc81 	bl	8003622 <HAL_I2C_MasterRxCpltCallback>
}
 8003d20:	e012      	b.n	8003d48 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	691a      	ldr	r2, [r3, #16]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2c:	b2d2      	uxtb	r2, r2
 8003d2e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003d48:	bf00      	nop
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b40      	cmp	r3, #64	@ 0x40
 8003d62:	d117      	bne.n	8003d94 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d109      	bne.n	8003d80 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	461a      	mov	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d7c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003d7e:	e067      	b.n	8003e50 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	f043 0301 	orr.w	r3, r3, #1
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	611a      	str	r2, [r3, #16]
}
 8003d92:	e05d      	b.n	8003e50 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d9c:	d133      	bne.n	8003e06 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b21      	cmp	r3, #33	@ 0x21
 8003da8:	d109      	bne.n	8003dbe <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	461a      	mov	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003dba:	611a      	str	r2, [r3, #16]
 8003dbc:	e008      	b.n	8003dd0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	f043 0301 	orr.w	r3, r3, #1
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d004      	beq.n	8003de2 <I2C_Master_SB+0x92>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d108      	bne.n	8003df4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d032      	beq.n	8003e50 <I2C_Master_SB+0x100>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d02d      	beq.n	8003e50 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e02:	605a      	str	r2, [r3, #4]
}
 8003e04:	e024      	b.n	8003e50 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10e      	bne.n	8003e2c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	11db      	asrs	r3, r3, #7
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	f003 0306 	and.w	r3, r3, #6
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	f063 030f 	orn	r3, r3, #15
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	611a      	str	r2, [r3, #16]
}
 8003e2a:	e011      	b.n	8003e50 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d10d      	bne.n	8003e50 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	11db      	asrs	r3, r3, #7
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	f003 0306 	and.w	r3, r3, #6
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	f063 030e 	orn	r3, r3, #14
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	611a      	str	r2, [r3, #16]
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d004      	beq.n	8003e82 <I2C_Master_ADD10+0x26>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d108      	bne.n	8003e94 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00c      	beq.n	8003ea4 <I2C_Master_ADD10+0x48>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d007      	beq.n	8003ea4 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ea2:	605a      	str	r2, [r3, #4]
  }
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b091      	sub	sp, #68	@ 0x44
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ebe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ecc:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b22      	cmp	r3, #34	@ 0x22
 8003ed8:	f040 8169 	bne.w	80041ae <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10f      	bne.n	8003f04 <I2C_Master_ADDR+0x54>
 8003ee4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003ee8:	2b40      	cmp	r3, #64	@ 0x40
 8003eea:	d10b      	bne.n	8003f04 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eec:	2300      	movs	r3, #0
 8003eee:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f02:	e160      	b.n	80041c6 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d11d      	bne.n	8003f48 <I2C_Master_ADDR+0x98>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003f14:	d118      	bne.n	8003f48 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f16:	2300      	movs	r3, #0
 8003f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f3a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	651a      	str	r2, [r3, #80]	@ 0x50
 8003f46:	e13e      	b.n	80041c6 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d113      	bne.n	8003f7a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f52:	2300      	movs	r3, #0
 8003f54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	e115      	b.n	80041a6 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	f040 808a 	bne.w	800409a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f88:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f8c:	d137      	bne.n	8003ffe <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f9c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fa8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fac:	d113      	bne.n	8003fd6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fbc:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd4:	e0e7      	b.n	80041a6 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	623b      	str	r3, [r7, #32]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	623b      	str	r3, [r7, #32]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	623b      	str	r3, [r7, #32]
 8003fea:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	e0d3      	b.n	80041a6 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004000:	2b08      	cmp	r3, #8
 8004002:	d02e      	beq.n	8004062 <I2C_Master_ADDR+0x1b2>
 8004004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004006:	2b20      	cmp	r3, #32
 8004008:	d02b      	beq.n	8004062 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800400a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800400c:	2b12      	cmp	r3, #18
 800400e:	d102      	bne.n	8004016 <I2C_Master_ADDR+0x166>
 8004010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004012:	2b01      	cmp	r3, #1
 8004014:	d125      	bne.n	8004062 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004018:	2b04      	cmp	r3, #4
 800401a:	d00e      	beq.n	800403a <I2C_Master_ADDR+0x18a>
 800401c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800401e:	2b02      	cmp	r3, #2
 8004020:	d00b      	beq.n	800403a <I2C_Master_ADDR+0x18a>
 8004022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004024:	2b10      	cmp	r3, #16
 8004026:	d008      	beq.n	800403a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	e007      	b.n	800404a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004048:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800404a:	2300      	movs	r3, #0
 800404c:	61fb      	str	r3, [r7, #28]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	61fb      	str	r3, [r7, #28]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	61fb      	str	r3, [r7, #28]
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	e0a1      	b.n	80041a6 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004070:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004072:	2300      	movs	r3, #0
 8004074:	61bb      	str	r3, [r7, #24]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	61bb      	str	r3, [r7, #24]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	61bb      	str	r3, [r7, #24]
 8004086:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	e085      	b.n	80041a6 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800409e:	b29b      	uxth	r3, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d14d      	bne.n	8004140 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80040a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d016      	beq.n	80040d8 <I2C_Master_ADDR+0x228>
 80040aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d013      	beq.n	80040d8 <I2C_Master_ADDR+0x228>
 80040b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b2:	2b10      	cmp	r3, #16
 80040b4:	d010      	beq.n	80040d8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040c4:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	e007      	b.n	80040e8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80040e6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040f6:	d117      	bne.n	8004128 <I2C_Master_ADDR+0x278>
 80040f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040fa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80040fe:	d00b      	beq.n	8004118 <I2C_Master_ADDR+0x268>
 8004100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004102:	2b01      	cmp	r3, #1
 8004104:	d008      	beq.n	8004118 <I2C_Master_ADDR+0x268>
 8004106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004108:	2b08      	cmp	r3, #8
 800410a:	d005      	beq.n	8004118 <I2C_Master_ADDR+0x268>
 800410c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800410e:	2b10      	cmp	r3, #16
 8004110:	d002      	beq.n	8004118 <I2C_Master_ADDR+0x268>
 8004112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004114:	2b20      	cmp	r3, #32
 8004116:	d107      	bne.n	8004128 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004126:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004128:	2300      	movs	r3, #0
 800412a:	617b      	str	r3, [r7, #20]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	617b      	str	r3, [r7, #20]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	617b      	str	r3, [r7, #20]
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	e032      	b.n	80041a6 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800414e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800415a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800415e:	d117      	bne.n	8004190 <I2C_Master_ADDR+0x2e0>
 8004160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004162:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004166:	d00b      	beq.n	8004180 <I2C_Master_ADDR+0x2d0>
 8004168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800416a:	2b01      	cmp	r3, #1
 800416c:	d008      	beq.n	8004180 <I2C_Master_ADDR+0x2d0>
 800416e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004170:	2b08      	cmp	r3, #8
 8004172:	d005      	beq.n	8004180 <I2C_Master_ADDR+0x2d0>
 8004174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004176:	2b10      	cmp	r3, #16
 8004178:	d002      	beq.n	8004180 <I2C_Master_ADDR+0x2d0>
 800417a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800417c:	2b20      	cmp	r3, #32
 800417e:	d107      	bne.n	8004190 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	685a      	ldr	r2, [r3, #4]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800418e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004190:	2300      	movs	r3, #0
 8004192:	613b      	str	r3, [r7, #16]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	613b      	str	r3, [r7, #16]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	613b      	str	r3, [r7, #16]
 80041a4:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80041ac:	e00b      	b.n	80041c6 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ae:	2300      	movs	r3, #0
 80041b0:	60fb      	str	r3, [r7, #12]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	60fb      	str	r3, [r7, #12]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	60fb      	str	r3, [r7, #12]
 80041c2:	68fb      	ldr	r3, [r7, #12]
}
 80041c4:	e7ff      	b.n	80041c6 <I2C_Master_ADDR+0x316>
 80041c6:	bf00      	nop
 80041c8:	3744      	adds	r7, #68	@ 0x44
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b084      	sub	sp, #16
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041e0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d02b      	beq.n	8004244 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f0:	781a      	ldrb	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fc:	1c5a      	adds	r2, r3, #1
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004206:	b29b      	uxth	r3, r3
 8004208:	3b01      	subs	r3, #1
 800420a:	b29a      	uxth	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004214:	b29b      	uxth	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d114      	bne.n	8004244 <I2C_SlaveTransmit_TXE+0x72>
 800421a:	7bfb      	ldrb	r3, [r7, #15]
 800421c:	2b29      	cmp	r3, #41	@ 0x29
 800421e:	d111      	bne.n	8004244 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800422e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2221      	movs	r2, #33	@ 0x21
 8004234:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2228      	movs	r2, #40	@ 0x28
 800423a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7fd fc0c 	bl	8001a5c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004244:	bf00      	nop
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004258:	b29b      	uxth	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d011      	beq.n	8004282 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004262:	781a      	ldrb	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426e:	1c5a      	adds	r2, r3, #1
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004278:	b29b      	uxth	r3, r3
 800427a:	3b01      	subs	r3, #1
 800427c:	b29a      	uxth	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b084      	sub	sp, #16
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800429c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d02c      	beq.n	8004302 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	691a      	ldr	r2, [r3, #16]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b2:	b2d2      	uxtb	r2, r2
 80042b4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ba:	1c5a      	adds	r2, r3, #1
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	3b01      	subs	r3, #1
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d114      	bne.n	8004302 <I2C_SlaveReceive_RXNE+0x74>
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
 80042da:	2b2a      	cmp	r3, #42	@ 0x2a
 80042dc:	d111      	bne.n	8004302 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042ec:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2222      	movs	r2, #34	@ 0x22
 80042f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2228      	movs	r2, #40	@ 0x28
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f7fd fbb7 	bl	8001a70 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004302:	bf00      	nop
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004316:	b29b      	uxth	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	d012      	beq.n	8004342 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	691a      	ldr	r2, [r3, #16]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004338:	b29b      	uxth	r3, r3
 800433a:	3b01      	subs	r3, #1
 800433c:	b29a      	uxth	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004342:	bf00      	nop
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr

0800434e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b084      	sub	sp, #16
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
 8004356:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004358:	2300      	movs	r3, #0
 800435a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004362:	b2db      	uxtb	r3, r3
 8004364:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004368:	2b28      	cmp	r3, #40	@ 0x28
 800436a:	d125      	bne.n	80043b8 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800437a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	f003 0304 	and.w	r3, r3, #4
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004386:	2301      	movs	r3, #1
 8004388:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004390:	2b00      	cmp	r3, #0
 8004392:	d103      	bne.n	800439c <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	81bb      	strh	r3, [r7, #12]
 800439a:	e002      	b.n	80043a2 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80043aa:	89ba      	ldrh	r2, [r7, #12]
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
 80043ae:	4619      	mov	r1, r3
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7fd fb67 	bl	8001a84 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80043b6:	e00e      	b.n	80043d6 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043b8:	2300      	movs	r3, #0
 80043ba:	60bb      	str	r3, [r7, #8]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	60bb      	str	r3, [r7, #8]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	60bb      	str	r3, [r7, #8]
 80043cc:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80043d6:	bf00      	nop
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
	...

080043e0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043ee:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80043fe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004400:	2300      	movs	r3, #0
 8004402:	60bb      	str	r3, [r7, #8]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	60bb      	str	r3, [r7, #8]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0201 	orr.w	r2, r2, #1
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800442c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004438:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800443c:	d172      	bne.n	8004524 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800443e:	7bfb      	ldrb	r3, [r7, #15]
 8004440:	2b22      	cmp	r3, #34	@ 0x22
 8004442:	d002      	beq.n	800444a <I2C_Slave_STOPF+0x6a>
 8004444:	7bfb      	ldrb	r3, [r7, #15]
 8004446:	2b2a      	cmp	r3, #42	@ 0x2a
 8004448:	d135      	bne.n	80044b6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	b29a      	uxth	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800445c:	b29b      	uxth	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d005      	beq.n	800446e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004466:	f043 0204 	orr.w	r2, r3, #4
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800447c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004482:	4618      	mov	r0, r3
 8004484:	f7fe f990 	bl	80027a8 <HAL_DMA_GetState>
 8004488:	4603      	mov	r3, r0
 800448a:	2b01      	cmp	r3, #1
 800448c:	d049      	beq.n	8004522 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004492:	4a69      	ldr	r2, [pc, #420]	@ (8004638 <I2C_Slave_STOPF+0x258>)
 8004494:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800449a:	4618      	mov	r0, r3
 800449c:	f7fd ffd8 	bl	8002450 <HAL_DMA_Abort_IT>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d03d      	beq.n	8004522 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80044b0:	4610      	mov	r0, r2
 80044b2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044b4:	e035      	b.n	8004522 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	b29a      	uxth	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d005      	beq.n	80044da <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d2:	f043 0204 	orr.w	r2, r3, #4
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044e8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fe f95a 	bl	80027a8 <HAL_DMA_GetState>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d014      	beq.n	8004524 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044fe:	4a4e      	ldr	r2, [pc, #312]	@ (8004638 <I2C_Slave_STOPF+0x258>)
 8004500:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004506:	4618      	mov	r0, r3
 8004508:	f7fd ffa2 	bl	8002450 <HAL_DMA_Abort_IT>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d008      	beq.n	8004524 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004516:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800451c:	4610      	mov	r0, r2
 800451e:	4798      	blx	r3
 8004520:	e000      	b.n	8004524 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004522:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004528:	b29b      	uxth	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d03e      	beq.n	80045ac <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	2b04      	cmp	r3, #4
 800453a:	d112      	bne.n	8004562 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691a      	ldr	r2, [r3, #16]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004558:	b29b      	uxth	r3, r3
 800455a:	3b01      	subs	r3, #1
 800455c:	b29a      	uxth	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800456c:	2b40      	cmp	r3, #64	@ 0x40
 800456e:	d112      	bne.n	8004596 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	691a      	ldr	r2, [r3, #16]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457a:	b2d2      	uxtb	r2, r2
 800457c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004582:	1c5a      	adds	r2, r3, #1
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800458c:	b29b      	uxth	r3, r3
 800458e:	3b01      	subs	r3, #1
 8004590:	b29a      	uxth	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800459a:	b29b      	uxth	r3, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	d005      	beq.n	80045ac <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a4:	f043 0204 	orr.w	r2, r3, #4
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f8b7 	bl	8004728 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80045ba:	e039      	b.n	8004630 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
 80045be:	2b2a      	cmp	r3, #42	@ 0x2a
 80045c0:	d109      	bne.n	80045d6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2228      	movs	r2, #40	@ 0x28
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f7fd fa4d 	bl	8001a70 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b28      	cmp	r3, #40	@ 0x28
 80045e0:	d111      	bne.n	8004606 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a15      	ldr	r2, [pc, #84]	@ (800463c <I2C_Slave_STOPF+0x25c>)
 80045e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2220      	movs	r2, #32
 80045f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7fd f9a2 	bl	8001948 <HAL_I2C_ListenCpltCallback>
}
 8004604:	e014      	b.n	8004630 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800460a:	2b22      	cmp	r3, #34	@ 0x22
 800460c:	d002      	beq.n	8004614 <I2C_Slave_STOPF+0x234>
 800460e:	7bfb      	ldrb	r3, [r7, #15]
 8004610:	2b22      	cmp	r3, #34	@ 0x22
 8004612:	d10d      	bne.n	8004630 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2220      	movs	r2, #32
 800461e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fd fa20 	bl	8001a70 <HAL_I2C_SlaveRxCpltCallback>
}
 8004630:	bf00      	nop
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	0800498d 	.word	0x0800498d
 800463c:	ffff0000 	.word	0xffff0000

08004640 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800464e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004654:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2b08      	cmp	r3, #8
 800465a:	d002      	beq.n	8004662 <I2C_Slave_AF+0x22>
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2b20      	cmp	r3, #32
 8004660:	d129      	bne.n	80046b6 <I2C_Slave_AF+0x76>
 8004662:	7bfb      	ldrb	r3, [r7, #15]
 8004664:	2b28      	cmp	r3, #40	@ 0x28
 8004666:	d126      	bne.n	80046b6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a2e      	ldr	r2, [pc, #184]	@ (8004724 <I2C_Slave_AF+0xe4>)
 800466c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800467c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004686:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004696:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7fd f94a 	bl	8001948 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80046b4:	e031      	b.n	800471a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80046b6:	7bfb      	ldrb	r3, [r7, #15]
 80046b8:	2b21      	cmp	r3, #33	@ 0x21
 80046ba:	d129      	bne.n	8004710 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a19      	ldr	r2, [pc, #100]	@ (8004724 <I2C_Slave_AF+0xe4>)
 80046c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2221      	movs	r2, #33	@ 0x21
 80046c6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80046e6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80046f0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004700:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7fe fc60 	bl	8002fc8 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f7fd f9a7 	bl	8001a5c <HAL_I2C_SlaveTxCpltCallback>
}
 800470e:	e004      	b.n	800471a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004718:	615a      	str	r2, [r3, #20]
}
 800471a:	bf00      	nop
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	ffff0000 	.word	0xffff0000

08004728 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004736:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800473e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004740:	7bbb      	ldrb	r3, [r7, #14]
 8004742:	2b10      	cmp	r3, #16
 8004744:	d002      	beq.n	800474c <I2C_ITError+0x24>
 8004746:	7bbb      	ldrb	r3, [r7, #14]
 8004748:	2b40      	cmp	r3, #64	@ 0x40
 800474a:	d10a      	bne.n	8004762 <I2C_ITError+0x3a>
 800474c:	7bfb      	ldrb	r3, [r7, #15]
 800474e:	2b22      	cmp	r3, #34	@ 0x22
 8004750:	d107      	bne.n	8004762 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004760:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004762:	7bfb      	ldrb	r3, [r7, #15]
 8004764:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004768:	2b28      	cmp	r3, #40	@ 0x28
 800476a:	d107      	bne.n	800477c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2228      	movs	r2, #40	@ 0x28
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800477a:	e015      	b.n	80047a8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004786:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800478a:	d00a      	beq.n	80047a2 <I2C_ITError+0x7a>
 800478c:	7bfb      	ldrb	r3, [r7, #15]
 800478e:	2b60      	cmp	r3, #96	@ 0x60
 8004790:	d007      	beq.n	80047a2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2220      	movs	r2, #32
 8004796:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047b6:	d162      	bne.n	800487e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047c6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d020      	beq.n	8004818 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047da:	4a6a      	ldr	r2, [pc, #424]	@ (8004984 <I2C_ITError+0x25c>)
 80047dc:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7fd fe34 	bl	8002450 <HAL_DMA_Abort_IT>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 8089 	beq.w	8004902 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0201 	bic.w	r2, r2, #1
 80047fe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2220      	movs	r2, #32
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800480c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004812:	4610      	mov	r0, r2
 8004814:	4798      	blx	r3
 8004816:	e074      	b.n	8004902 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800481c:	4a59      	ldr	r2, [pc, #356]	@ (8004984 <I2C_ITError+0x25c>)
 800481e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004824:	4618      	mov	r0, r3
 8004826:	f7fd fe13 	bl	8002450 <HAL_DMA_Abort_IT>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d068      	beq.n	8004902 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800483a:	2b40      	cmp	r3, #64	@ 0x40
 800483c:	d10b      	bne.n	8004856 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	691a      	ldr	r2, [r3, #16]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004848:	b2d2      	uxtb	r2, r2
 800484a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004850:	1c5a      	adds	r2, r3, #1
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0201 	bic.w	r2, r2, #1
 8004864:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2220      	movs	r2, #32
 800486a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004878:	4610      	mov	r0, r2
 800487a:	4798      	blx	r3
 800487c:	e041      	b.n	8004902 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b60      	cmp	r3, #96	@ 0x60
 8004888:	d125      	bne.n	80048d6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2220      	movs	r2, #32
 800488e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048a2:	2b40      	cmp	r3, #64	@ 0x40
 80048a4:	d10b      	bne.n	80048be <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	691a      	ldr	r2, [r3, #16]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b0:	b2d2      	uxtb	r2, r2
 80048b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b8:	1c5a      	adds	r2, r3, #1
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 0201 	bic.w	r2, r2, #1
 80048cc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7fe fec5 	bl	800365e <HAL_I2C_AbortCpltCallback>
 80048d4:	e015      	b.n	8004902 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048e0:	2b40      	cmp	r3, #64	@ 0x40
 80048e2:	d10b      	bne.n	80048fc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	691a      	ldr	r2, [r3, #16]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ee:	b2d2      	uxtb	r2, r2
 80048f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f6:	1c5a      	adds	r2, r3, #1
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f7fd f8f1 	bl	8001ae4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004906:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10e      	bne.n	8004930 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004918:	2b00      	cmp	r3, #0
 800491a:	d109      	bne.n	8004930 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004922:	2b00      	cmp	r3, #0
 8004924:	d104      	bne.n	8004930 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800492c:	2b00      	cmp	r3, #0
 800492e:	d007      	beq.n	8004940 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800493e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004946:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	2b04      	cmp	r3, #4
 8004952:	d113      	bne.n	800497c <I2C_ITError+0x254>
 8004954:	7bfb      	ldrb	r3, [r7, #15]
 8004956:	2b28      	cmp	r3, #40	@ 0x28
 8004958:	d110      	bne.n	800497c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a0a      	ldr	r2, [pc, #40]	@ (8004988 <I2C_ITError+0x260>)
 800495e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2220      	movs	r2, #32
 800496a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7fc ffe6 	bl	8001948 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800497c:	bf00      	nop
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	0800498d 	.word	0x0800498d
 8004988:	ffff0000 	.word	0xffff0000

0800498c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800499c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049a4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80049a6:	4b4b      	ldr	r3, [pc, #300]	@ (8004ad4 <I2C_DMAAbort+0x148>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	08db      	lsrs	r3, r3, #3
 80049ac:	4a4a      	ldr	r2, [pc, #296]	@ (8004ad8 <I2C_DMAAbort+0x14c>)
 80049ae:	fba2 2303 	umull	r2, r3, r2, r3
 80049b2:	0a1a      	lsrs	r2, r3, #8
 80049b4:	4613      	mov	r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4413      	add	r3, r2
 80049ba:	00da      	lsls	r2, r3, #3
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d106      	bne.n	80049d4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ca:	f043 0220 	orr.w	r2, r3, #32
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80049d2:	e00a      	b.n	80049ea <I2C_DMAAbort+0x5e>
    }
    count--;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	3b01      	subs	r3, #1
 80049d8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049e8:	d0ea      	beq.n	80049c0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049f6:	2200      	movs	r2, #0
 80049f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a06:	2200      	movs	r2, #0
 8004a08:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a18:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d003      	beq.n	8004a30 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d003      	beq.n	8004a40 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0201 	bic.w	r2, r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b60      	cmp	r3, #96	@ 0x60
 8004a5a:	d10e      	bne.n	8004a7a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a72:	6978      	ldr	r0, [r7, #20]
 8004a74:	f7fe fdf3 	bl	800365e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a78:	e027      	b.n	8004aca <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a7a:	7cfb      	ldrb	r3, [r7, #19]
 8004a7c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004a80:	2b28      	cmp	r3, #40	@ 0x28
 8004a82:	d117      	bne.n	8004ab4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 0201 	orr.w	r2, r2, #1
 8004a92:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004aa2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2228      	movs	r2, #40	@ 0x28
 8004aae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004ab2:	e007      	b.n	8004ac4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004ac4:	6978      	ldr	r0, [r7, #20]
 8004ac6:	f7fd f80d 	bl	8001ae4 <HAL_I2C_ErrorCallback>
}
 8004aca:	bf00      	nop
 8004acc:	3718      	adds	r7, #24
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	20000000 	.word	0x20000000
 8004ad8:	14f8b589 	.word	0x14f8b589

08004adc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ae8:	4b13      	ldr	r3, [pc, #76]	@ (8004b38 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	08db      	lsrs	r3, r3, #3
 8004aee:	4a13      	ldr	r2, [pc, #76]	@ (8004b3c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004af0:	fba2 2303 	umull	r2, r3, r2, r3
 8004af4:	0a1a      	lsrs	r2, r3, #8
 8004af6:	4613      	mov	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	3b01      	subs	r3, #1
 8004b02:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d107      	bne.n	8004b1a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0e:	f043 0220 	orr.w	r2, r3, #32
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e008      	b.n	8004b2c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b28:	d0e9      	beq.n	8004afe <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3714      	adds	r7, #20
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr
 8004b38:	20000000 	.word	0x20000000
 8004b3c:	14f8b589 	.word	0x14f8b589

08004b40 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b4c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004b50:	d103      	bne.n	8004b5a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004b58:	e007      	b.n	8004b6a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004b62:	d102      	bne.n	8004b6a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2208      	movs	r2, #8
 8004b68:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004b6a:	bf00      	nop
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
	...

08004b78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e0cc      	b.n	8004d26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b8c:	4b68      	ldr	r3, [pc, #416]	@ (8004d30 <HAL_RCC_ClockConfig+0x1b8>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 030f 	and.w	r3, r3, #15
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d90c      	bls.n	8004bb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b9a:	4b65      	ldr	r3, [pc, #404]	@ (8004d30 <HAL_RCC_ClockConfig+0x1b8>)
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	b2d2      	uxtb	r2, r2
 8004ba0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ba2:	4b63      	ldr	r3, [pc, #396]	@ (8004d30 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 030f 	and.w	r3, r3, #15
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d001      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e0b8      	b.n	8004d26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d020      	beq.n	8004c02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0304 	and.w	r3, r3, #4
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d005      	beq.n	8004bd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bcc:	4b59      	ldr	r3, [pc, #356]	@ (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	4a58      	ldr	r2, [pc, #352]	@ (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004bd6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0308 	and.w	r3, r3, #8
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d005      	beq.n	8004bf0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004be4:	4b53      	ldr	r3, [pc, #332]	@ (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	4a52      	ldr	r2, [pc, #328]	@ (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004bea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004bee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bf0:	4b50      	ldr	r3, [pc, #320]	@ (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	494d      	ldr	r1, [pc, #308]	@ (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d044      	beq.n	8004c98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d107      	bne.n	8004c26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c16:	4b47      	ldr	r3, [pc, #284]	@ (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d119      	bne.n	8004c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e07f      	b.n	8004d26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d003      	beq.n	8004c36 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c32:	2b03      	cmp	r3, #3
 8004c34:	d107      	bne.n	8004c46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c36:	4b3f      	ldr	r3, [pc, #252]	@ (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d109      	bne.n	8004c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e06f      	b.n	8004d26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c46:	4b3b      	ldr	r3, [pc, #236]	@ (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e067      	b.n	8004d26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c56:	4b37      	ldr	r3, [pc, #220]	@ (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f023 0203 	bic.w	r2, r3, #3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	4934      	ldr	r1, [pc, #208]	@ (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c68:	f7fd f9aa 	bl	8001fc0 <HAL_GetTick>
 8004c6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c6e:	e00a      	b.n	8004c86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c70:	f7fd f9a6 	bl	8001fc0 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e04f      	b.n	8004d26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c86:	4b2b      	ldr	r3, [pc, #172]	@ (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f003 020c 	and.w	r2, r3, #12
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d1eb      	bne.n	8004c70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c98:	4b25      	ldr	r3, [pc, #148]	@ (8004d30 <HAL_RCC_ClockConfig+0x1b8>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 030f 	and.w	r3, r3, #15
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d20c      	bcs.n	8004cc0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ca6:	4b22      	ldr	r3, [pc, #136]	@ (8004d30 <HAL_RCC_ClockConfig+0x1b8>)
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cae:	4b20      	ldr	r3, [pc, #128]	@ (8004d30 <HAL_RCC_ClockConfig+0x1b8>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 030f 	and.w	r3, r3, #15
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d001      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e032      	b.n	8004d26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0304 	and.w	r3, r3, #4
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d008      	beq.n	8004cde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ccc:	4b19      	ldr	r3, [pc, #100]	@ (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	4916      	ldr	r1, [pc, #88]	@ (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0308 	and.w	r3, r3, #8
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d009      	beq.n	8004cfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cea:	4b12      	ldr	r3, [pc, #72]	@ (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	00db      	lsls	r3, r3, #3
 8004cf8:	490e      	ldr	r1, [pc, #56]	@ (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004cfe:	f000 f855 	bl	8004dac <HAL_RCC_GetSysClockFreq>
 8004d02:	4602      	mov	r2, r0
 8004d04:	4b0b      	ldr	r3, [pc, #44]	@ (8004d34 <HAL_RCC_ClockConfig+0x1bc>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	091b      	lsrs	r3, r3, #4
 8004d0a:	f003 030f 	and.w	r3, r3, #15
 8004d0e:	490a      	ldr	r1, [pc, #40]	@ (8004d38 <HAL_RCC_ClockConfig+0x1c0>)
 8004d10:	5ccb      	ldrb	r3, [r1, r3]
 8004d12:	fa22 f303 	lsr.w	r3, r2, r3
 8004d16:	4a09      	ldr	r2, [pc, #36]	@ (8004d3c <HAL_RCC_ClockConfig+0x1c4>)
 8004d18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004d1a:	4b09      	ldr	r3, [pc, #36]	@ (8004d40 <HAL_RCC_ClockConfig+0x1c8>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fd f90a 	bl	8001f38 <HAL_InitTick>

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	40023c00 	.word	0x40023c00
 8004d34:	40023800 	.word	0x40023800
 8004d38:	08007af4 	.word	0x08007af4
 8004d3c:	20000000 	.word	0x20000000
 8004d40:	20000004 	.word	0x20000004

08004d44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d44:	b480      	push	{r7}
 8004d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d48:	4b03      	ldr	r3, [pc, #12]	@ (8004d58 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	20000000 	.word	0x20000000

08004d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d60:	f7ff fff0 	bl	8004d44 <HAL_RCC_GetHCLKFreq>
 8004d64:	4602      	mov	r2, r0
 8004d66:	4b05      	ldr	r3, [pc, #20]	@ (8004d7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	0a9b      	lsrs	r3, r3, #10
 8004d6c:	f003 0307 	and.w	r3, r3, #7
 8004d70:	4903      	ldr	r1, [pc, #12]	@ (8004d80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d72:	5ccb      	ldrb	r3, [r1, r3]
 8004d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	40023800 	.word	0x40023800
 8004d80:	08007b04 	.word	0x08007b04

08004d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d88:	f7ff ffdc 	bl	8004d44 <HAL_RCC_GetHCLKFreq>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	4b05      	ldr	r3, [pc, #20]	@ (8004da4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	0b5b      	lsrs	r3, r3, #13
 8004d94:	f003 0307 	and.w	r3, r3, #7
 8004d98:	4903      	ldr	r1, [pc, #12]	@ (8004da8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d9a:	5ccb      	ldrb	r3, [r1, r3]
 8004d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	40023800 	.word	0x40023800
 8004da8:	08007b04 	.word	0x08007b04

08004dac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004db0:	b0a6      	sub	sp, #152	@ 0x98
 8004db2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004db4:	2300      	movs	r3, #0
 8004db6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dd2:	4bc8      	ldr	r3, [pc, #800]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f003 030c 	and.w	r3, r3, #12
 8004dda:	2b0c      	cmp	r3, #12
 8004ddc:	f200 817e 	bhi.w	80050dc <HAL_RCC_GetSysClockFreq+0x330>
 8004de0:	a201      	add	r2, pc, #4	@ (adr r2, 8004de8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de6:	bf00      	nop
 8004de8:	08004e1d 	.word	0x08004e1d
 8004dec:	080050dd 	.word	0x080050dd
 8004df0:	080050dd 	.word	0x080050dd
 8004df4:	080050dd 	.word	0x080050dd
 8004df8:	08004e25 	.word	0x08004e25
 8004dfc:	080050dd 	.word	0x080050dd
 8004e00:	080050dd 	.word	0x080050dd
 8004e04:	080050dd 	.word	0x080050dd
 8004e08:	08004e2d 	.word	0x08004e2d
 8004e0c:	080050dd 	.word	0x080050dd
 8004e10:	080050dd 	.word	0x080050dd
 8004e14:	080050dd 	.word	0x080050dd
 8004e18:	08004f97 	.word	0x08004f97
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e1c:	4bb6      	ldr	r3, [pc, #728]	@ (80050f8 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004e1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004e22:	e15f      	b.n	80050e4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e24:	4bb5      	ldr	r3, [pc, #724]	@ (80050fc <HAL_RCC_GetSysClockFreq+0x350>)
 8004e26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004e2a:	e15b      	b.n	80050e4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e2c:	4bb1      	ldr	r3, [pc, #708]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e38:	4bae      	ldr	r3, [pc, #696]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d031      	beq.n	8004ea8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e44:	4bab      	ldr	r3, [pc, #684]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	099b      	lsrs	r3, r3, #6
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e4e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004e50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e56:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e58:	2300      	movs	r3, #0
 8004e5a:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e5c:	4ba7      	ldr	r3, [pc, #668]	@ (80050fc <HAL_RCC_GetSysClockFreq+0x350>)
 8004e5e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004e62:	462a      	mov	r2, r5
 8004e64:	fb03 f202 	mul.w	r2, r3, r2
 8004e68:	2300      	movs	r3, #0
 8004e6a:	4621      	mov	r1, r4
 8004e6c:	fb01 f303 	mul.w	r3, r1, r3
 8004e70:	4413      	add	r3, r2
 8004e72:	4aa2      	ldr	r2, [pc, #648]	@ (80050fc <HAL_RCC_GetSysClockFreq+0x350>)
 8004e74:	4621      	mov	r1, r4
 8004e76:	fba1 1202 	umull	r1, r2, r1, r2
 8004e7a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004e7c:	460a      	mov	r2, r1
 8004e7e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8004e80:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004e82:	4413      	add	r3, r2
 8004e84:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004e86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e8e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004e90:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e94:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8004e98:	f7fb fe72 	bl	8000b80 <__aeabi_uldivmod>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004ea6:	e064      	b.n	8004f72 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ea8:	4b92      	ldr	r3, [pc, #584]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	099b      	lsrs	r3, r3, #6
 8004eae:	2200      	movs	r2, #0
 8004eb0:	653b      	str	r3, [r7, #80]	@ 0x50
 8004eb2:	657a      	str	r2, [r7, #84]	@ 0x54
 8004eb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ec0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8004ec4:	4622      	mov	r2, r4
 8004ec6:	462b      	mov	r3, r5
 8004ec8:	f04f 0000 	mov.w	r0, #0
 8004ecc:	f04f 0100 	mov.w	r1, #0
 8004ed0:	0159      	lsls	r1, r3, #5
 8004ed2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ed6:	0150      	lsls	r0, r2, #5
 8004ed8:	4602      	mov	r2, r0
 8004eda:	460b      	mov	r3, r1
 8004edc:	4621      	mov	r1, r4
 8004ede:	1a51      	subs	r1, r2, r1
 8004ee0:	6139      	str	r1, [r7, #16]
 8004ee2:	4629      	mov	r1, r5
 8004ee4:	eb63 0301 	sbc.w	r3, r3, r1
 8004ee8:	617b      	str	r3, [r7, #20]
 8004eea:	f04f 0200 	mov.w	r2, #0
 8004eee:	f04f 0300 	mov.w	r3, #0
 8004ef2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ef6:	4659      	mov	r1, fp
 8004ef8:	018b      	lsls	r3, r1, #6
 8004efa:	4651      	mov	r1, sl
 8004efc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f00:	4651      	mov	r1, sl
 8004f02:	018a      	lsls	r2, r1, #6
 8004f04:	4651      	mov	r1, sl
 8004f06:	ebb2 0801 	subs.w	r8, r2, r1
 8004f0a:	4659      	mov	r1, fp
 8004f0c:	eb63 0901 	sbc.w	r9, r3, r1
 8004f10:	f04f 0200 	mov.w	r2, #0
 8004f14:	f04f 0300 	mov.w	r3, #0
 8004f18:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f1c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f20:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f24:	4690      	mov	r8, r2
 8004f26:	4699      	mov	r9, r3
 8004f28:	4623      	mov	r3, r4
 8004f2a:	eb18 0303 	adds.w	r3, r8, r3
 8004f2e:	60bb      	str	r3, [r7, #8]
 8004f30:	462b      	mov	r3, r5
 8004f32:	eb49 0303 	adc.w	r3, r9, r3
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	f04f 0200 	mov.w	r2, #0
 8004f3c:	f04f 0300 	mov.w	r3, #0
 8004f40:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f44:	4629      	mov	r1, r5
 8004f46:	028b      	lsls	r3, r1, #10
 8004f48:	4621      	mov	r1, r4
 8004f4a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f4e:	4621      	mov	r1, r4
 8004f50:	028a      	lsls	r2, r1, #10
 8004f52:	4610      	mov	r0, r2
 8004f54:	4619      	mov	r1, r3
 8004f56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f5e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004f60:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004f64:	f7fb fe0c 	bl	8000b80 <__aeabi_uldivmod>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004f72:	4b60      	ldr	r3, [pc, #384]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	0c1b      	lsrs	r3, r3, #16
 8004f78:	f003 0303 	and.w	r3, r3, #3
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8004f84:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004f88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004f94:	e0a6      	b.n	80050e4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f96:	4b57      	ldr	r3, [pc, #348]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fa2:	4b54      	ldr	r3, [pc, #336]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d02a      	beq.n	8005004 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fae:	4b51      	ldr	r3, [pc, #324]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	099b      	lsrs	r3, r3, #6
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004fb8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fbc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004fc0:	2100      	movs	r1, #0
 8004fc2:	4b4e      	ldr	r3, [pc, #312]	@ (80050fc <HAL_RCC_GetSysClockFreq+0x350>)
 8004fc4:	fb03 f201 	mul.w	r2, r3, r1
 8004fc8:	2300      	movs	r3, #0
 8004fca:	fb00 f303 	mul.w	r3, r0, r3
 8004fce:	4413      	add	r3, r2
 8004fd0:	4a4a      	ldr	r2, [pc, #296]	@ (80050fc <HAL_RCC_GetSysClockFreq+0x350>)
 8004fd2:	fba0 1202 	umull	r1, r2, r0, r2
 8004fd6:	677a      	str	r2, [r7, #116]	@ 0x74
 8004fd8:	460a      	mov	r2, r1
 8004fda:	673a      	str	r2, [r7, #112]	@ 0x70
 8004fdc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004fde:	4413      	add	r3, r2
 8004fe0:	677b      	str	r3, [r7, #116]	@ 0x74
 8004fe2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fea:	637a      	str	r2, [r7, #52]	@ 0x34
 8004fec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004ff0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004ff4:	f7fb fdc4 	bl	8000b80 <__aeabi_uldivmod>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005002:	e05b      	b.n	80050bc <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005004:	4b3b      	ldr	r3, [pc, #236]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0x348>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	099b      	lsrs	r3, r3, #6
 800500a:	2200      	movs	r2, #0
 800500c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800500e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005016:	623b      	str	r3, [r7, #32]
 8005018:	2300      	movs	r3, #0
 800501a:	627b      	str	r3, [r7, #36]	@ 0x24
 800501c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005020:	4642      	mov	r2, r8
 8005022:	464b      	mov	r3, r9
 8005024:	f04f 0000 	mov.w	r0, #0
 8005028:	f04f 0100 	mov.w	r1, #0
 800502c:	0159      	lsls	r1, r3, #5
 800502e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005032:	0150      	lsls	r0, r2, #5
 8005034:	4602      	mov	r2, r0
 8005036:	460b      	mov	r3, r1
 8005038:	4641      	mov	r1, r8
 800503a:	ebb2 0a01 	subs.w	sl, r2, r1
 800503e:	4649      	mov	r1, r9
 8005040:	eb63 0b01 	sbc.w	fp, r3, r1
 8005044:	f04f 0200 	mov.w	r2, #0
 8005048:	f04f 0300 	mov.w	r3, #0
 800504c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005050:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005054:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005058:	ebb2 040a 	subs.w	r4, r2, sl
 800505c:	eb63 050b 	sbc.w	r5, r3, fp
 8005060:	f04f 0200 	mov.w	r2, #0
 8005064:	f04f 0300 	mov.w	r3, #0
 8005068:	00eb      	lsls	r3, r5, #3
 800506a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800506e:	00e2      	lsls	r2, r4, #3
 8005070:	4614      	mov	r4, r2
 8005072:	461d      	mov	r5, r3
 8005074:	4643      	mov	r3, r8
 8005076:	18e3      	adds	r3, r4, r3
 8005078:	603b      	str	r3, [r7, #0]
 800507a:	464b      	mov	r3, r9
 800507c:	eb45 0303 	adc.w	r3, r5, r3
 8005080:	607b      	str	r3, [r7, #4]
 8005082:	f04f 0200 	mov.w	r2, #0
 8005086:	f04f 0300 	mov.w	r3, #0
 800508a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800508e:	4629      	mov	r1, r5
 8005090:	028b      	lsls	r3, r1, #10
 8005092:	4621      	mov	r1, r4
 8005094:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005098:	4621      	mov	r1, r4
 800509a:	028a      	lsls	r2, r1, #10
 800509c:	4610      	mov	r0, r2
 800509e:	4619      	mov	r1, r3
 80050a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050a4:	2200      	movs	r2, #0
 80050a6:	61bb      	str	r3, [r7, #24]
 80050a8:	61fa      	str	r2, [r7, #28]
 80050aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050ae:	f7fb fd67 	bl	8000b80 <__aeabi_uldivmod>
 80050b2:	4602      	mov	r2, r0
 80050b4:	460b      	mov	r3, r1
 80050b6:	4613      	mov	r3, r2
 80050b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80050bc:	4b0d      	ldr	r3, [pc, #52]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0x348>)
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	0f1b      	lsrs	r3, r3, #28
 80050c2:	f003 0307 	and.w	r3, r3, #7
 80050c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80050ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80050ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80050d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80050da:	e003      	b.n	80050e4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050dc:	4b06      	ldr	r3, [pc, #24]	@ (80050f8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80050de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80050e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3798      	adds	r7, #152	@ 0x98
 80050ec:	46bd      	mov	sp, r7
 80050ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050f2:	bf00      	nop
 80050f4:	40023800 	.word	0x40023800
 80050f8:	00f42400 	.word	0x00f42400
 80050fc:	017d7840 	.word	0x017d7840

08005100 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e28d      	b.n	800562e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 8083 	beq.w	8005226 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005120:	4b94      	ldr	r3, [pc, #592]	@ (8005374 <HAL_RCC_OscConfig+0x274>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f003 030c 	and.w	r3, r3, #12
 8005128:	2b04      	cmp	r3, #4
 800512a:	d019      	beq.n	8005160 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800512c:	4b91      	ldr	r3, [pc, #580]	@ (8005374 <HAL_RCC_OscConfig+0x274>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f003 030c 	and.w	r3, r3, #12
        || \
 8005134:	2b08      	cmp	r3, #8
 8005136:	d106      	bne.n	8005146 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005138:	4b8e      	ldr	r3, [pc, #568]	@ (8005374 <HAL_RCC_OscConfig+0x274>)
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005140:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005144:	d00c      	beq.n	8005160 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005146:	4b8b      	ldr	r3, [pc, #556]	@ (8005374 <HAL_RCC_OscConfig+0x274>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800514e:	2b0c      	cmp	r3, #12
 8005150:	d112      	bne.n	8005178 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005152:	4b88      	ldr	r3, [pc, #544]	@ (8005374 <HAL_RCC_OscConfig+0x274>)
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800515a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800515e:	d10b      	bne.n	8005178 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005160:	4b84      	ldr	r3, [pc, #528]	@ (8005374 <HAL_RCC_OscConfig+0x274>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d05b      	beq.n	8005224 <HAL_RCC_OscConfig+0x124>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d157      	bne.n	8005224 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e25a      	b.n	800562e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005180:	d106      	bne.n	8005190 <HAL_RCC_OscConfig+0x90>
 8005182:	4b7c      	ldr	r3, [pc, #496]	@ (8005374 <HAL_RCC_OscConfig+0x274>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a7b      	ldr	r2, [pc, #492]	@ (8005374 <HAL_RCC_OscConfig+0x274>)
 8005188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800518c:	6013      	str	r3, [r2, #0]
 800518e:	e01d      	b.n	80051cc <HAL_RCC_OscConfig+0xcc>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005198:	d10c      	bne.n	80051b4 <HAL_RCC_OscConfig+0xb4>
 800519a:	4b76      	ldr	r3, [pc, #472]	@ (8005374 <HAL_RCC_OscConfig+0x274>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a75      	ldr	r2, [pc, #468]	@ (8005374 <HAL_RCC_OscConfig+0x274>)
 80051a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051a4:	6013      	str	r3, [r2, #0]
 80051a6:	4b73      	ldr	r3, [pc, #460]	@ (8005374 <HAL_RCC_OscConfig+0x274>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a72      	ldr	r2, [pc, #456]	@ (8005374 <HAL_RCC_OscConfig+0x274>)
 80051ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051b0:	6013      	str	r3, [r2, #0]
 80051b2:	e00b      	b.n	80051cc <HAL_RCC_OscConfig+0xcc>
 80051b4:	4b6f      	ldr	r3, [pc, #444]	@ (8005374 <HAL_RCC_OscConfig+0x274>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a6e      	ldr	r2, [pc, #440]	@ (8005374 <HAL_RCC_OscConfig+0x274>)
 80051ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051be:	6013      	str	r3, [r2, #0]
 80051c0:	4b6c      	ldr	r3, [pc, #432]	@ (8005374 <HAL_RCC_OscConfig+0x274>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a6b      	ldr	r2, [pc, #428]	@ (8005374 <HAL_RCC_OscConfig+0x274>)
 80051c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80051ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d013      	beq.n	80051fc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d4:	f7fc fef4 	bl	8001fc0 <HAL_GetTick>
 80051d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051da:	e008      	b.n	80051ee <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051dc:	f7fc fef0 	bl	8001fc0 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b64      	cmp	r3, #100	@ 0x64
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e21f      	b.n	800562e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ee:	4b61      	ldr	r3, [pc, #388]	@ (8005374 <HAL_RCC_OscConfig+0x274>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d0f0      	beq.n	80051dc <HAL_RCC_OscConfig+0xdc>
 80051fa:	e014      	b.n	8005226 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051fc:	f7fc fee0 	bl	8001fc0 <HAL_GetTick>
 8005200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005202:	e008      	b.n	8005216 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005204:	f7fc fedc 	bl	8001fc0 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	2b64      	cmp	r3, #100	@ 0x64
 8005210:	d901      	bls.n	8005216 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e20b      	b.n	800562e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005216:	4b57      	ldr	r3, [pc, #348]	@ (8005374 <HAL_RCC_OscConfig+0x274>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1f0      	bne.n	8005204 <HAL_RCC_OscConfig+0x104>
 8005222:	e000      	b.n	8005226 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d06f      	beq.n	8005312 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005232:	4b50      	ldr	r3, [pc, #320]	@ (8005374 <HAL_RCC_OscConfig+0x274>)
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f003 030c 	and.w	r3, r3, #12
 800523a:	2b00      	cmp	r3, #0
 800523c:	d017      	beq.n	800526e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800523e:	4b4d      	ldr	r3, [pc, #308]	@ (8005374 <HAL_RCC_OscConfig+0x274>)
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f003 030c 	and.w	r3, r3, #12
        || \
 8005246:	2b08      	cmp	r3, #8
 8005248:	d105      	bne.n	8005256 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800524a:	4b4a      	ldr	r3, [pc, #296]	@ (8005374 <HAL_RCC_OscConfig+0x274>)
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00b      	beq.n	800526e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005256:	4b47      	ldr	r3, [pc, #284]	@ (8005374 <HAL_RCC_OscConfig+0x274>)
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800525e:	2b0c      	cmp	r3, #12
 8005260:	d11c      	bne.n	800529c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005262:	4b44      	ldr	r3, [pc, #272]	@ (8005374 <HAL_RCC_OscConfig+0x274>)
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d116      	bne.n	800529c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800526e:	4b41      	ldr	r3, [pc, #260]	@ (8005374 <HAL_RCC_OscConfig+0x274>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d005      	beq.n	8005286 <HAL_RCC_OscConfig+0x186>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d001      	beq.n	8005286 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e1d3      	b.n	800562e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005286:	4b3b      	ldr	r3, [pc, #236]	@ (8005374 <HAL_RCC_OscConfig+0x274>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	4937      	ldr	r1, [pc, #220]	@ (8005374 <HAL_RCC_OscConfig+0x274>)
 8005296:	4313      	orrs	r3, r2
 8005298:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800529a:	e03a      	b.n	8005312 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d020      	beq.n	80052e6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052a4:	4b34      	ldr	r3, [pc, #208]	@ (8005378 <HAL_RCC_OscConfig+0x278>)
 80052a6:	2201      	movs	r2, #1
 80052a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052aa:	f7fc fe89 	bl	8001fc0 <HAL_GetTick>
 80052ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052b0:	e008      	b.n	80052c4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052b2:	f7fc fe85 	bl	8001fc0 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d901      	bls.n	80052c4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e1b4      	b.n	800562e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052c4:	4b2b      	ldr	r3, [pc, #172]	@ (8005374 <HAL_RCC_OscConfig+0x274>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0302 	and.w	r3, r3, #2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d0f0      	beq.n	80052b2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052d0:	4b28      	ldr	r3, [pc, #160]	@ (8005374 <HAL_RCC_OscConfig+0x274>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	00db      	lsls	r3, r3, #3
 80052de:	4925      	ldr	r1, [pc, #148]	@ (8005374 <HAL_RCC_OscConfig+0x274>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	600b      	str	r3, [r1, #0]
 80052e4:	e015      	b.n	8005312 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052e6:	4b24      	ldr	r3, [pc, #144]	@ (8005378 <HAL_RCC_OscConfig+0x278>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ec:	f7fc fe68 	bl	8001fc0 <HAL_GetTick>
 80052f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052f2:	e008      	b.n	8005306 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052f4:	f7fc fe64 	bl	8001fc0 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e193      	b.n	800562e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005306:	4b1b      	ldr	r3, [pc, #108]	@ (8005374 <HAL_RCC_OscConfig+0x274>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1f0      	bne.n	80052f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0308 	and.w	r3, r3, #8
 800531a:	2b00      	cmp	r3, #0
 800531c:	d036      	beq.n	800538c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d016      	beq.n	8005354 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005326:	4b15      	ldr	r3, [pc, #84]	@ (800537c <HAL_RCC_OscConfig+0x27c>)
 8005328:	2201      	movs	r2, #1
 800532a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800532c:	f7fc fe48 	bl	8001fc0 <HAL_GetTick>
 8005330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005332:	e008      	b.n	8005346 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005334:	f7fc fe44 	bl	8001fc0 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	2b02      	cmp	r3, #2
 8005340:	d901      	bls.n	8005346 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e173      	b.n	800562e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005346:	4b0b      	ldr	r3, [pc, #44]	@ (8005374 <HAL_RCC_OscConfig+0x274>)
 8005348:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	2b00      	cmp	r3, #0
 8005350:	d0f0      	beq.n	8005334 <HAL_RCC_OscConfig+0x234>
 8005352:	e01b      	b.n	800538c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005354:	4b09      	ldr	r3, [pc, #36]	@ (800537c <HAL_RCC_OscConfig+0x27c>)
 8005356:	2200      	movs	r2, #0
 8005358:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800535a:	f7fc fe31 	bl	8001fc0 <HAL_GetTick>
 800535e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005360:	e00e      	b.n	8005380 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005362:	f7fc fe2d 	bl	8001fc0 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	2b02      	cmp	r3, #2
 800536e:	d907      	bls.n	8005380 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e15c      	b.n	800562e <HAL_RCC_OscConfig+0x52e>
 8005374:	40023800 	.word	0x40023800
 8005378:	42470000 	.word	0x42470000
 800537c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005380:	4b8a      	ldr	r3, [pc, #552]	@ (80055ac <HAL_RCC_OscConfig+0x4ac>)
 8005382:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1ea      	bne.n	8005362 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0304 	and.w	r3, r3, #4
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 8097 	beq.w	80054c8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800539a:	2300      	movs	r3, #0
 800539c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800539e:	4b83      	ldr	r3, [pc, #524]	@ (80055ac <HAL_RCC_OscConfig+0x4ac>)
 80053a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10f      	bne.n	80053ca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053aa:	2300      	movs	r3, #0
 80053ac:	60bb      	str	r3, [r7, #8]
 80053ae:	4b7f      	ldr	r3, [pc, #508]	@ (80055ac <HAL_RCC_OscConfig+0x4ac>)
 80053b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b2:	4a7e      	ldr	r2, [pc, #504]	@ (80055ac <HAL_RCC_OscConfig+0x4ac>)
 80053b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80053ba:	4b7c      	ldr	r3, [pc, #496]	@ (80055ac <HAL_RCC_OscConfig+0x4ac>)
 80053bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053c2:	60bb      	str	r3, [r7, #8]
 80053c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053c6:	2301      	movs	r3, #1
 80053c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053ca:	4b79      	ldr	r3, [pc, #484]	@ (80055b0 <HAL_RCC_OscConfig+0x4b0>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d118      	bne.n	8005408 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053d6:	4b76      	ldr	r3, [pc, #472]	@ (80055b0 <HAL_RCC_OscConfig+0x4b0>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a75      	ldr	r2, [pc, #468]	@ (80055b0 <HAL_RCC_OscConfig+0x4b0>)
 80053dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053e2:	f7fc fded 	bl	8001fc0 <HAL_GetTick>
 80053e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053e8:	e008      	b.n	80053fc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053ea:	f7fc fde9 	bl	8001fc0 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d901      	bls.n	80053fc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e118      	b.n	800562e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053fc:	4b6c      	ldr	r3, [pc, #432]	@ (80055b0 <HAL_RCC_OscConfig+0x4b0>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005404:	2b00      	cmp	r3, #0
 8005406:	d0f0      	beq.n	80053ea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d106      	bne.n	800541e <HAL_RCC_OscConfig+0x31e>
 8005410:	4b66      	ldr	r3, [pc, #408]	@ (80055ac <HAL_RCC_OscConfig+0x4ac>)
 8005412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005414:	4a65      	ldr	r2, [pc, #404]	@ (80055ac <HAL_RCC_OscConfig+0x4ac>)
 8005416:	f043 0301 	orr.w	r3, r3, #1
 800541a:	6713      	str	r3, [r2, #112]	@ 0x70
 800541c:	e01c      	b.n	8005458 <HAL_RCC_OscConfig+0x358>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	2b05      	cmp	r3, #5
 8005424:	d10c      	bne.n	8005440 <HAL_RCC_OscConfig+0x340>
 8005426:	4b61      	ldr	r3, [pc, #388]	@ (80055ac <HAL_RCC_OscConfig+0x4ac>)
 8005428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800542a:	4a60      	ldr	r2, [pc, #384]	@ (80055ac <HAL_RCC_OscConfig+0x4ac>)
 800542c:	f043 0304 	orr.w	r3, r3, #4
 8005430:	6713      	str	r3, [r2, #112]	@ 0x70
 8005432:	4b5e      	ldr	r3, [pc, #376]	@ (80055ac <HAL_RCC_OscConfig+0x4ac>)
 8005434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005436:	4a5d      	ldr	r2, [pc, #372]	@ (80055ac <HAL_RCC_OscConfig+0x4ac>)
 8005438:	f043 0301 	orr.w	r3, r3, #1
 800543c:	6713      	str	r3, [r2, #112]	@ 0x70
 800543e:	e00b      	b.n	8005458 <HAL_RCC_OscConfig+0x358>
 8005440:	4b5a      	ldr	r3, [pc, #360]	@ (80055ac <HAL_RCC_OscConfig+0x4ac>)
 8005442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005444:	4a59      	ldr	r2, [pc, #356]	@ (80055ac <HAL_RCC_OscConfig+0x4ac>)
 8005446:	f023 0301 	bic.w	r3, r3, #1
 800544a:	6713      	str	r3, [r2, #112]	@ 0x70
 800544c:	4b57      	ldr	r3, [pc, #348]	@ (80055ac <HAL_RCC_OscConfig+0x4ac>)
 800544e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005450:	4a56      	ldr	r2, [pc, #344]	@ (80055ac <HAL_RCC_OscConfig+0x4ac>)
 8005452:	f023 0304 	bic.w	r3, r3, #4
 8005456:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d015      	beq.n	800548c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005460:	f7fc fdae 	bl	8001fc0 <HAL_GetTick>
 8005464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005466:	e00a      	b.n	800547e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005468:	f7fc fdaa 	bl	8001fc0 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005476:	4293      	cmp	r3, r2
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e0d7      	b.n	800562e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800547e:	4b4b      	ldr	r3, [pc, #300]	@ (80055ac <HAL_RCC_OscConfig+0x4ac>)
 8005480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d0ee      	beq.n	8005468 <HAL_RCC_OscConfig+0x368>
 800548a:	e014      	b.n	80054b6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800548c:	f7fc fd98 	bl	8001fc0 <HAL_GetTick>
 8005490:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005492:	e00a      	b.n	80054aa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005494:	f7fc fd94 	bl	8001fc0 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e0c1      	b.n	800562e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054aa:	4b40      	ldr	r3, [pc, #256]	@ (80055ac <HAL_RCC_OscConfig+0x4ac>)
 80054ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1ee      	bne.n	8005494 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80054b6:	7dfb      	ldrb	r3, [r7, #23]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d105      	bne.n	80054c8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054bc:	4b3b      	ldr	r3, [pc, #236]	@ (80055ac <HAL_RCC_OscConfig+0x4ac>)
 80054be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c0:	4a3a      	ldr	r2, [pc, #232]	@ (80055ac <HAL_RCC_OscConfig+0x4ac>)
 80054c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f000 80ad 	beq.w	800562c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054d2:	4b36      	ldr	r3, [pc, #216]	@ (80055ac <HAL_RCC_OscConfig+0x4ac>)
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f003 030c 	and.w	r3, r3, #12
 80054da:	2b08      	cmp	r3, #8
 80054dc:	d060      	beq.n	80055a0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d145      	bne.n	8005572 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054e6:	4b33      	ldr	r3, [pc, #204]	@ (80055b4 <HAL_RCC_OscConfig+0x4b4>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ec:	f7fc fd68 	bl	8001fc0 <HAL_GetTick>
 80054f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054f2:	e008      	b.n	8005506 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054f4:	f7fc fd64 	bl	8001fc0 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d901      	bls.n	8005506 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e093      	b.n	800562e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005506:	4b29      	ldr	r3, [pc, #164]	@ (80055ac <HAL_RCC_OscConfig+0x4ac>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1f0      	bne.n	80054f4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	69da      	ldr	r2, [r3, #28]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	431a      	orrs	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005520:	019b      	lsls	r3, r3, #6
 8005522:	431a      	orrs	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005528:	085b      	lsrs	r3, r3, #1
 800552a:	3b01      	subs	r3, #1
 800552c:	041b      	lsls	r3, r3, #16
 800552e:	431a      	orrs	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005534:	061b      	lsls	r3, r3, #24
 8005536:	431a      	orrs	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800553c:	071b      	lsls	r3, r3, #28
 800553e:	491b      	ldr	r1, [pc, #108]	@ (80055ac <HAL_RCC_OscConfig+0x4ac>)
 8005540:	4313      	orrs	r3, r2
 8005542:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005544:	4b1b      	ldr	r3, [pc, #108]	@ (80055b4 <HAL_RCC_OscConfig+0x4b4>)
 8005546:	2201      	movs	r2, #1
 8005548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800554a:	f7fc fd39 	bl	8001fc0 <HAL_GetTick>
 800554e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005550:	e008      	b.n	8005564 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005552:	f7fc fd35 	bl	8001fc0 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	2b02      	cmp	r3, #2
 800555e:	d901      	bls.n	8005564 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e064      	b.n	800562e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005564:	4b11      	ldr	r3, [pc, #68]	@ (80055ac <HAL_RCC_OscConfig+0x4ac>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d0f0      	beq.n	8005552 <HAL_RCC_OscConfig+0x452>
 8005570:	e05c      	b.n	800562c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005572:	4b10      	ldr	r3, [pc, #64]	@ (80055b4 <HAL_RCC_OscConfig+0x4b4>)
 8005574:	2200      	movs	r2, #0
 8005576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005578:	f7fc fd22 	bl	8001fc0 <HAL_GetTick>
 800557c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800557e:	e008      	b.n	8005592 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005580:	f7fc fd1e 	bl	8001fc0 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b02      	cmp	r3, #2
 800558c:	d901      	bls.n	8005592 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e04d      	b.n	800562e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005592:	4b06      	ldr	r3, [pc, #24]	@ (80055ac <HAL_RCC_OscConfig+0x4ac>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1f0      	bne.n	8005580 <HAL_RCC_OscConfig+0x480>
 800559e:	e045      	b.n	800562c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d107      	bne.n	80055b8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e040      	b.n	800562e <HAL_RCC_OscConfig+0x52e>
 80055ac:	40023800 	.word	0x40023800
 80055b0:	40007000 	.word	0x40007000
 80055b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80055b8:	4b1f      	ldr	r3, [pc, #124]	@ (8005638 <HAL_RCC_OscConfig+0x538>)
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d030      	beq.n	8005628 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d129      	bne.n	8005628 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055de:	429a      	cmp	r2, r3
 80055e0:	d122      	bne.n	8005628 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80055e8:	4013      	ands	r3, r2
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80055ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d119      	bne.n	8005628 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055fe:	085b      	lsrs	r3, r3, #1
 8005600:	3b01      	subs	r3, #1
 8005602:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005604:	429a      	cmp	r2, r3
 8005606:	d10f      	bne.n	8005628 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005612:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005614:	429a      	cmp	r2, r3
 8005616:	d107      	bne.n	8005628 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005622:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005624:	429a      	cmp	r2, r3
 8005626:	d001      	beq.n	800562c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e000      	b.n	800562e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3718      	adds	r7, #24
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	40023800 	.word	0x40023800

0800563c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e041      	b.n	80056d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d106      	bne.n	8005668 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f7fc fad4 	bl	8001c10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2202      	movs	r2, #2
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	3304      	adds	r3, #4
 8005678:	4619      	mov	r1, r3
 800567a:	4610      	mov	r0, r2
 800567c:	f000 fc70 	bl	8005f60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3708      	adds	r7, #8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
	...

080056dc <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
 80056e8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80056ea:	2300      	movs	r3, #0
 80056ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d109      	bne.n	8005708 <HAL_TIM_PWM_Start_DMA+0x2c>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	bf0c      	ite	eq
 8005700:	2301      	moveq	r3, #1
 8005702:	2300      	movne	r3, #0
 8005704:	b2db      	uxtb	r3, r3
 8005706:	e022      	b.n	800574e <HAL_TIM_PWM_Start_DMA+0x72>
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	2b04      	cmp	r3, #4
 800570c:	d109      	bne.n	8005722 <HAL_TIM_PWM_Start_DMA+0x46>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b02      	cmp	r3, #2
 8005718:	bf0c      	ite	eq
 800571a:	2301      	moveq	r3, #1
 800571c:	2300      	movne	r3, #0
 800571e:	b2db      	uxtb	r3, r3
 8005720:	e015      	b.n	800574e <HAL_TIM_PWM_Start_DMA+0x72>
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2b08      	cmp	r3, #8
 8005726:	d109      	bne.n	800573c <HAL_TIM_PWM_Start_DMA+0x60>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b02      	cmp	r3, #2
 8005732:	bf0c      	ite	eq
 8005734:	2301      	moveq	r3, #1
 8005736:	2300      	movne	r3, #0
 8005738:	b2db      	uxtb	r3, r3
 800573a:	e008      	b.n	800574e <HAL_TIM_PWM_Start_DMA+0x72>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b02      	cmp	r3, #2
 8005746:	bf0c      	ite	eq
 8005748:	2301      	moveq	r3, #1
 800574a:	2300      	movne	r3, #0
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8005752:	2302      	movs	r3, #2
 8005754:	e171      	b.n	8005a3a <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d109      	bne.n	8005770 <HAL_TIM_PWM_Start_DMA+0x94>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b01      	cmp	r3, #1
 8005766:	bf0c      	ite	eq
 8005768:	2301      	moveq	r3, #1
 800576a:	2300      	movne	r3, #0
 800576c:	b2db      	uxtb	r3, r3
 800576e:	e022      	b.n	80057b6 <HAL_TIM_PWM_Start_DMA+0xda>
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	2b04      	cmp	r3, #4
 8005774:	d109      	bne.n	800578a <HAL_TIM_PWM_Start_DMA+0xae>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b01      	cmp	r3, #1
 8005780:	bf0c      	ite	eq
 8005782:	2301      	moveq	r3, #1
 8005784:	2300      	movne	r3, #0
 8005786:	b2db      	uxtb	r3, r3
 8005788:	e015      	b.n	80057b6 <HAL_TIM_PWM_Start_DMA+0xda>
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	2b08      	cmp	r3, #8
 800578e:	d109      	bne.n	80057a4 <HAL_TIM_PWM_Start_DMA+0xc8>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b01      	cmp	r3, #1
 800579a:	bf0c      	ite	eq
 800579c:	2301      	moveq	r3, #1
 800579e:	2300      	movne	r3, #0
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	e008      	b.n	80057b6 <HAL_TIM_PWM_Start_DMA+0xda>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	bf0c      	ite	eq
 80057b0:	2301      	moveq	r3, #1
 80057b2:	2300      	movne	r3, #0
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d024      	beq.n	8005804 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d002      	beq.n	80057c6 <HAL_TIM_PWM_Start_DMA+0xea>
 80057c0:	887b      	ldrh	r3, [r7, #2]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e137      	b.n	8005a3a <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d104      	bne.n	80057da <HAL_TIM_PWM_Start_DMA+0xfe>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2202      	movs	r2, #2
 80057d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057d8:	e016      	b.n	8005808 <HAL_TIM_PWM_Start_DMA+0x12c>
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	2b04      	cmp	r3, #4
 80057de:	d104      	bne.n	80057ea <HAL_TIM_PWM_Start_DMA+0x10e>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2202      	movs	r2, #2
 80057e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057e8:	e00e      	b.n	8005808 <HAL_TIM_PWM_Start_DMA+0x12c>
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	2b08      	cmp	r3, #8
 80057ee:	d104      	bne.n	80057fa <HAL_TIM_PWM_Start_DMA+0x11e>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2202      	movs	r2, #2
 80057f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057f8:	e006      	b.n	8005808 <HAL_TIM_PWM_Start_DMA+0x12c>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2202      	movs	r2, #2
 80057fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005802:	e001      	b.n	8005808 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e118      	b.n	8005a3a <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	2b0c      	cmp	r3, #12
 800580c:	f200 80ae 	bhi.w	800596c <HAL_TIM_PWM_Start_DMA+0x290>
 8005810:	a201      	add	r2, pc, #4	@ (adr r2, 8005818 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8005812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005816:	bf00      	nop
 8005818:	0800584d 	.word	0x0800584d
 800581c:	0800596d 	.word	0x0800596d
 8005820:	0800596d 	.word	0x0800596d
 8005824:	0800596d 	.word	0x0800596d
 8005828:	08005895 	.word	0x08005895
 800582c:	0800596d 	.word	0x0800596d
 8005830:	0800596d 	.word	0x0800596d
 8005834:	0800596d 	.word	0x0800596d
 8005838:	080058dd 	.word	0x080058dd
 800583c:	0800596d 	.word	0x0800596d
 8005840:	0800596d 	.word	0x0800596d
 8005844:	0800596d 	.word	0x0800596d
 8005848:	08005925 	.word	0x08005925
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005850:	4a7c      	ldr	r2, [pc, #496]	@ (8005a44 <HAL_TIM_PWM_Start_DMA+0x368>)
 8005852:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005858:	4a7b      	ldr	r2, [pc, #492]	@ (8005a48 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800585a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005860:	4a7a      	ldr	r2, [pc, #488]	@ (8005a4c <HAL_TIM_PWM_Start_DMA+0x370>)
 8005862:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8005868:	6879      	ldr	r1, [r7, #4]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	3334      	adds	r3, #52	@ 0x34
 8005870:	461a      	mov	r2, r3
 8005872:	887b      	ldrh	r3, [r7, #2]
 8005874:	f7fc fd94 	bl	80023a0 <HAL_DMA_Start_IT>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d001      	beq.n	8005882 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e0db      	b.n	8005a3a <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68da      	ldr	r2, [r3, #12]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005890:	60da      	str	r2, [r3, #12]
      break;
 8005892:	e06e      	b.n	8005972 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005898:	4a6a      	ldr	r2, [pc, #424]	@ (8005a44 <HAL_TIM_PWM_Start_DMA+0x368>)
 800589a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a0:	4a69      	ldr	r2, [pc, #420]	@ (8005a48 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80058a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a8:	4a68      	ldr	r2, [pc, #416]	@ (8005a4c <HAL_TIM_PWM_Start_DMA+0x370>)
 80058aa:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80058b0:	6879      	ldr	r1, [r7, #4]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	3338      	adds	r3, #56	@ 0x38
 80058b8:	461a      	mov	r2, r3
 80058ba:	887b      	ldrh	r3, [r7, #2]
 80058bc:	f7fc fd70 	bl	80023a0 <HAL_DMA_Start_IT>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e0b7      	b.n	8005a3a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68da      	ldr	r2, [r3, #12]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80058d8:	60da      	str	r2, [r3, #12]
      break;
 80058da:	e04a      	b.n	8005972 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058e0:	4a58      	ldr	r2, [pc, #352]	@ (8005a44 <HAL_TIM_PWM_Start_DMA+0x368>)
 80058e2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058e8:	4a57      	ldr	r2, [pc, #348]	@ (8005a48 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80058ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f0:	4a56      	ldr	r2, [pc, #344]	@ (8005a4c <HAL_TIM_PWM_Start_DMA+0x370>)
 80058f2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80058f8:	6879      	ldr	r1, [r7, #4]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	333c      	adds	r3, #60	@ 0x3c
 8005900:	461a      	mov	r2, r3
 8005902:	887b      	ldrh	r3, [r7, #2]
 8005904:	f7fc fd4c 	bl	80023a0 <HAL_DMA_Start_IT>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e093      	b.n	8005a3a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68da      	ldr	r2, [r3, #12]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005920:	60da      	str	r2, [r3, #12]
      break;
 8005922:	e026      	b.n	8005972 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005928:	4a46      	ldr	r2, [pc, #280]	@ (8005a44 <HAL_TIM_PWM_Start_DMA+0x368>)
 800592a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005930:	4a45      	ldr	r2, [pc, #276]	@ (8005a48 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8005932:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005938:	4a44      	ldr	r2, [pc, #272]	@ (8005a4c <HAL_TIM_PWM_Start_DMA+0x370>)
 800593a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005940:	6879      	ldr	r1, [r7, #4]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	3340      	adds	r3, #64	@ 0x40
 8005948:	461a      	mov	r2, r3
 800594a:	887b      	ldrh	r3, [r7, #2]
 800594c:	f7fc fd28 	bl	80023a0 <HAL_DMA_Start_IT>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e06f      	b.n	8005a3a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68da      	ldr	r2, [r3, #12]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005968:	60da      	str	r2, [r3, #12]
      break;
 800596a:	e002      	b.n	8005972 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	75fb      	strb	r3, [r7, #23]
      break;
 8005970:	bf00      	nop
  }

  if (status == HAL_OK)
 8005972:	7dfb      	ldrb	r3, [r7, #23]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d15f      	bne.n	8005a38 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2201      	movs	r2, #1
 800597e:	68b9      	ldr	r1, [r7, #8]
 8005980:	4618      	mov	r0, r3
 8005982:	f000 fd43 	bl	800640c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a31      	ldr	r2, [pc, #196]	@ (8005a50 <HAL_TIM_PWM_Start_DMA+0x374>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d004      	beq.n	800599a <HAL_TIM_PWM_Start_DMA+0x2be>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a2f      	ldr	r2, [pc, #188]	@ (8005a54 <HAL_TIM_PWM_Start_DMA+0x378>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d101      	bne.n	800599e <HAL_TIM_PWM_Start_DMA+0x2c2>
 800599a:	2301      	movs	r3, #1
 800599c:	e000      	b.n	80059a0 <HAL_TIM_PWM_Start_DMA+0x2c4>
 800599e:	2300      	movs	r3, #0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d007      	beq.n	80059b4 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80059b2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a25      	ldr	r2, [pc, #148]	@ (8005a50 <HAL_TIM_PWM_Start_DMA+0x374>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d022      	beq.n	8005a04 <HAL_TIM_PWM_Start_DMA+0x328>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059c6:	d01d      	beq.n	8005a04 <HAL_TIM_PWM_Start_DMA+0x328>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a22      	ldr	r2, [pc, #136]	@ (8005a58 <HAL_TIM_PWM_Start_DMA+0x37c>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d018      	beq.n	8005a04 <HAL_TIM_PWM_Start_DMA+0x328>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a21      	ldr	r2, [pc, #132]	@ (8005a5c <HAL_TIM_PWM_Start_DMA+0x380>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d013      	beq.n	8005a04 <HAL_TIM_PWM_Start_DMA+0x328>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a1f      	ldr	r2, [pc, #124]	@ (8005a60 <HAL_TIM_PWM_Start_DMA+0x384>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d00e      	beq.n	8005a04 <HAL_TIM_PWM_Start_DMA+0x328>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a1a      	ldr	r2, [pc, #104]	@ (8005a54 <HAL_TIM_PWM_Start_DMA+0x378>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d009      	beq.n	8005a04 <HAL_TIM_PWM_Start_DMA+0x328>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005a64 <HAL_TIM_PWM_Start_DMA+0x388>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d004      	beq.n	8005a04 <HAL_TIM_PWM_Start_DMA+0x328>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a1a      	ldr	r2, [pc, #104]	@ (8005a68 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d111      	bne.n	8005a28 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f003 0307 	and.w	r3, r3, #7
 8005a0e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	2b06      	cmp	r3, #6
 8005a14:	d010      	beq.n	8005a38 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f042 0201 	orr.w	r2, r2, #1
 8005a24:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a26:	e007      	b.n	8005a38 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f042 0201 	orr.w	r2, r2, #1
 8005a36:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3718      	adds	r7, #24
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	08005e4f 	.word	0x08005e4f
 8005a48:	08005ef7 	.word	0x08005ef7
 8005a4c:	08005dbd 	.word	0x08005dbd
 8005a50:	40010000 	.word	0x40010000
 8005a54:	40010400 	.word	0x40010400
 8005a58:	40000400 	.word	0x40000400
 8005a5c:	40000800 	.word	0x40000800
 8005a60:	40000c00 	.word	0x40000c00
 8005a64:	40014000 	.word	0x40014000
 8005a68:	40001800 	.word	0x40001800

08005a6c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a76:	2300      	movs	r3, #0
 8005a78:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2b0c      	cmp	r3, #12
 8005a7e:	d855      	bhi.n	8005b2c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005a80:	a201      	add	r2, pc, #4	@ (adr r2, 8005a88 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8005a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a86:	bf00      	nop
 8005a88:	08005abd 	.word	0x08005abd
 8005a8c:	08005b2d 	.word	0x08005b2d
 8005a90:	08005b2d 	.word	0x08005b2d
 8005a94:	08005b2d 	.word	0x08005b2d
 8005a98:	08005ad9 	.word	0x08005ad9
 8005a9c:	08005b2d 	.word	0x08005b2d
 8005aa0:	08005b2d 	.word	0x08005b2d
 8005aa4:	08005b2d 	.word	0x08005b2d
 8005aa8:	08005af5 	.word	0x08005af5
 8005aac:	08005b2d 	.word	0x08005b2d
 8005ab0:	08005b2d 	.word	0x08005b2d
 8005ab4:	08005b2d 	.word	0x08005b2d
 8005ab8:	08005b11 	.word	0x08005b11
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68da      	ldr	r2, [r3, #12]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005aca:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7fc fcbd 	bl	8002450 <HAL_DMA_Abort_IT>
      break;
 8005ad6:	e02c      	b.n	8005b32 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68da      	ldr	r2, [r3, #12]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ae6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7fc fcaf 	bl	8002450 <HAL_DMA_Abort_IT>
      break;
 8005af2:	e01e      	b.n	8005b32 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68da      	ldr	r2, [r3, #12]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b02:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7fc fca1 	bl	8002450 <HAL_DMA_Abort_IT>
      break;
 8005b0e:	e010      	b.n	8005b32 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68da      	ldr	r2, [r3, #12]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005b1e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7fc fc93 	bl	8002450 <HAL_DMA_Abort_IT>
      break;
 8005b2a:	e002      	b.n	8005b32 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b30:	bf00      	nop
  }

  if (status == HAL_OK)
 8005b32:	7bfb      	ldrb	r3, [r7, #15]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d161      	bne.n	8005bfc <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	6839      	ldr	r1, [r7, #0]
 8005b40:	4618      	mov	r0, r3
 8005b42:	f000 fc63 	bl	800640c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a2f      	ldr	r2, [pc, #188]	@ (8005c08 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d004      	beq.n	8005b5a <HAL_TIM_PWM_Stop_DMA+0xee>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a2d      	ldr	r2, [pc, #180]	@ (8005c0c <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d101      	bne.n	8005b5e <HAL_TIM_PWM_Stop_DMA+0xf2>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e000      	b.n	8005b60 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8005b5e:	2300      	movs	r3, #0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d017      	beq.n	8005b94 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6a1a      	ldr	r2, [r3, #32]
 8005b6a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005b6e:	4013      	ands	r3, r2
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10f      	bne.n	8005b94 <HAL_TIM_PWM_Stop_DMA+0x128>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	6a1a      	ldr	r2, [r3, #32]
 8005b7a:	f240 4344 	movw	r3, #1092	@ 0x444
 8005b7e:	4013      	ands	r3, r2
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d107      	bne.n	8005b94 <HAL_TIM_PWM_Stop_DMA+0x128>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b92:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6a1a      	ldr	r2, [r3, #32]
 8005b9a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10f      	bne.n	8005bc4 <HAL_TIM_PWM_Stop_DMA+0x158>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6a1a      	ldr	r2, [r3, #32]
 8005baa:	f240 4344 	movw	r3, #1092	@ 0x444
 8005bae:	4013      	ands	r3, r2
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d107      	bne.n	8005bc4 <HAL_TIM_PWM_Stop_DMA+0x158>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f022 0201 	bic.w	r2, r2, #1
 8005bc2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d104      	bne.n	8005bd4 <HAL_TIM_PWM_Stop_DMA+0x168>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005bd2:	e013      	b.n	8005bfc <HAL_TIM_PWM_Stop_DMA+0x190>
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	2b04      	cmp	r3, #4
 8005bd8:	d104      	bne.n	8005be4 <HAL_TIM_PWM_Stop_DMA+0x178>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005be2:	e00b      	b.n	8005bfc <HAL_TIM_PWM_Stop_DMA+0x190>
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	2b08      	cmp	r3, #8
 8005be8:	d104      	bne.n	8005bf4 <HAL_TIM_PWM_Stop_DMA+0x188>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005bf2:	e003      	b.n	8005bfc <HAL_TIM_PWM_Stop_DMA+0x190>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8005bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	40010000 	.word	0x40010000
 8005c0c:	40010400 	.word	0x40010400

08005c10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d101      	bne.n	8005c2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	e0ae      	b.n	8005d8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b0c      	cmp	r3, #12
 8005c3a:	f200 809f 	bhi.w	8005d7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c44:	08005c79 	.word	0x08005c79
 8005c48:	08005d7d 	.word	0x08005d7d
 8005c4c:	08005d7d 	.word	0x08005d7d
 8005c50:	08005d7d 	.word	0x08005d7d
 8005c54:	08005cb9 	.word	0x08005cb9
 8005c58:	08005d7d 	.word	0x08005d7d
 8005c5c:	08005d7d 	.word	0x08005d7d
 8005c60:	08005d7d 	.word	0x08005d7d
 8005c64:	08005cfb 	.word	0x08005cfb
 8005c68:	08005d7d 	.word	0x08005d7d
 8005c6c:	08005d7d 	.word	0x08005d7d
 8005c70:	08005d7d 	.word	0x08005d7d
 8005c74:	08005d3b 	.word	0x08005d3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68b9      	ldr	r1, [r7, #8]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f000 fa14 	bl	80060ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	699a      	ldr	r2, [r3, #24]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f042 0208 	orr.w	r2, r2, #8
 8005c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	699a      	ldr	r2, [r3, #24]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f022 0204 	bic.w	r2, r2, #4
 8005ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6999      	ldr	r1, [r3, #24]
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	691a      	ldr	r2, [r3, #16]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	619a      	str	r2, [r3, #24]
      break;
 8005cb6:	e064      	b.n	8005d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68b9      	ldr	r1, [r7, #8]
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f000 fa64 	bl	800618c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	699a      	ldr	r2, [r3, #24]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	699a      	ldr	r2, [r3, #24]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ce2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	6999      	ldr	r1, [r3, #24]
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	021a      	lsls	r2, r3, #8
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	619a      	str	r2, [r3, #24]
      break;
 8005cf8:	e043      	b.n	8005d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68b9      	ldr	r1, [r7, #8]
 8005d00:	4618      	mov	r0, r3
 8005d02:	f000 fab9 	bl	8006278 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	69da      	ldr	r2, [r3, #28]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f042 0208 	orr.w	r2, r2, #8
 8005d14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	69da      	ldr	r2, [r3, #28]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 0204 	bic.w	r2, r2, #4
 8005d24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	69d9      	ldr	r1, [r3, #28]
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	691a      	ldr	r2, [r3, #16]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	61da      	str	r2, [r3, #28]
      break;
 8005d38:	e023      	b.n	8005d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68b9      	ldr	r1, [r7, #8]
 8005d40:	4618      	mov	r0, r3
 8005d42:	f000 fb0d 	bl	8006360 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	69da      	ldr	r2, [r3, #28]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	69da      	ldr	r2, [r3, #28]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	69d9      	ldr	r1, [r3, #28]
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	021a      	lsls	r2, r3, #8
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	430a      	orrs	r2, r1
 8005d78:	61da      	str	r2, [r3, #28]
      break;
 8005d7a:	e002      	b.n	8005d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3718      	adds	r7, #24
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d107      	bne.n	8005de4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005de2:	e02a      	b.n	8005e3a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d107      	bne.n	8005dfe <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2202      	movs	r2, #2
 8005df2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005dfc:	e01d      	b.n	8005e3a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d107      	bne.n	8005e18 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2204      	movs	r2, #4
 8005e0c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e16:	e010      	b.n	8005e3a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d107      	bne.n	8005e32 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2208      	movs	r2, #8
 8005e26:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e30:	e003      	b.n	8005e3a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f7ff ffb4 	bl	8005da8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	771a      	strb	r2, [r3, #28]
}
 8005e46:	bf00      	nop
 8005e48:	3710      	adds	r7, #16
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b084      	sub	sp, #16
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e5a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d10b      	bne.n	8005e7e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	69db      	ldr	r3, [r3, #28]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d136      	bne.n	8005ee2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e7c:	e031      	b.n	8005ee2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d10b      	bne.n	8005ea0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	69db      	ldr	r3, [r3, #28]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d125      	bne.n	8005ee2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e9e:	e020      	b.n	8005ee2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d10b      	bne.n	8005ec2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2204      	movs	r2, #4
 8005eae:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	69db      	ldr	r3, [r3, #28]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d114      	bne.n	8005ee2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ec0:	e00f      	b.n	8005ee2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d10a      	bne.n	8005ee2 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2208      	movs	r2, #8
 8005ed0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d103      	bne.n	8005ee2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f7fb f994 	bl	8001210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	771a      	strb	r2, [r3, #28]
}
 8005eee:	bf00      	nop
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b084      	sub	sp, #16
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f02:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d103      	bne.n	8005f16 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2201      	movs	r2, #1
 8005f12:	771a      	strb	r2, [r3, #28]
 8005f14:	e019      	b.n	8005f4a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d103      	bne.n	8005f28 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2202      	movs	r2, #2
 8005f24:	771a      	strb	r2, [r3, #28]
 8005f26:	e010      	b.n	8005f4a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d103      	bne.n	8005f3a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2204      	movs	r2, #4
 8005f36:	771a      	strb	r2, [r3, #28]
 8005f38:	e007      	b.n	8005f4a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d102      	bne.n	8005f4a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2208      	movs	r2, #8
 8005f48:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f7ff ff22 	bl	8005d94 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	771a      	strb	r2, [r3, #28]
}
 8005f56:	bf00      	nop
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
	...

08005f60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a43      	ldr	r2, [pc, #268]	@ (8006080 <TIM_Base_SetConfig+0x120>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d013      	beq.n	8005fa0 <TIM_Base_SetConfig+0x40>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f7e:	d00f      	beq.n	8005fa0 <TIM_Base_SetConfig+0x40>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a40      	ldr	r2, [pc, #256]	@ (8006084 <TIM_Base_SetConfig+0x124>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d00b      	beq.n	8005fa0 <TIM_Base_SetConfig+0x40>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a3f      	ldr	r2, [pc, #252]	@ (8006088 <TIM_Base_SetConfig+0x128>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d007      	beq.n	8005fa0 <TIM_Base_SetConfig+0x40>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a3e      	ldr	r2, [pc, #248]	@ (800608c <TIM_Base_SetConfig+0x12c>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d003      	beq.n	8005fa0 <TIM_Base_SetConfig+0x40>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a3d      	ldr	r2, [pc, #244]	@ (8006090 <TIM_Base_SetConfig+0x130>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d108      	bne.n	8005fb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a32      	ldr	r2, [pc, #200]	@ (8006080 <TIM_Base_SetConfig+0x120>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d02b      	beq.n	8006012 <TIM_Base_SetConfig+0xb2>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fc0:	d027      	beq.n	8006012 <TIM_Base_SetConfig+0xb2>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a2f      	ldr	r2, [pc, #188]	@ (8006084 <TIM_Base_SetConfig+0x124>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d023      	beq.n	8006012 <TIM_Base_SetConfig+0xb2>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a2e      	ldr	r2, [pc, #184]	@ (8006088 <TIM_Base_SetConfig+0x128>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d01f      	beq.n	8006012 <TIM_Base_SetConfig+0xb2>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a2d      	ldr	r2, [pc, #180]	@ (800608c <TIM_Base_SetConfig+0x12c>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d01b      	beq.n	8006012 <TIM_Base_SetConfig+0xb2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a2c      	ldr	r2, [pc, #176]	@ (8006090 <TIM_Base_SetConfig+0x130>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d017      	beq.n	8006012 <TIM_Base_SetConfig+0xb2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a2b      	ldr	r2, [pc, #172]	@ (8006094 <TIM_Base_SetConfig+0x134>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d013      	beq.n	8006012 <TIM_Base_SetConfig+0xb2>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a2a      	ldr	r2, [pc, #168]	@ (8006098 <TIM_Base_SetConfig+0x138>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d00f      	beq.n	8006012 <TIM_Base_SetConfig+0xb2>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a29      	ldr	r2, [pc, #164]	@ (800609c <TIM_Base_SetConfig+0x13c>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d00b      	beq.n	8006012 <TIM_Base_SetConfig+0xb2>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a28      	ldr	r2, [pc, #160]	@ (80060a0 <TIM_Base_SetConfig+0x140>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d007      	beq.n	8006012 <TIM_Base_SetConfig+0xb2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a27      	ldr	r2, [pc, #156]	@ (80060a4 <TIM_Base_SetConfig+0x144>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d003      	beq.n	8006012 <TIM_Base_SetConfig+0xb2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a26      	ldr	r2, [pc, #152]	@ (80060a8 <TIM_Base_SetConfig+0x148>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d108      	bne.n	8006024 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006018:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	4313      	orrs	r3, r2
 8006022:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	4313      	orrs	r3, r2
 8006030:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	689a      	ldr	r2, [r3, #8]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a0e      	ldr	r2, [pc, #56]	@ (8006080 <TIM_Base_SetConfig+0x120>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d003      	beq.n	8006052 <TIM_Base_SetConfig+0xf2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a10      	ldr	r2, [pc, #64]	@ (8006090 <TIM_Base_SetConfig+0x130>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d103      	bne.n	800605a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	691a      	ldr	r2, [r3, #16]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f043 0204 	orr.w	r2, r3, #4
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2201      	movs	r2, #1
 800606a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	601a      	str	r2, [r3, #0]
}
 8006072:	bf00      	nop
 8006074:	3714      	adds	r7, #20
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	40010000 	.word	0x40010000
 8006084:	40000400 	.word	0x40000400
 8006088:	40000800 	.word	0x40000800
 800608c:	40000c00 	.word	0x40000c00
 8006090:	40010400 	.word	0x40010400
 8006094:	40014000 	.word	0x40014000
 8006098:	40014400 	.word	0x40014400
 800609c:	40014800 	.word	0x40014800
 80060a0:	40001800 	.word	0x40001800
 80060a4:	40001c00 	.word	0x40001c00
 80060a8:	40002000 	.word	0x40002000

080060ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b087      	sub	sp, #28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	f023 0201 	bic.w	r2, r3, #1
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f023 0303 	bic.w	r3, r3, #3
 80060e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f023 0302 	bic.w	r3, r3, #2
 80060f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a20      	ldr	r2, [pc, #128]	@ (8006184 <TIM_OC1_SetConfig+0xd8>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d003      	beq.n	8006110 <TIM_OC1_SetConfig+0x64>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a1f      	ldr	r2, [pc, #124]	@ (8006188 <TIM_OC1_SetConfig+0xdc>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d10c      	bne.n	800612a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	f023 0308 	bic.w	r3, r3, #8
 8006116:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	4313      	orrs	r3, r2
 8006120:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f023 0304 	bic.w	r3, r3, #4
 8006128:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a15      	ldr	r2, [pc, #84]	@ (8006184 <TIM_OC1_SetConfig+0xd8>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d003      	beq.n	800613a <TIM_OC1_SetConfig+0x8e>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a14      	ldr	r2, [pc, #80]	@ (8006188 <TIM_OC1_SetConfig+0xdc>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d111      	bne.n	800615e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006140:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006148:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	695b      	ldr	r3, [r3, #20]
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	4313      	orrs	r3, r2
 8006152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	4313      	orrs	r3, r2
 800615c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	621a      	str	r2, [r3, #32]
}
 8006178:	bf00      	nop
 800617a:	371c      	adds	r7, #28
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr
 8006184:	40010000 	.word	0x40010000
 8006188:	40010400 	.word	0x40010400

0800618c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800618c:	b480      	push	{r7}
 800618e:	b087      	sub	sp, #28
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a1b      	ldr	r3, [r3, #32]
 80061a0:	f023 0210 	bic.w	r2, r3, #16
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	021b      	lsls	r3, r3, #8
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	f023 0320 	bic.w	r3, r3, #32
 80061d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	011b      	lsls	r3, r3, #4
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a22      	ldr	r2, [pc, #136]	@ (8006270 <TIM_OC2_SetConfig+0xe4>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d003      	beq.n	80061f4 <TIM_OC2_SetConfig+0x68>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a21      	ldr	r2, [pc, #132]	@ (8006274 <TIM_OC2_SetConfig+0xe8>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d10d      	bne.n	8006210 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	011b      	lsls	r3, r3, #4
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	4313      	orrs	r3, r2
 8006206:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800620e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a17      	ldr	r2, [pc, #92]	@ (8006270 <TIM_OC2_SetConfig+0xe4>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d003      	beq.n	8006220 <TIM_OC2_SetConfig+0x94>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a16      	ldr	r2, [pc, #88]	@ (8006274 <TIM_OC2_SetConfig+0xe8>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d113      	bne.n	8006248 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006226:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800622e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	695b      	ldr	r3, [r3, #20]
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	4313      	orrs	r3, r2
 800623a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	699b      	ldr	r3, [r3, #24]
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	4313      	orrs	r3, r2
 8006246:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	685a      	ldr	r2, [r3, #4]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	621a      	str	r2, [r3, #32]
}
 8006262:	bf00      	nop
 8006264:	371c      	adds	r7, #28
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	40010000 	.word	0x40010000
 8006274:	40010400 	.word	0x40010400

08006278 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006278:	b480      	push	{r7}
 800627a:	b087      	sub	sp, #28
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a1b      	ldr	r3, [r3, #32]
 800628c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f023 0303 	bic.w	r3, r3, #3
 80062ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80062c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	021b      	lsls	r3, r3, #8
 80062c8:	697a      	ldr	r2, [r7, #20]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a21      	ldr	r2, [pc, #132]	@ (8006358 <TIM_OC3_SetConfig+0xe0>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d003      	beq.n	80062de <TIM_OC3_SetConfig+0x66>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a20      	ldr	r2, [pc, #128]	@ (800635c <TIM_OC3_SetConfig+0xe4>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d10d      	bne.n	80062fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80062e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	021b      	lsls	r3, r3, #8
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80062f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a16      	ldr	r2, [pc, #88]	@ (8006358 <TIM_OC3_SetConfig+0xe0>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d003      	beq.n	800630a <TIM_OC3_SetConfig+0x92>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a15      	ldr	r2, [pc, #84]	@ (800635c <TIM_OC3_SetConfig+0xe4>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d113      	bne.n	8006332 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	011b      	lsls	r3, r3, #4
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	4313      	orrs	r3, r2
 8006324:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	011b      	lsls	r3, r3, #4
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	4313      	orrs	r3, r2
 8006330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	621a      	str	r2, [r3, #32]
}
 800634c:	bf00      	nop
 800634e:	371c      	adds	r7, #28
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr
 8006358:	40010000 	.word	0x40010000
 800635c:	40010400 	.word	0x40010400

08006360 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006360:	b480      	push	{r7}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a1b      	ldr	r3, [r3, #32]
 8006374:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800638e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006396:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	021b      	lsls	r3, r3, #8
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	031b      	lsls	r3, r3, #12
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a12      	ldr	r2, [pc, #72]	@ (8006404 <TIM_OC4_SetConfig+0xa4>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d003      	beq.n	80063c8 <TIM_OC4_SetConfig+0x68>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a11      	ldr	r2, [pc, #68]	@ (8006408 <TIM_OC4_SetConfig+0xa8>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d109      	bne.n	80063dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	019b      	lsls	r3, r3, #6
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	4313      	orrs	r3, r2
 80063da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	685a      	ldr	r2, [r3, #4]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	621a      	str	r2, [r3, #32]
}
 80063f6:	bf00      	nop
 80063f8:	371c      	adds	r7, #28
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	40010000 	.word	0x40010000
 8006408:	40010400 	.word	0x40010400

0800640c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800640c:	b480      	push	{r7}
 800640e:	b087      	sub	sp, #28
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	f003 031f 	and.w	r3, r3, #31
 800641e:	2201      	movs	r2, #1
 8006420:	fa02 f303 	lsl.w	r3, r2, r3
 8006424:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6a1a      	ldr	r2, [r3, #32]
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	43db      	mvns	r3, r3
 800642e:	401a      	ands	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6a1a      	ldr	r2, [r3, #32]
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	f003 031f 	and.w	r3, r3, #31
 800643e:	6879      	ldr	r1, [r7, #4]
 8006440:	fa01 f303 	lsl.w	r3, r1, r3
 8006444:	431a      	orrs	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	621a      	str	r2, [r3, #32]
}
 800644a:	bf00      	nop
 800644c:	371c      	adds	r7, #28
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
	...

08006458 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006468:	2b01      	cmp	r3, #1
 800646a:	d101      	bne.n	8006470 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800646c:	2302      	movs	r3, #2
 800646e:	e05a      	b.n	8006526 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2202      	movs	r2, #2
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006496:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	4313      	orrs	r3, r2
 80064a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a21      	ldr	r2, [pc, #132]	@ (8006534 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d022      	beq.n	80064fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064bc:	d01d      	beq.n	80064fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a1d      	ldr	r2, [pc, #116]	@ (8006538 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d018      	beq.n	80064fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a1b      	ldr	r2, [pc, #108]	@ (800653c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d013      	beq.n	80064fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a1a      	ldr	r2, [pc, #104]	@ (8006540 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d00e      	beq.n	80064fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a18      	ldr	r2, [pc, #96]	@ (8006544 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d009      	beq.n	80064fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a17      	ldr	r2, [pc, #92]	@ (8006548 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d004      	beq.n	80064fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a15      	ldr	r2, [pc, #84]	@ (800654c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d10c      	bne.n	8006514 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006500:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	4313      	orrs	r3, r2
 800650a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3714      	adds	r7, #20
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	40010000 	.word	0x40010000
 8006538:	40000400 	.word	0x40000400
 800653c:	40000800 	.word	0x40000800
 8006540:	40000c00 	.word	0x40000c00
 8006544:	40010400 	.word	0x40010400
 8006548:	40014000 	.word	0x40014000
 800654c:	40001800 	.word	0x40001800

08006550 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800655a:	2300      	movs	r3, #0
 800655c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006564:	2b01      	cmp	r3, #1
 8006566:	d101      	bne.n	800656c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006568:	2302      	movs	r3, #2
 800656a:	e03d      	b.n	80065e8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	4313      	orrs	r3, r2
 8006580:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	4313      	orrs	r3, r2
 800658e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	4313      	orrs	r3, r2
 800659c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	695b      	ldr	r3, [r3, #20]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	69db      	ldr	r3, [r3, #28]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3714      	adds	r7, #20
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e042      	b.n	800668c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d106      	bne.n	8006620 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f7fb fb86 	bl	8001d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2224      	movs	r2, #36	@ 0x24
 8006624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68da      	ldr	r2, [r3, #12]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006636:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f82b 	bl	8006694 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	691a      	ldr	r2, [r3, #16]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800664c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	695a      	ldr	r2, [r3, #20]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800665c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68da      	ldr	r2, [r3, #12]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800666c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2220      	movs	r2, #32
 8006678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2220      	movs	r2, #32
 8006680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3708      	adds	r7, #8
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006698:	b0c0      	sub	sp, #256	@ 0x100
 800669a:	af00      	add	r7, sp, #0
 800669c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80066ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066b0:	68d9      	ldr	r1, [r3, #12]
 80066b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	ea40 0301 	orr.w	r3, r0, r1
 80066bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80066be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066c2:	689a      	ldr	r2, [r3, #8]
 80066c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	431a      	orrs	r2, r3
 80066cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	431a      	orrs	r2, r3
 80066d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066d8:	69db      	ldr	r3, [r3, #28]
 80066da:	4313      	orrs	r3, r2
 80066dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80066e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80066ec:	f021 010c 	bic.w	r1, r1, #12
 80066f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80066fa:	430b      	orrs	r3, r1
 80066fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800670a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800670e:	6999      	ldr	r1, [r3, #24]
 8006710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	ea40 0301 	orr.w	r3, r0, r1
 800671a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800671c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	4b8f      	ldr	r3, [pc, #572]	@ (8006960 <UART_SetConfig+0x2cc>)
 8006724:	429a      	cmp	r2, r3
 8006726:	d005      	beq.n	8006734 <UART_SetConfig+0xa0>
 8006728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	4b8d      	ldr	r3, [pc, #564]	@ (8006964 <UART_SetConfig+0x2d0>)
 8006730:	429a      	cmp	r2, r3
 8006732:	d104      	bne.n	800673e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006734:	f7fe fb26 	bl	8004d84 <HAL_RCC_GetPCLK2Freq>
 8006738:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800673c:	e003      	b.n	8006746 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800673e:	f7fe fb0d 	bl	8004d5c <HAL_RCC_GetPCLK1Freq>
 8006742:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800674a:	69db      	ldr	r3, [r3, #28]
 800674c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006750:	f040 810c 	bne.w	800696c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006754:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006758:	2200      	movs	r2, #0
 800675a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800675e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006762:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006766:	4622      	mov	r2, r4
 8006768:	462b      	mov	r3, r5
 800676a:	1891      	adds	r1, r2, r2
 800676c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800676e:	415b      	adcs	r3, r3
 8006770:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006772:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006776:	4621      	mov	r1, r4
 8006778:	eb12 0801 	adds.w	r8, r2, r1
 800677c:	4629      	mov	r1, r5
 800677e:	eb43 0901 	adc.w	r9, r3, r1
 8006782:	f04f 0200 	mov.w	r2, #0
 8006786:	f04f 0300 	mov.w	r3, #0
 800678a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800678e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006792:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006796:	4690      	mov	r8, r2
 8006798:	4699      	mov	r9, r3
 800679a:	4623      	mov	r3, r4
 800679c:	eb18 0303 	adds.w	r3, r8, r3
 80067a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80067a4:	462b      	mov	r3, r5
 80067a6:	eb49 0303 	adc.w	r3, r9, r3
 80067aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80067ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80067ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80067be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80067c2:	460b      	mov	r3, r1
 80067c4:	18db      	adds	r3, r3, r3
 80067c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80067c8:	4613      	mov	r3, r2
 80067ca:	eb42 0303 	adc.w	r3, r2, r3
 80067ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80067d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80067d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80067d8:	f7fa f9d2 	bl	8000b80 <__aeabi_uldivmod>
 80067dc:	4602      	mov	r2, r0
 80067de:	460b      	mov	r3, r1
 80067e0:	4b61      	ldr	r3, [pc, #388]	@ (8006968 <UART_SetConfig+0x2d4>)
 80067e2:	fba3 2302 	umull	r2, r3, r3, r2
 80067e6:	095b      	lsrs	r3, r3, #5
 80067e8:	011c      	lsls	r4, r3, #4
 80067ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067ee:	2200      	movs	r2, #0
 80067f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80067f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80067fc:	4642      	mov	r2, r8
 80067fe:	464b      	mov	r3, r9
 8006800:	1891      	adds	r1, r2, r2
 8006802:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006804:	415b      	adcs	r3, r3
 8006806:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006808:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800680c:	4641      	mov	r1, r8
 800680e:	eb12 0a01 	adds.w	sl, r2, r1
 8006812:	4649      	mov	r1, r9
 8006814:	eb43 0b01 	adc.w	fp, r3, r1
 8006818:	f04f 0200 	mov.w	r2, #0
 800681c:	f04f 0300 	mov.w	r3, #0
 8006820:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006824:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006828:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800682c:	4692      	mov	sl, r2
 800682e:	469b      	mov	fp, r3
 8006830:	4643      	mov	r3, r8
 8006832:	eb1a 0303 	adds.w	r3, sl, r3
 8006836:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800683a:	464b      	mov	r3, r9
 800683c:	eb4b 0303 	adc.w	r3, fp, r3
 8006840:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006850:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006854:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006858:	460b      	mov	r3, r1
 800685a:	18db      	adds	r3, r3, r3
 800685c:	643b      	str	r3, [r7, #64]	@ 0x40
 800685e:	4613      	mov	r3, r2
 8006860:	eb42 0303 	adc.w	r3, r2, r3
 8006864:	647b      	str	r3, [r7, #68]	@ 0x44
 8006866:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800686a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800686e:	f7fa f987 	bl	8000b80 <__aeabi_uldivmod>
 8006872:	4602      	mov	r2, r0
 8006874:	460b      	mov	r3, r1
 8006876:	4611      	mov	r1, r2
 8006878:	4b3b      	ldr	r3, [pc, #236]	@ (8006968 <UART_SetConfig+0x2d4>)
 800687a:	fba3 2301 	umull	r2, r3, r3, r1
 800687e:	095b      	lsrs	r3, r3, #5
 8006880:	2264      	movs	r2, #100	@ 0x64
 8006882:	fb02 f303 	mul.w	r3, r2, r3
 8006886:	1acb      	subs	r3, r1, r3
 8006888:	00db      	lsls	r3, r3, #3
 800688a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800688e:	4b36      	ldr	r3, [pc, #216]	@ (8006968 <UART_SetConfig+0x2d4>)
 8006890:	fba3 2302 	umull	r2, r3, r3, r2
 8006894:	095b      	lsrs	r3, r3, #5
 8006896:	005b      	lsls	r3, r3, #1
 8006898:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800689c:	441c      	add	r4, r3
 800689e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068a2:	2200      	movs	r2, #0
 80068a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80068a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80068ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80068b0:	4642      	mov	r2, r8
 80068b2:	464b      	mov	r3, r9
 80068b4:	1891      	adds	r1, r2, r2
 80068b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80068b8:	415b      	adcs	r3, r3
 80068ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80068c0:	4641      	mov	r1, r8
 80068c2:	1851      	adds	r1, r2, r1
 80068c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80068c6:	4649      	mov	r1, r9
 80068c8:	414b      	adcs	r3, r1
 80068ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80068cc:	f04f 0200 	mov.w	r2, #0
 80068d0:	f04f 0300 	mov.w	r3, #0
 80068d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80068d8:	4659      	mov	r1, fp
 80068da:	00cb      	lsls	r3, r1, #3
 80068dc:	4651      	mov	r1, sl
 80068de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068e2:	4651      	mov	r1, sl
 80068e4:	00ca      	lsls	r2, r1, #3
 80068e6:	4610      	mov	r0, r2
 80068e8:	4619      	mov	r1, r3
 80068ea:	4603      	mov	r3, r0
 80068ec:	4642      	mov	r2, r8
 80068ee:	189b      	adds	r3, r3, r2
 80068f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80068f4:	464b      	mov	r3, r9
 80068f6:	460a      	mov	r2, r1
 80068f8:	eb42 0303 	adc.w	r3, r2, r3
 80068fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800690c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006910:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006914:	460b      	mov	r3, r1
 8006916:	18db      	adds	r3, r3, r3
 8006918:	62bb      	str	r3, [r7, #40]	@ 0x28
 800691a:	4613      	mov	r3, r2
 800691c:	eb42 0303 	adc.w	r3, r2, r3
 8006920:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006922:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006926:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800692a:	f7fa f929 	bl	8000b80 <__aeabi_uldivmod>
 800692e:	4602      	mov	r2, r0
 8006930:	460b      	mov	r3, r1
 8006932:	4b0d      	ldr	r3, [pc, #52]	@ (8006968 <UART_SetConfig+0x2d4>)
 8006934:	fba3 1302 	umull	r1, r3, r3, r2
 8006938:	095b      	lsrs	r3, r3, #5
 800693a:	2164      	movs	r1, #100	@ 0x64
 800693c:	fb01 f303 	mul.w	r3, r1, r3
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	00db      	lsls	r3, r3, #3
 8006944:	3332      	adds	r3, #50	@ 0x32
 8006946:	4a08      	ldr	r2, [pc, #32]	@ (8006968 <UART_SetConfig+0x2d4>)
 8006948:	fba2 2303 	umull	r2, r3, r2, r3
 800694c:	095b      	lsrs	r3, r3, #5
 800694e:	f003 0207 	and.w	r2, r3, #7
 8006952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4422      	add	r2, r4
 800695a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800695c:	e106      	b.n	8006b6c <UART_SetConfig+0x4d8>
 800695e:	bf00      	nop
 8006960:	40011000 	.word	0x40011000
 8006964:	40011400 	.word	0x40011400
 8006968:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800696c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006970:	2200      	movs	r2, #0
 8006972:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006976:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800697a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800697e:	4642      	mov	r2, r8
 8006980:	464b      	mov	r3, r9
 8006982:	1891      	adds	r1, r2, r2
 8006984:	6239      	str	r1, [r7, #32]
 8006986:	415b      	adcs	r3, r3
 8006988:	627b      	str	r3, [r7, #36]	@ 0x24
 800698a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800698e:	4641      	mov	r1, r8
 8006990:	1854      	adds	r4, r2, r1
 8006992:	4649      	mov	r1, r9
 8006994:	eb43 0501 	adc.w	r5, r3, r1
 8006998:	f04f 0200 	mov.w	r2, #0
 800699c:	f04f 0300 	mov.w	r3, #0
 80069a0:	00eb      	lsls	r3, r5, #3
 80069a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069a6:	00e2      	lsls	r2, r4, #3
 80069a8:	4614      	mov	r4, r2
 80069aa:	461d      	mov	r5, r3
 80069ac:	4643      	mov	r3, r8
 80069ae:	18e3      	adds	r3, r4, r3
 80069b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80069b4:	464b      	mov	r3, r9
 80069b6:	eb45 0303 	adc.w	r3, r5, r3
 80069ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80069be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80069ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80069ce:	f04f 0200 	mov.w	r2, #0
 80069d2:	f04f 0300 	mov.w	r3, #0
 80069d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80069da:	4629      	mov	r1, r5
 80069dc:	008b      	lsls	r3, r1, #2
 80069de:	4621      	mov	r1, r4
 80069e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069e4:	4621      	mov	r1, r4
 80069e6:	008a      	lsls	r2, r1, #2
 80069e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80069ec:	f7fa f8c8 	bl	8000b80 <__aeabi_uldivmod>
 80069f0:	4602      	mov	r2, r0
 80069f2:	460b      	mov	r3, r1
 80069f4:	4b60      	ldr	r3, [pc, #384]	@ (8006b78 <UART_SetConfig+0x4e4>)
 80069f6:	fba3 2302 	umull	r2, r3, r3, r2
 80069fa:	095b      	lsrs	r3, r3, #5
 80069fc:	011c      	lsls	r4, r3, #4
 80069fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a02:	2200      	movs	r2, #0
 8006a04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006a08:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006a0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006a10:	4642      	mov	r2, r8
 8006a12:	464b      	mov	r3, r9
 8006a14:	1891      	adds	r1, r2, r2
 8006a16:	61b9      	str	r1, [r7, #24]
 8006a18:	415b      	adcs	r3, r3
 8006a1a:	61fb      	str	r3, [r7, #28]
 8006a1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a20:	4641      	mov	r1, r8
 8006a22:	1851      	adds	r1, r2, r1
 8006a24:	6139      	str	r1, [r7, #16]
 8006a26:	4649      	mov	r1, r9
 8006a28:	414b      	adcs	r3, r1
 8006a2a:	617b      	str	r3, [r7, #20]
 8006a2c:	f04f 0200 	mov.w	r2, #0
 8006a30:	f04f 0300 	mov.w	r3, #0
 8006a34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a38:	4659      	mov	r1, fp
 8006a3a:	00cb      	lsls	r3, r1, #3
 8006a3c:	4651      	mov	r1, sl
 8006a3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a42:	4651      	mov	r1, sl
 8006a44:	00ca      	lsls	r2, r1, #3
 8006a46:	4610      	mov	r0, r2
 8006a48:	4619      	mov	r1, r3
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	4642      	mov	r2, r8
 8006a4e:	189b      	adds	r3, r3, r2
 8006a50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a54:	464b      	mov	r3, r9
 8006a56:	460a      	mov	r2, r1
 8006a58:	eb42 0303 	adc.w	r3, r2, r3
 8006a5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006a6a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006a6c:	f04f 0200 	mov.w	r2, #0
 8006a70:	f04f 0300 	mov.w	r3, #0
 8006a74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006a78:	4649      	mov	r1, r9
 8006a7a:	008b      	lsls	r3, r1, #2
 8006a7c:	4641      	mov	r1, r8
 8006a7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a82:	4641      	mov	r1, r8
 8006a84:	008a      	lsls	r2, r1, #2
 8006a86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006a8a:	f7fa f879 	bl	8000b80 <__aeabi_uldivmod>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	460b      	mov	r3, r1
 8006a92:	4611      	mov	r1, r2
 8006a94:	4b38      	ldr	r3, [pc, #224]	@ (8006b78 <UART_SetConfig+0x4e4>)
 8006a96:	fba3 2301 	umull	r2, r3, r3, r1
 8006a9a:	095b      	lsrs	r3, r3, #5
 8006a9c:	2264      	movs	r2, #100	@ 0x64
 8006a9e:	fb02 f303 	mul.w	r3, r2, r3
 8006aa2:	1acb      	subs	r3, r1, r3
 8006aa4:	011b      	lsls	r3, r3, #4
 8006aa6:	3332      	adds	r3, #50	@ 0x32
 8006aa8:	4a33      	ldr	r2, [pc, #204]	@ (8006b78 <UART_SetConfig+0x4e4>)
 8006aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8006aae:	095b      	lsrs	r3, r3, #5
 8006ab0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ab4:	441c      	add	r4, r3
 8006ab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006aba:	2200      	movs	r2, #0
 8006abc:	673b      	str	r3, [r7, #112]	@ 0x70
 8006abe:	677a      	str	r2, [r7, #116]	@ 0x74
 8006ac0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006ac4:	4642      	mov	r2, r8
 8006ac6:	464b      	mov	r3, r9
 8006ac8:	1891      	adds	r1, r2, r2
 8006aca:	60b9      	str	r1, [r7, #8]
 8006acc:	415b      	adcs	r3, r3
 8006ace:	60fb      	str	r3, [r7, #12]
 8006ad0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ad4:	4641      	mov	r1, r8
 8006ad6:	1851      	adds	r1, r2, r1
 8006ad8:	6039      	str	r1, [r7, #0]
 8006ada:	4649      	mov	r1, r9
 8006adc:	414b      	adcs	r3, r1
 8006ade:	607b      	str	r3, [r7, #4]
 8006ae0:	f04f 0200 	mov.w	r2, #0
 8006ae4:	f04f 0300 	mov.w	r3, #0
 8006ae8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006aec:	4659      	mov	r1, fp
 8006aee:	00cb      	lsls	r3, r1, #3
 8006af0:	4651      	mov	r1, sl
 8006af2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006af6:	4651      	mov	r1, sl
 8006af8:	00ca      	lsls	r2, r1, #3
 8006afa:	4610      	mov	r0, r2
 8006afc:	4619      	mov	r1, r3
 8006afe:	4603      	mov	r3, r0
 8006b00:	4642      	mov	r2, r8
 8006b02:	189b      	adds	r3, r3, r2
 8006b04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b06:	464b      	mov	r3, r9
 8006b08:	460a      	mov	r2, r1
 8006b0a:	eb42 0303 	adc.w	r3, r2, r3
 8006b0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b1a:	667a      	str	r2, [r7, #100]	@ 0x64
 8006b1c:	f04f 0200 	mov.w	r2, #0
 8006b20:	f04f 0300 	mov.w	r3, #0
 8006b24:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006b28:	4649      	mov	r1, r9
 8006b2a:	008b      	lsls	r3, r1, #2
 8006b2c:	4641      	mov	r1, r8
 8006b2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b32:	4641      	mov	r1, r8
 8006b34:	008a      	lsls	r2, r1, #2
 8006b36:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006b3a:	f7fa f821 	bl	8000b80 <__aeabi_uldivmod>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	460b      	mov	r3, r1
 8006b42:	4b0d      	ldr	r3, [pc, #52]	@ (8006b78 <UART_SetConfig+0x4e4>)
 8006b44:	fba3 1302 	umull	r1, r3, r3, r2
 8006b48:	095b      	lsrs	r3, r3, #5
 8006b4a:	2164      	movs	r1, #100	@ 0x64
 8006b4c:	fb01 f303 	mul.w	r3, r1, r3
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	011b      	lsls	r3, r3, #4
 8006b54:	3332      	adds	r3, #50	@ 0x32
 8006b56:	4a08      	ldr	r2, [pc, #32]	@ (8006b78 <UART_SetConfig+0x4e4>)
 8006b58:	fba2 2303 	umull	r2, r3, r2, r3
 8006b5c:	095b      	lsrs	r3, r3, #5
 8006b5e:	f003 020f 	and.w	r2, r3, #15
 8006b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4422      	add	r2, r4
 8006b6a:	609a      	str	r2, [r3, #8]
}
 8006b6c:	bf00      	nop
 8006b6e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006b72:	46bd      	mov	sp, r7
 8006b74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b78:	51eb851f 	.word	0x51eb851f

08006b7c <memset>:
 8006b7c:	4402      	add	r2, r0
 8006b7e:	4603      	mov	r3, r0
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d100      	bne.n	8006b86 <memset+0xa>
 8006b84:	4770      	bx	lr
 8006b86:	f803 1b01 	strb.w	r1, [r3], #1
 8006b8a:	e7f9      	b.n	8006b80 <memset+0x4>

08006b8c <__errno>:
 8006b8c:	4b01      	ldr	r3, [pc, #4]	@ (8006b94 <__errno+0x8>)
 8006b8e:	6818      	ldr	r0, [r3, #0]
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	2000000c 	.word	0x2000000c

08006b98 <__libc_init_array>:
 8006b98:	b570      	push	{r4, r5, r6, lr}
 8006b9a:	4d0d      	ldr	r5, [pc, #52]	@ (8006bd0 <__libc_init_array+0x38>)
 8006b9c:	4c0d      	ldr	r4, [pc, #52]	@ (8006bd4 <__libc_init_array+0x3c>)
 8006b9e:	1b64      	subs	r4, r4, r5
 8006ba0:	10a4      	asrs	r4, r4, #2
 8006ba2:	2600      	movs	r6, #0
 8006ba4:	42a6      	cmp	r6, r4
 8006ba6:	d109      	bne.n	8006bbc <__libc_init_array+0x24>
 8006ba8:	4d0b      	ldr	r5, [pc, #44]	@ (8006bd8 <__libc_init_array+0x40>)
 8006baa:	4c0c      	ldr	r4, [pc, #48]	@ (8006bdc <__libc_init_array+0x44>)
 8006bac:	f000 ff76 	bl	8007a9c <_init>
 8006bb0:	1b64      	subs	r4, r4, r5
 8006bb2:	10a4      	asrs	r4, r4, #2
 8006bb4:	2600      	movs	r6, #0
 8006bb6:	42a6      	cmp	r6, r4
 8006bb8:	d105      	bne.n	8006bc6 <__libc_init_array+0x2e>
 8006bba:	bd70      	pop	{r4, r5, r6, pc}
 8006bbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bc0:	4798      	blx	r3
 8006bc2:	3601      	adds	r6, #1
 8006bc4:	e7ee      	b.n	8006ba4 <__libc_init_array+0xc>
 8006bc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bca:	4798      	blx	r3
 8006bcc:	3601      	adds	r6, #1
 8006bce:	e7f2      	b.n	8006bb6 <__libc_init_array+0x1e>
 8006bd0:	08007b50 	.word	0x08007b50
 8006bd4:	08007b50 	.word	0x08007b50
 8006bd8:	08007b50 	.word	0x08007b50
 8006bdc:	08007b54 	.word	0x08007b54

08006be0 <pow>:
 8006be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be2:	ed2d 8b02 	vpush	{d8}
 8006be6:	eeb0 8a40 	vmov.f32	s16, s0
 8006bea:	eef0 8a60 	vmov.f32	s17, s1
 8006bee:	ec55 4b11 	vmov	r4, r5, d1
 8006bf2:	f000 f871 	bl	8006cd8 <__ieee754_pow>
 8006bf6:	4622      	mov	r2, r4
 8006bf8:	462b      	mov	r3, r5
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	4629      	mov	r1, r5
 8006bfe:	ec57 6b10 	vmov	r6, r7, d0
 8006c02:	f7f9 ff57 	bl	8000ab4 <__aeabi_dcmpun>
 8006c06:	2800      	cmp	r0, #0
 8006c08:	d13b      	bne.n	8006c82 <pow+0xa2>
 8006c0a:	ec51 0b18 	vmov	r0, r1, d8
 8006c0e:	2200      	movs	r2, #0
 8006c10:	2300      	movs	r3, #0
 8006c12:	f7f9 ff1d 	bl	8000a50 <__aeabi_dcmpeq>
 8006c16:	b1b8      	cbz	r0, 8006c48 <pow+0x68>
 8006c18:	2200      	movs	r2, #0
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	4629      	mov	r1, r5
 8006c20:	f7f9 ff16 	bl	8000a50 <__aeabi_dcmpeq>
 8006c24:	2800      	cmp	r0, #0
 8006c26:	d146      	bne.n	8006cb6 <pow+0xd6>
 8006c28:	ec45 4b10 	vmov	d0, r4, r5
 8006c2c:	f000 f848 	bl	8006cc0 <finite>
 8006c30:	b338      	cbz	r0, 8006c82 <pow+0xa2>
 8006c32:	2200      	movs	r2, #0
 8006c34:	2300      	movs	r3, #0
 8006c36:	4620      	mov	r0, r4
 8006c38:	4629      	mov	r1, r5
 8006c3a:	f7f9 ff13 	bl	8000a64 <__aeabi_dcmplt>
 8006c3e:	b300      	cbz	r0, 8006c82 <pow+0xa2>
 8006c40:	f7ff ffa4 	bl	8006b8c <__errno>
 8006c44:	2322      	movs	r3, #34	@ 0x22
 8006c46:	e01b      	b.n	8006c80 <pow+0xa0>
 8006c48:	ec47 6b10 	vmov	d0, r6, r7
 8006c4c:	f000 f838 	bl	8006cc0 <finite>
 8006c50:	b9e0      	cbnz	r0, 8006c8c <pow+0xac>
 8006c52:	eeb0 0a48 	vmov.f32	s0, s16
 8006c56:	eef0 0a68 	vmov.f32	s1, s17
 8006c5a:	f000 f831 	bl	8006cc0 <finite>
 8006c5e:	b1a8      	cbz	r0, 8006c8c <pow+0xac>
 8006c60:	ec45 4b10 	vmov	d0, r4, r5
 8006c64:	f000 f82c 	bl	8006cc0 <finite>
 8006c68:	b180      	cbz	r0, 8006c8c <pow+0xac>
 8006c6a:	4632      	mov	r2, r6
 8006c6c:	463b      	mov	r3, r7
 8006c6e:	4630      	mov	r0, r6
 8006c70:	4639      	mov	r1, r7
 8006c72:	f7f9 ff1f 	bl	8000ab4 <__aeabi_dcmpun>
 8006c76:	2800      	cmp	r0, #0
 8006c78:	d0e2      	beq.n	8006c40 <pow+0x60>
 8006c7a:	f7ff ff87 	bl	8006b8c <__errno>
 8006c7e:	2321      	movs	r3, #33	@ 0x21
 8006c80:	6003      	str	r3, [r0, #0]
 8006c82:	ecbd 8b02 	vpop	{d8}
 8006c86:	ec47 6b10 	vmov	d0, r6, r7
 8006c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	2300      	movs	r3, #0
 8006c90:	4630      	mov	r0, r6
 8006c92:	4639      	mov	r1, r7
 8006c94:	f7f9 fedc 	bl	8000a50 <__aeabi_dcmpeq>
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	d0f2      	beq.n	8006c82 <pow+0xa2>
 8006c9c:	eeb0 0a48 	vmov.f32	s0, s16
 8006ca0:	eef0 0a68 	vmov.f32	s1, s17
 8006ca4:	f000 f80c 	bl	8006cc0 <finite>
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	d0ea      	beq.n	8006c82 <pow+0xa2>
 8006cac:	ec45 4b10 	vmov	d0, r4, r5
 8006cb0:	f000 f806 	bl	8006cc0 <finite>
 8006cb4:	e7c3      	b.n	8006c3e <pow+0x5e>
 8006cb6:	4f01      	ldr	r7, [pc, #4]	@ (8006cbc <pow+0xdc>)
 8006cb8:	2600      	movs	r6, #0
 8006cba:	e7e2      	b.n	8006c82 <pow+0xa2>
 8006cbc:	3ff00000 	.word	0x3ff00000

08006cc0 <finite>:
 8006cc0:	b082      	sub	sp, #8
 8006cc2:	ed8d 0b00 	vstr	d0, [sp]
 8006cc6:	9801      	ldr	r0, [sp, #4]
 8006cc8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8006ccc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8006cd0:	0fc0      	lsrs	r0, r0, #31
 8006cd2:	b002      	add	sp, #8
 8006cd4:	4770      	bx	lr
	...

08006cd8 <__ieee754_pow>:
 8006cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cdc:	b091      	sub	sp, #68	@ 0x44
 8006cde:	ed8d 1b00 	vstr	d1, [sp]
 8006ce2:	e9dd 1900 	ldrd	r1, r9, [sp]
 8006ce6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8006cea:	ea5a 0001 	orrs.w	r0, sl, r1
 8006cee:	ec57 6b10 	vmov	r6, r7, d0
 8006cf2:	d113      	bne.n	8006d1c <__ieee754_pow+0x44>
 8006cf4:	19b3      	adds	r3, r6, r6
 8006cf6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8006cfa:	4152      	adcs	r2, r2
 8006cfc:	4298      	cmp	r0, r3
 8006cfe:	4b98      	ldr	r3, [pc, #608]	@ (8006f60 <__ieee754_pow+0x288>)
 8006d00:	4193      	sbcs	r3, r2
 8006d02:	f080 84ea 	bcs.w	80076da <__ieee754_pow+0xa02>
 8006d06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d0a:	4630      	mov	r0, r6
 8006d0c:	4639      	mov	r1, r7
 8006d0e:	f7f9 fa81 	bl	8000214 <__adddf3>
 8006d12:	ec41 0b10 	vmov	d0, r0, r1
 8006d16:	b011      	add	sp, #68	@ 0x44
 8006d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d1c:	4a91      	ldr	r2, [pc, #580]	@ (8006f64 <__ieee754_pow+0x28c>)
 8006d1e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8006d22:	4590      	cmp	r8, r2
 8006d24:	463d      	mov	r5, r7
 8006d26:	4633      	mov	r3, r6
 8006d28:	d806      	bhi.n	8006d38 <__ieee754_pow+0x60>
 8006d2a:	d101      	bne.n	8006d30 <__ieee754_pow+0x58>
 8006d2c:	2e00      	cmp	r6, #0
 8006d2e:	d1ea      	bne.n	8006d06 <__ieee754_pow+0x2e>
 8006d30:	4592      	cmp	sl, r2
 8006d32:	d801      	bhi.n	8006d38 <__ieee754_pow+0x60>
 8006d34:	d10e      	bne.n	8006d54 <__ieee754_pow+0x7c>
 8006d36:	b169      	cbz	r1, 8006d54 <__ieee754_pow+0x7c>
 8006d38:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8006d3c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8006d40:	431d      	orrs	r5, r3
 8006d42:	d1e0      	bne.n	8006d06 <__ieee754_pow+0x2e>
 8006d44:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006d48:	18db      	adds	r3, r3, r3
 8006d4a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8006d4e:	4152      	adcs	r2, r2
 8006d50:	429d      	cmp	r5, r3
 8006d52:	e7d4      	b.n	8006cfe <__ieee754_pow+0x26>
 8006d54:	2d00      	cmp	r5, #0
 8006d56:	46c3      	mov	fp, r8
 8006d58:	da3a      	bge.n	8006dd0 <__ieee754_pow+0xf8>
 8006d5a:	4a83      	ldr	r2, [pc, #524]	@ (8006f68 <__ieee754_pow+0x290>)
 8006d5c:	4592      	cmp	sl, r2
 8006d5e:	d84d      	bhi.n	8006dfc <__ieee754_pow+0x124>
 8006d60:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8006d64:	4592      	cmp	sl, r2
 8006d66:	f240 84c7 	bls.w	80076f8 <__ieee754_pow+0xa20>
 8006d6a:	ea4f 522a 	mov.w	r2, sl, asr #20
 8006d6e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8006d72:	2a14      	cmp	r2, #20
 8006d74:	dd0f      	ble.n	8006d96 <__ieee754_pow+0xbe>
 8006d76:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8006d7a:	fa21 f402 	lsr.w	r4, r1, r2
 8006d7e:	fa04 f202 	lsl.w	r2, r4, r2
 8006d82:	428a      	cmp	r2, r1
 8006d84:	f040 84b8 	bne.w	80076f8 <__ieee754_pow+0xa20>
 8006d88:	f004 0401 	and.w	r4, r4, #1
 8006d8c:	f1c4 0402 	rsb	r4, r4, #2
 8006d90:	2900      	cmp	r1, #0
 8006d92:	d158      	bne.n	8006e46 <__ieee754_pow+0x16e>
 8006d94:	e00e      	b.n	8006db4 <__ieee754_pow+0xdc>
 8006d96:	2900      	cmp	r1, #0
 8006d98:	d154      	bne.n	8006e44 <__ieee754_pow+0x16c>
 8006d9a:	f1c2 0214 	rsb	r2, r2, #20
 8006d9e:	fa4a f402 	asr.w	r4, sl, r2
 8006da2:	fa04 f202 	lsl.w	r2, r4, r2
 8006da6:	4552      	cmp	r2, sl
 8006da8:	f040 84a3 	bne.w	80076f2 <__ieee754_pow+0xa1a>
 8006dac:	f004 0401 	and.w	r4, r4, #1
 8006db0:	f1c4 0402 	rsb	r4, r4, #2
 8006db4:	4a6d      	ldr	r2, [pc, #436]	@ (8006f6c <__ieee754_pow+0x294>)
 8006db6:	4592      	cmp	sl, r2
 8006db8:	d12e      	bne.n	8006e18 <__ieee754_pow+0x140>
 8006dba:	f1b9 0f00 	cmp.w	r9, #0
 8006dbe:	f280 8494 	bge.w	80076ea <__ieee754_pow+0xa12>
 8006dc2:	496a      	ldr	r1, [pc, #424]	@ (8006f6c <__ieee754_pow+0x294>)
 8006dc4:	4632      	mov	r2, r6
 8006dc6:	463b      	mov	r3, r7
 8006dc8:	2000      	movs	r0, #0
 8006dca:	f7f9 fd03 	bl	80007d4 <__aeabi_ddiv>
 8006dce:	e7a0      	b.n	8006d12 <__ieee754_pow+0x3a>
 8006dd0:	2400      	movs	r4, #0
 8006dd2:	bbc1      	cbnz	r1, 8006e46 <__ieee754_pow+0x16e>
 8006dd4:	4a63      	ldr	r2, [pc, #396]	@ (8006f64 <__ieee754_pow+0x28c>)
 8006dd6:	4592      	cmp	sl, r2
 8006dd8:	d1ec      	bne.n	8006db4 <__ieee754_pow+0xdc>
 8006dda:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8006dde:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8006de2:	431a      	orrs	r2, r3
 8006de4:	f000 8479 	beq.w	80076da <__ieee754_pow+0xa02>
 8006de8:	4b61      	ldr	r3, [pc, #388]	@ (8006f70 <__ieee754_pow+0x298>)
 8006dea:	4598      	cmp	r8, r3
 8006dec:	d908      	bls.n	8006e00 <__ieee754_pow+0x128>
 8006dee:	f1b9 0f00 	cmp.w	r9, #0
 8006df2:	f2c0 8476 	blt.w	80076e2 <__ieee754_pow+0xa0a>
 8006df6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006dfa:	e78a      	b.n	8006d12 <__ieee754_pow+0x3a>
 8006dfc:	2402      	movs	r4, #2
 8006dfe:	e7e8      	b.n	8006dd2 <__ieee754_pow+0xfa>
 8006e00:	f1b9 0f00 	cmp.w	r9, #0
 8006e04:	f04f 0000 	mov.w	r0, #0
 8006e08:	f04f 0100 	mov.w	r1, #0
 8006e0c:	da81      	bge.n	8006d12 <__ieee754_pow+0x3a>
 8006e0e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006e12:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006e16:	e77c      	b.n	8006d12 <__ieee754_pow+0x3a>
 8006e18:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8006e1c:	d106      	bne.n	8006e2c <__ieee754_pow+0x154>
 8006e1e:	4632      	mov	r2, r6
 8006e20:	463b      	mov	r3, r7
 8006e22:	4630      	mov	r0, r6
 8006e24:	4639      	mov	r1, r7
 8006e26:	f7f9 fbab 	bl	8000580 <__aeabi_dmul>
 8006e2a:	e772      	b.n	8006d12 <__ieee754_pow+0x3a>
 8006e2c:	4a51      	ldr	r2, [pc, #324]	@ (8006f74 <__ieee754_pow+0x29c>)
 8006e2e:	4591      	cmp	r9, r2
 8006e30:	d109      	bne.n	8006e46 <__ieee754_pow+0x16e>
 8006e32:	2d00      	cmp	r5, #0
 8006e34:	db07      	blt.n	8006e46 <__ieee754_pow+0x16e>
 8006e36:	ec47 6b10 	vmov	d0, r6, r7
 8006e3a:	b011      	add	sp, #68	@ 0x44
 8006e3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e40:	f000 bd52 	b.w	80078e8 <__ieee754_sqrt>
 8006e44:	2400      	movs	r4, #0
 8006e46:	ec47 6b10 	vmov	d0, r6, r7
 8006e4a:	9302      	str	r3, [sp, #8]
 8006e4c:	f000 fc88 	bl	8007760 <fabs>
 8006e50:	9b02      	ldr	r3, [sp, #8]
 8006e52:	ec51 0b10 	vmov	r0, r1, d0
 8006e56:	bb53      	cbnz	r3, 8006eae <__ieee754_pow+0x1d6>
 8006e58:	4b44      	ldr	r3, [pc, #272]	@ (8006f6c <__ieee754_pow+0x294>)
 8006e5a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d002      	beq.n	8006e68 <__ieee754_pow+0x190>
 8006e62:	f1b8 0f00 	cmp.w	r8, #0
 8006e66:	d122      	bne.n	8006eae <__ieee754_pow+0x1d6>
 8006e68:	f1b9 0f00 	cmp.w	r9, #0
 8006e6c:	da05      	bge.n	8006e7a <__ieee754_pow+0x1a2>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	460b      	mov	r3, r1
 8006e72:	2000      	movs	r0, #0
 8006e74:	493d      	ldr	r1, [pc, #244]	@ (8006f6c <__ieee754_pow+0x294>)
 8006e76:	f7f9 fcad 	bl	80007d4 <__aeabi_ddiv>
 8006e7a:	2d00      	cmp	r5, #0
 8006e7c:	f6bf af49 	bge.w	8006d12 <__ieee754_pow+0x3a>
 8006e80:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8006e84:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8006e88:	ea58 0804 	orrs.w	r8, r8, r4
 8006e8c:	d108      	bne.n	8006ea0 <__ieee754_pow+0x1c8>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	460b      	mov	r3, r1
 8006e92:	4610      	mov	r0, r2
 8006e94:	4619      	mov	r1, r3
 8006e96:	f7f9 f9bb 	bl	8000210 <__aeabi_dsub>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	e794      	b.n	8006dca <__ieee754_pow+0xf2>
 8006ea0:	2c01      	cmp	r4, #1
 8006ea2:	f47f af36 	bne.w	8006d12 <__ieee754_pow+0x3a>
 8006ea6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006eaa:	4619      	mov	r1, r3
 8006eac:	e731      	b.n	8006d12 <__ieee754_pow+0x3a>
 8006eae:	0feb      	lsrs	r3, r5, #31
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	ea53 0204 	orrs.w	r2, r3, r4
 8006eb6:	d102      	bne.n	8006ebe <__ieee754_pow+0x1e6>
 8006eb8:	4632      	mov	r2, r6
 8006eba:	463b      	mov	r3, r7
 8006ebc:	e7e9      	b.n	8006e92 <__ieee754_pow+0x1ba>
 8006ebe:	3c01      	subs	r4, #1
 8006ec0:	431c      	orrs	r4, r3
 8006ec2:	d016      	beq.n	8006ef2 <__ieee754_pow+0x21a>
 8006ec4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8006f50 <__ieee754_pow+0x278>
 8006ec8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8006ecc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006ed0:	f240 8112 	bls.w	80070f8 <__ieee754_pow+0x420>
 8006ed4:	4b28      	ldr	r3, [pc, #160]	@ (8006f78 <__ieee754_pow+0x2a0>)
 8006ed6:	459a      	cmp	sl, r3
 8006ed8:	4b25      	ldr	r3, [pc, #148]	@ (8006f70 <__ieee754_pow+0x298>)
 8006eda:	d916      	bls.n	8006f0a <__ieee754_pow+0x232>
 8006edc:	4598      	cmp	r8, r3
 8006ede:	d80b      	bhi.n	8006ef8 <__ieee754_pow+0x220>
 8006ee0:	f1b9 0f00 	cmp.w	r9, #0
 8006ee4:	da0b      	bge.n	8006efe <__ieee754_pow+0x226>
 8006ee6:	2000      	movs	r0, #0
 8006ee8:	b011      	add	sp, #68	@ 0x44
 8006eea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eee:	f000 bcf3 	b.w	80078d8 <__math_oflow>
 8006ef2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8006f58 <__ieee754_pow+0x280>
 8006ef6:	e7e7      	b.n	8006ec8 <__ieee754_pow+0x1f0>
 8006ef8:	f1b9 0f00 	cmp.w	r9, #0
 8006efc:	dcf3      	bgt.n	8006ee6 <__ieee754_pow+0x20e>
 8006efe:	2000      	movs	r0, #0
 8006f00:	b011      	add	sp, #68	@ 0x44
 8006f02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f06:	f000 bcdf 	b.w	80078c8 <__math_uflow>
 8006f0a:	4598      	cmp	r8, r3
 8006f0c:	d20c      	bcs.n	8006f28 <__ieee754_pow+0x250>
 8006f0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f12:	2200      	movs	r2, #0
 8006f14:	2300      	movs	r3, #0
 8006f16:	f7f9 fda5 	bl	8000a64 <__aeabi_dcmplt>
 8006f1a:	3800      	subs	r0, #0
 8006f1c:	bf18      	it	ne
 8006f1e:	2001      	movne	r0, #1
 8006f20:	f1b9 0f00 	cmp.w	r9, #0
 8006f24:	daec      	bge.n	8006f00 <__ieee754_pow+0x228>
 8006f26:	e7df      	b.n	8006ee8 <__ieee754_pow+0x210>
 8006f28:	4b10      	ldr	r3, [pc, #64]	@ (8006f6c <__ieee754_pow+0x294>)
 8006f2a:	4598      	cmp	r8, r3
 8006f2c:	f04f 0200 	mov.w	r2, #0
 8006f30:	d924      	bls.n	8006f7c <__ieee754_pow+0x2a4>
 8006f32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f36:	2300      	movs	r3, #0
 8006f38:	f7f9 fd94 	bl	8000a64 <__aeabi_dcmplt>
 8006f3c:	3800      	subs	r0, #0
 8006f3e:	bf18      	it	ne
 8006f40:	2001      	movne	r0, #1
 8006f42:	f1b9 0f00 	cmp.w	r9, #0
 8006f46:	dccf      	bgt.n	8006ee8 <__ieee754_pow+0x210>
 8006f48:	e7da      	b.n	8006f00 <__ieee754_pow+0x228>
 8006f4a:	bf00      	nop
 8006f4c:	f3af 8000 	nop.w
 8006f50:	00000000 	.word	0x00000000
 8006f54:	3ff00000 	.word	0x3ff00000
 8006f58:	00000000 	.word	0x00000000
 8006f5c:	bff00000 	.word	0xbff00000
 8006f60:	fff00000 	.word	0xfff00000
 8006f64:	7ff00000 	.word	0x7ff00000
 8006f68:	433fffff 	.word	0x433fffff
 8006f6c:	3ff00000 	.word	0x3ff00000
 8006f70:	3fefffff 	.word	0x3fefffff
 8006f74:	3fe00000 	.word	0x3fe00000
 8006f78:	43f00000 	.word	0x43f00000
 8006f7c:	4b5a      	ldr	r3, [pc, #360]	@ (80070e8 <__ieee754_pow+0x410>)
 8006f7e:	f7f9 f947 	bl	8000210 <__aeabi_dsub>
 8006f82:	a351      	add	r3, pc, #324	@ (adr r3, 80070c8 <__ieee754_pow+0x3f0>)
 8006f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f88:	4604      	mov	r4, r0
 8006f8a:	460d      	mov	r5, r1
 8006f8c:	f7f9 faf8 	bl	8000580 <__aeabi_dmul>
 8006f90:	a34f      	add	r3, pc, #316	@ (adr r3, 80070d0 <__ieee754_pow+0x3f8>)
 8006f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f96:	4606      	mov	r6, r0
 8006f98:	460f      	mov	r7, r1
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	4629      	mov	r1, r5
 8006f9e:	f7f9 faef 	bl	8000580 <__aeabi_dmul>
 8006fa2:	4b52      	ldr	r3, [pc, #328]	@ (80070ec <__ieee754_pow+0x414>)
 8006fa4:	4682      	mov	sl, r0
 8006fa6:	468b      	mov	fp, r1
 8006fa8:	2200      	movs	r2, #0
 8006faa:	4620      	mov	r0, r4
 8006fac:	4629      	mov	r1, r5
 8006fae:	f7f9 fae7 	bl	8000580 <__aeabi_dmul>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	a148      	add	r1, pc, #288	@ (adr r1, 80070d8 <__ieee754_pow+0x400>)
 8006fb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fbc:	f7f9 f928 	bl	8000210 <__aeabi_dsub>
 8006fc0:	4622      	mov	r2, r4
 8006fc2:	462b      	mov	r3, r5
 8006fc4:	f7f9 fadc 	bl	8000580 <__aeabi_dmul>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	460b      	mov	r3, r1
 8006fcc:	2000      	movs	r0, #0
 8006fce:	4948      	ldr	r1, [pc, #288]	@ (80070f0 <__ieee754_pow+0x418>)
 8006fd0:	f7f9 f91e 	bl	8000210 <__aeabi_dsub>
 8006fd4:	4622      	mov	r2, r4
 8006fd6:	4680      	mov	r8, r0
 8006fd8:	4689      	mov	r9, r1
 8006fda:	462b      	mov	r3, r5
 8006fdc:	4620      	mov	r0, r4
 8006fde:	4629      	mov	r1, r5
 8006fe0:	f7f9 face 	bl	8000580 <__aeabi_dmul>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	4640      	mov	r0, r8
 8006fea:	4649      	mov	r1, r9
 8006fec:	f7f9 fac8 	bl	8000580 <__aeabi_dmul>
 8006ff0:	a33b      	add	r3, pc, #236	@ (adr r3, 80070e0 <__ieee754_pow+0x408>)
 8006ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff6:	f7f9 fac3 	bl	8000580 <__aeabi_dmul>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	4650      	mov	r0, sl
 8007000:	4659      	mov	r1, fp
 8007002:	f7f9 f905 	bl	8000210 <__aeabi_dsub>
 8007006:	4602      	mov	r2, r0
 8007008:	460b      	mov	r3, r1
 800700a:	4680      	mov	r8, r0
 800700c:	4689      	mov	r9, r1
 800700e:	4630      	mov	r0, r6
 8007010:	4639      	mov	r1, r7
 8007012:	f7f9 f8ff 	bl	8000214 <__adddf3>
 8007016:	2400      	movs	r4, #0
 8007018:	4632      	mov	r2, r6
 800701a:	463b      	mov	r3, r7
 800701c:	4620      	mov	r0, r4
 800701e:	460d      	mov	r5, r1
 8007020:	f7f9 f8f6 	bl	8000210 <__aeabi_dsub>
 8007024:	4602      	mov	r2, r0
 8007026:	460b      	mov	r3, r1
 8007028:	4640      	mov	r0, r8
 800702a:	4649      	mov	r1, r9
 800702c:	f7f9 f8f0 	bl	8000210 <__aeabi_dsub>
 8007030:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007034:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007038:	2300      	movs	r3, #0
 800703a:	9304      	str	r3, [sp, #16]
 800703c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007040:	4606      	mov	r6, r0
 8007042:	460f      	mov	r7, r1
 8007044:	4652      	mov	r2, sl
 8007046:	465b      	mov	r3, fp
 8007048:	e9dd 0100 	ldrd	r0, r1, [sp]
 800704c:	f7f9 f8e0 	bl	8000210 <__aeabi_dsub>
 8007050:	4622      	mov	r2, r4
 8007052:	462b      	mov	r3, r5
 8007054:	f7f9 fa94 	bl	8000580 <__aeabi_dmul>
 8007058:	e9dd 2300 	ldrd	r2, r3, [sp]
 800705c:	4680      	mov	r8, r0
 800705e:	4689      	mov	r9, r1
 8007060:	4630      	mov	r0, r6
 8007062:	4639      	mov	r1, r7
 8007064:	f7f9 fa8c 	bl	8000580 <__aeabi_dmul>
 8007068:	4602      	mov	r2, r0
 800706a:	460b      	mov	r3, r1
 800706c:	4640      	mov	r0, r8
 800706e:	4649      	mov	r1, r9
 8007070:	f7f9 f8d0 	bl	8000214 <__adddf3>
 8007074:	4652      	mov	r2, sl
 8007076:	465b      	mov	r3, fp
 8007078:	4606      	mov	r6, r0
 800707a:	460f      	mov	r7, r1
 800707c:	4620      	mov	r0, r4
 800707e:	4629      	mov	r1, r5
 8007080:	f7f9 fa7e 	bl	8000580 <__aeabi_dmul>
 8007084:	460b      	mov	r3, r1
 8007086:	4602      	mov	r2, r0
 8007088:	4680      	mov	r8, r0
 800708a:	4689      	mov	r9, r1
 800708c:	4630      	mov	r0, r6
 800708e:	4639      	mov	r1, r7
 8007090:	f7f9 f8c0 	bl	8000214 <__adddf3>
 8007094:	4b17      	ldr	r3, [pc, #92]	@ (80070f4 <__ieee754_pow+0x41c>)
 8007096:	4299      	cmp	r1, r3
 8007098:	4604      	mov	r4, r0
 800709a:	460d      	mov	r5, r1
 800709c:	468a      	mov	sl, r1
 800709e:	468b      	mov	fp, r1
 80070a0:	f340 82ef 	ble.w	8007682 <__ieee754_pow+0x9aa>
 80070a4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80070a8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80070ac:	4303      	orrs	r3, r0
 80070ae:	f000 81e8 	beq.w	8007482 <__ieee754_pow+0x7aa>
 80070b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070b6:	2200      	movs	r2, #0
 80070b8:	2300      	movs	r3, #0
 80070ba:	f7f9 fcd3 	bl	8000a64 <__aeabi_dcmplt>
 80070be:	3800      	subs	r0, #0
 80070c0:	bf18      	it	ne
 80070c2:	2001      	movne	r0, #1
 80070c4:	e710      	b.n	8006ee8 <__ieee754_pow+0x210>
 80070c6:	bf00      	nop
 80070c8:	60000000 	.word	0x60000000
 80070cc:	3ff71547 	.word	0x3ff71547
 80070d0:	f85ddf44 	.word	0xf85ddf44
 80070d4:	3e54ae0b 	.word	0x3e54ae0b
 80070d8:	55555555 	.word	0x55555555
 80070dc:	3fd55555 	.word	0x3fd55555
 80070e0:	652b82fe 	.word	0x652b82fe
 80070e4:	3ff71547 	.word	0x3ff71547
 80070e8:	3ff00000 	.word	0x3ff00000
 80070ec:	3fd00000 	.word	0x3fd00000
 80070f0:	3fe00000 	.word	0x3fe00000
 80070f4:	408fffff 	.word	0x408fffff
 80070f8:	4bd5      	ldr	r3, [pc, #852]	@ (8007450 <__ieee754_pow+0x778>)
 80070fa:	402b      	ands	r3, r5
 80070fc:	2200      	movs	r2, #0
 80070fe:	b92b      	cbnz	r3, 800710c <__ieee754_pow+0x434>
 8007100:	4bd4      	ldr	r3, [pc, #848]	@ (8007454 <__ieee754_pow+0x77c>)
 8007102:	f7f9 fa3d 	bl	8000580 <__aeabi_dmul>
 8007106:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800710a:	468b      	mov	fp, r1
 800710c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8007110:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007114:	4413      	add	r3, r2
 8007116:	930a      	str	r3, [sp, #40]	@ 0x28
 8007118:	4bcf      	ldr	r3, [pc, #828]	@ (8007458 <__ieee754_pow+0x780>)
 800711a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800711e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8007122:	459b      	cmp	fp, r3
 8007124:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007128:	dd08      	ble.n	800713c <__ieee754_pow+0x464>
 800712a:	4bcc      	ldr	r3, [pc, #816]	@ (800745c <__ieee754_pow+0x784>)
 800712c:	459b      	cmp	fp, r3
 800712e:	f340 81a5 	ble.w	800747c <__ieee754_pow+0x7a4>
 8007132:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007134:	3301      	adds	r3, #1
 8007136:	930a      	str	r3, [sp, #40]	@ 0x28
 8007138:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800713c:	f04f 0a00 	mov.w	sl, #0
 8007140:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8007144:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007146:	4bc6      	ldr	r3, [pc, #792]	@ (8007460 <__ieee754_pow+0x788>)
 8007148:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800714c:	ed93 7b00 	vldr	d7, [r3]
 8007150:	4629      	mov	r1, r5
 8007152:	ec53 2b17 	vmov	r2, r3, d7
 8007156:	ed8d 7b06 	vstr	d7, [sp, #24]
 800715a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800715e:	f7f9 f857 	bl	8000210 <__aeabi_dsub>
 8007162:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007166:	4606      	mov	r6, r0
 8007168:	460f      	mov	r7, r1
 800716a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800716e:	f7f9 f851 	bl	8000214 <__adddf3>
 8007172:	4602      	mov	r2, r0
 8007174:	460b      	mov	r3, r1
 8007176:	2000      	movs	r0, #0
 8007178:	49ba      	ldr	r1, [pc, #744]	@ (8007464 <__ieee754_pow+0x78c>)
 800717a:	f7f9 fb2b 	bl	80007d4 <__aeabi_ddiv>
 800717e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8007182:	4602      	mov	r2, r0
 8007184:	460b      	mov	r3, r1
 8007186:	4630      	mov	r0, r6
 8007188:	4639      	mov	r1, r7
 800718a:	f7f9 f9f9 	bl	8000580 <__aeabi_dmul>
 800718e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007192:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8007196:	106d      	asrs	r5, r5, #1
 8007198:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800719c:	f04f 0b00 	mov.w	fp, #0
 80071a0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80071a4:	4661      	mov	r1, ip
 80071a6:	2200      	movs	r2, #0
 80071a8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80071ac:	4658      	mov	r0, fp
 80071ae:	46e1      	mov	r9, ip
 80071b0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80071b4:	4614      	mov	r4, r2
 80071b6:	461d      	mov	r5, r3
 80071b8:	f7f9 f9e2 	bl	8000580 <__aeabi_dmul>
 80071bc:	4602      	mov	r2, r0
 80071be:	460b      	mov	r3, r1
 80071c0:	4630      	mov	r0, r6
 80071c2:	4639      	mov	r1, r7
 80071c4:	f7f9 f824 	bl	8000210 <__aeabi_dsub>
 80071c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071cc:	4606      	mov	r6, r0
 80071ce:	460f      	mov	r7, r1
 80071d0:	4620      	mov	r0, r4
 80071d2:	4629      	mov	r1, r5
 80071d4:	f7f9 f81c 	bl	8000210 <__aeabi_dsub>
 80071d8:	4602      	mov	r2, r0
 80071da:	460b      	mov	r3, r1
 80071dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80071e0:	f7f9 f816 	bl	8000210 <__aeabi_dsub>
 80071e4:	465a      	mov	r2, fp
 80071e6:	464b      	mov	r3, r9
 80071e8:	f7f9 f9ca 	bl	8000580 <__aeabi_dmul>
 80071ec:	4602      	mov	r2, r0
 80071ee:	460b      	mov	r3, r1
 80071f0:	4630      	mov	r0, r6
 80071f2:	4639      	mov	r1, r7
 80071f4:	f7f9 f80c 	bl	8000210 <__aeabi_dsub>
 80071f8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80071fc:	f7f9 f9c0 	bl	8000580 <__aeabi_dmul>
 8007200:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007204:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007208:	4610      	mov	r0, r2
 800720a:	4619      	mov	r1, r3
 800720c:	f7f9 f9b8 	bl	8000580 <__aeabi_dmul>
 8007210:	a37d      	add	r3, pc, #500	@ (adr r3, 8007408 <__ieee754_pow+0x730>)
 8007212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007216:	4604      	mov	r4, r0
 8007218:	460d      	mov	r5, r1
 800721a:	f7f9 f9b1 	bl	8000580 <__aeabi_dmul>
 800721e:	a37c      	add	r3, pc, #496	@ (adr r3, 8007410 <__ieee754_pow+0x738>)
 8007220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007224:	f7f8 fff6 	bl	8000214 <__adddf3>
 8007228:	4622      	mov	r2, r4
 800722a:	462b      	mov	r3, r5
 800722c:	f7f9 f9a8 	bl	8000580 <__aeabi_dmul>
 8007230:	a379      	add	r3, pc, #484	@ (adr r3, 8007418 <__ieee754_pow+0x740>)
 8007232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007236:	f7f8 ffed 	bl	8000214 <__adddf3>
 800723a:	4622      	mov	r2, r4
 800723c:	462b      	mov	r3, r5
 800723e:	f7f9 f99f 	bl	8000580 <__aeabi_dmul>
 8007242:	a377      	add	r3, pc, #476	@ (adr r3, 8007420 <__ieee754_pow+0x748>)
 8007244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007248:	f7f8 ffe4 	bl	8000214 <__adddf3>
 800724c:	4622      	mov	r2, r4
 800724e:	462b      	mov	r3, r5
 8007250:	f7f9 f996 	bl	8000580 <__aeabi_dmul>
 8007254:	a374      	add	r3, pc, #464	@ (adr r3, 8007428 <__ieee754_pow+0x750>)
 8007256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725a:	f7f8 ffdb 	bl	8000214 <__adddf3>
 800725e:	4622      	mov	r2, r4
 8007260:	462b      	mov	r3, r5
 8007262:	f7f9 f98d 	bl	8000580 <__aeabi_dmul>
 8007266:	a372      	add	r3, pc, #456	@ (adr r3, 8007430 <__ieee754_pow+0x758>)
 8007268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726c:	f7f8 ffd2 	bl	8000214 <__adddf3>
 8007270:	4622      	mov	r2, r4
 8007272:	4606      	mov	r6, r0
 8007274:	460f      	mov	r7, r1
 8007276:	462b      	mov	r3, r5
 8007278:	4620      	mov	r0, r4
 800727a:	4629      	mov	r1, r5
 800727c:	f7f9 f980 	bl	8000580 <__aeabi_dmul>
 8007280:	4602      	mov	r2, r0
 8007282:	460b      	mov	r3, r1
 8007284:	4630      	mov	r0, r6
 8007286:	4639      	mov	r1, r7
 8007288:	f7f9 f97a 	bl	8000580 <__aeabi_dmul>
 800728c:	465a      	mov	r2, fp
 800728e:	4604      	mov	r4, r0
 8007290:	460d      	mov	r5, r1
 8007292:	464b      	mov	r3, r9
 8007294:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007298:	f7f8 ffbc 	bl	8000214 <__adddf3>
 800729c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072a0:	f7f9 f96e 	bl	8000580 <__aeabi_dmul>
 80072a4:	4622      	mov	r2, r4
 80072a6:	462b      	mov	r3, r5
 80072a8:	f7f8 ffb4 	bl	8000214 <__adddf3>
 80072ac:	465a      	mov	r2, fp
 80072ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80072b2:	464b      	mov	r3, r9
 80072b4:	4658      	mov	r0, fp
 80072b6:	4649      	mov	r1, r9
 80072b8:	f7f9 f962 	bl	8000580 <__aeabi_dmul>
 80072bc:	4b6a      	ldr	r3, [pc, #424]	@ (8007468 <__ieee754_pow+0x790>)
 80072be:	2200      	movs	r2, #0
 80072c0:	4606      	mov	r6, r0
 80072c2:	460f      	mov	r7, r1
 80072c4:	f7f8 ffa6 	bl	8000214 <__adddf3>
 80072c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80072cc:	f7f8 ffa2 	bl	8000214 <__adddf3>
 80072d0:	46d8      	mov	r8, fp
 80072d2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80072d6:	460d      	mov	r5, r1
 80072d8:	465a      	mov	r2, fp
 80072da:	460b      	mov	r3, r1
 80072dc:	4640      	mov	r0, r8
 80072de:	4649      	mov	r1, r9
 80072e0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80072e4:	f7f9 f94c 	bl	8000580 <__aeabi_dmul>
 80072e8:	465c      	mov	r4, fp
 80072ea:	4680      	mov	r8, r0
 80072ec:	4689      	mov	r9, r1
 80072ee:	4b5e      	ldr	r3, [pc, #376]	@ (8007468 <__ieee754_pow+0x790>)
 80072f0:	2200      	movs	r2, #0
 80072f2:	4620      	mov	r0, r4
 80072f4:	4629      	mov	r1, r5
 80072f6:	f7f8 ff8b 	bl	8000210 <__aeabi_dsub>
 80072fa:	4632      	mov	r2, r6
 80072fc:	463b      	mov	r3, r7
 80072fe:	f7f8 ff87 	bl	8000210 <__aeabi_dsub>
 8007302:	4602      	mov	r2, r0
 8007304:	460b      	mov	r3, r1
 8007306:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800730a:	f7f8 ff81 	bl	8000210 <__aeabi_dsub>
 800730e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007312:	f7f9 f935 	bl	8000580 <__aeabi_dmul>
 8007316:	4622      	mov	r2, r4
 8007318:	4606      	mov	r6, r0
 800731a:	460f      	mov	r7, r1
 800731c:	462b      	mov	r3, r5
 800731e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007322:	f7f9 f92d 	bl	8000580 <__aeabi_dmul>
 8007326:	4602      	mov	r2, r0
 8007328:	460b      	mov	r3, r1
 800732a:	4630      	mov	r0, r6
 800732c:	4639      	mov	r1, r7
 800732e:	f7f8 ff71 	bl	8000214 <__adddf3>
 8007332:	4606      	mov	r6, r0
 8007334:	460f      	mov	r7, r1
 8007336:	4602      	mov	r2, r0
 8007338:	460b      	mov	r3, r1
 800733a:	4640      	mov	r0, r8
 800733c:	4649      	mov	r1, r9
 800733e:	f7f8 ff69 	bl	8000214 <__adddf3>
 8007342:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8007346:	a33c      	add	r3, pc, #240	@ (adr r3, 8007438 <__ieee754_pow+0x760>)
 8007348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734c:	4658      	mov	r0, fp
 800734e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8007352:	460d      	mov	r5, r1
 8007354:	f7f9 f914 	bl	8000580 <__aeabi_dmul>
 8007358:	465c      	mov	r4, fp
 800735a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800735e:	4642      	mov	r2, r8
 8007360:	464b      	mov	r3, r9
 8007362:	4620      	mov	r0, r4
 8007364:	4629      	mov	r1, r5
 8007366:	f7f8 ff53 	bl	8000210 <__aeabi_dsub>
 800736a:	4602      	mov	r2, r0
 800736c:	460b      	mov	r3, r1
 800736e:	4630      	mov	r0, r6
 8007370:	4639      	mov	r1, r7
 8007372:	f7f8 ff4d 	bl	8000210 <__aeabi_dsub>
 8007376:	a332      	add	r3, pc, #200	@ (adr r3, 8007440 <__ieee754_pow+0x768>)
 8007378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737c:	f7f9 f900 	bl	8000580 <__aeabi_dmul>
 8007380:	a331      	add	r3, pc, #196	@ (adr r3, 8007448 <__ieee754_pow+0x770>)
 8007382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007386:	4606      	mov	r6, r0
 8007388:	460f      	mov	r7, r1
 800738a:	4620      	mov	r0, r4
 800738c:	4629      	mov	r1, r5
 800738e:	f7f9 f8f7 	bl	8000580 <__aeabi_dmul>
 8007392:	4602      	mov	r2, r0
 8007394:	460b      	mov	r3, r1
 8007396:	4630      	mov	r0, r6
 8007398:	4639      	mov	r1, r7
 800739a:	f7f8 ff3b 	bl	8000214 <__adddf3>
 800739e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80073a0:	4b32      	ldr	r3, [pc, #200]	@ (800746c <__ieee754_pow+0x794>)
 80073a2:	4413      	add	r3, r2
 80073a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a8:	f7f8 ff34 	bl	8000214 <__adddf3>
 80073ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80073b0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80073b2:	f7f9 f87b 	bl	80004ac <__aeabi_i2d>
 80073b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80073b8:	4b2d      	ldr	r3, [pc, #180]	@ (8007470 <__ieee754_pow+0x798>)
 80073ba:	4413      	add	r3, r2
 80073bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80073c0:	4606      	mov	r6, r0
 80073c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80073c6:	460f      	mov	r7, r1
 80073c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073cc:	f7f8 ff22 	bl	8000214 <__adddf3>
 80073d0:	4642      	mov	r2, r8
 80073d2:	464b      	mov	r3, r9
 80073d4:	f7f8 ff1e 	bl	8000214 <__adddf3>
 80073d8:	4632      	mov	r2, r6
 80073da:	463b      	mov	r3, r7
 80073dc:	f7f8 ff1a 	bl	8000214 <__adddf3>
 80073e0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80073e4:	4632      	mov	r2, r6
 80073e6:	463b      	mov	r3, r7
 80073e8:	4658      	mov	r0, fp
 80073ea:	460d      	mov	r5, r1
 80073ec:	f7f8 ff10 	bl	8000210 <__aeabi_dsub>
 80073f0:	4642      	mov	r2, r8
 80073f2:	464b      	mov	r3, r9
 80073f4:	f7f8 ff0c 	bl	8000210 <__aeabi_dsub>
 80073f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073fc:	f7f8 ff08 	bl	8000210 <__aeabi_dsub>
 8007400:	465c      	mov	r4, fp
 8007402:	4602      	mov	r2, r0
 8007404:	e036      	b.n	8007474 <__ieee754_pow+0x79c>
 8007406:	bf00      	nop
 8007408:	4a454eef 	.word	0x4a454eef
 800740c:	3fca7e28 	.word	0x3fca7e28
 8007410:	93c9db65 	.word	0x93c9db65
 8007414:	3fcd864a 	.word	0x3fcd864a
 8007418:	a91d4101 	.word	0xa91d4101
 800741c:	3fd17460 	.word	0x3fd17460
 8007420:	518f264d 	.word	0x518f264d
 8007424:	3fd55555 	.word	0x3fd55555
 8007428:	db6fabff 	.word	0xdb6fabff
 800742c:	3fdb6db6 	.word	0x3fdb6db6
 8007430:	33333303 	.word	0x33333303
 8007434:	3fe33333 	.word	0x3fe33333
 8007438:	e0000000 	.word	0xe0000000
 800743c:	3feec709 	.word	0x3feec709
 8007440:	dc3a03fd 	.word	0xdc3a03fd
 8007444:	3feec709 	.word	0x3feec709
 8007448:	145b01f5 	.word	0x145b01f5
 800744c:	be3e2fe0 	.word	0xbe3e2fe0
 8007450:	7ff00000 	.word	0x7ff00000
 8007454:	43400000 	.word	0x43400000
 8007458:	0003988e 	.word	0x0003988e
 800745c:	000bb679 	.word	0x000bb679
 8007460:	08007b38 	.word	0x08007b38
 8007464:	3ff00000 	.word	0x3ff00000
 8007468:	40080000 	.word	0x40080000
 800746c:	08007b18 	.word	0x08007b18
 8007470:	08007b28 	.word	0x08007b28
 8007474:	460b      	mov	r3, r1
 8007476:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800747a:	e5d7      	b.n	800702c <__ieee754_pow+0x354>
 800747c:	f04f 0a01 	mov.w	sl, #1
 8007480:	e65e      	b.n	8007140 <__ieee754_pow+0x468>
 8007482:	a3b4      	add	r3, pc, #720	@ (adr r3, 8007754 <__ieee754_pow+0xa7c>)
 8007484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007488:	4630      	mov	r0, r6
 800748a:	4639      	mov	r1, r7
 800748c:	f7f8 fec2 	bl	8000214 <__adddf3>
 8007490:	4642      	mov	r2, r8
 8007492:	e9cd 0100 	strd	r0, r1, [sp]
 8007496:	464b      	mov	r3, r9
 8007498:	4620      	mov	r0, r4
 800749a:	4629      	mov	r1, r5
 800749c:	f7f8 feb8 	bl	8000210 <__aeabi_dsub>
 80074a0:	4602      	mov	r2, r0
 80074a2:	460b      	mov	r3, r1
 80074a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074a8:	f7f9 fafa 	bl	8000aa0 <__aeabi_dcmpgt>
 80074ac:	2800      	cmp	r0, #0
 80074ae:	f47f ae00 	bne.w	80070b2 <__ieee754_pow+0x3da>
 80074b2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80074b6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80074ba:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80074be:	fa43 fa0a 	asr.w	sl, r3, sl
 80074c2:	44da      	add	sl, fp
 80074c4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80074c8:	489d      	ldr	r0, [pc, #628]	@ (8007740 <__ieee754_pow+0xa68>)
 80074ca:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80074ce:	4108      	asrs	r0, r1
 80074d0:	ea00 030a 	and.w	r3, r0, sl
 80074d4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80074d8:	f1c1 0114 	rsb	r1, r1, #20
 80074dc:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80074e0:	fa4a fa01 	asr.w	sl, sl, r1
 80074e4:	f1bb 0f00 	cmp.w	fp, #0
 80074e8:	4640      	mov	r0, r8
 80074ea:	4649      	mov	r1, r9
 80074ec:	f04f 0200 	mov.w	r2, #0
 80074f0:	bfb8      	it	lt
 80074f2:	f1ca 0a00 	rsblt	sl, sl, #0
 80074f6:	f7f8 fe8b 	bl	8000210 <__aeabi_dsub>
 80074fa:	4680      	mov	r8, r0
 80074fc:	4689      	mov	r9, r1
 80074fe:	4632      	mov	r2, r6
 8007500:	463b      	mov	r3, r7
 8007502:	4640      	mov	r0, r8
 8007504:	4649      	mov	r1, r9
 8007506:	f7f8 fe85 	bl	8000214 <__adddf3>
 800750a:	2400      	movs	r4, #0
 800750c:	a37c      	add	r3, pc, #496	@ (adr r3, 8007700 <__ieee754_pow+0xa28>)
 800750e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007512:	4620      	mov	r0, r4
 8007514:	460d      	mov	r5, r1
 8007516:	f7f9 f833 	bl	8000580 <__aeabi_dmul>
 800751a:	4642      	mov	r2, r8
 800751c:	e9cd 0100 	strd	r0, r1, [sp]
 8007520:	464b      	mov	r3, r9
 8007522:	4620      	mov	r0, r4
 8007524:	4629      	mov	r1, r5
 8007526:	f7f8 fe73 	bl	8000210 <__aeabi_dsub>
 800752a:	4602      	mov	r2, r0
 800752c:	460b      	mov	r3, r1
 800752e:	4630      	mov	r0, r6
 8007530:	4639      	mov	r1, r7
 8007532:	f7f8 fe6d 	bl	8000210 <__aeabi_dsub>
 8007536:	a374      	add	r3, pc, #464	@ (adr r3, 8007708 <__ieee754_pow+0xa30>)
 8007538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753c:	f7f9 f820 	bl	8000580 <__aeabi_dmul>
 8007540:	a373      	add	r3, pc, #460	@ (adr r3, 8007710 <__ieee754_pow+0xa38>)
 8007542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007546:	4680      	mov	r8, r0
 8007548:	4689      	mov	r9, r1
 800754a:	4620      	mov	r0, r4
 800754c:	4629      	mov	r1, r5
 800754e:	f7f9 f817 	bl	8000580 <__aeabi_dmul>
 8007552:	4602      	mov	r2, r0
 8007554:	460b      	mov	r3, r1
 8007556:	4640      	mov	r0, r8
 8007558:	4649      	mov	r1, r9
 800755a:	f7f8 fe5b 	bl	8000214 <__adddf3>
 800755e:	4604      	mov	r4, r0
 8007560:	460d      	mov	r5, r1
 8007562:	4602      	mov	r2, r0
 8007564:	460b      	mov	r3, r1
 8007566:	e9dd 0100 	ldrd	r0, r1, [sp]
 800756a:	f7f8 fe53 	bl	8000214 <__adddf3>
 800756e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007572:	4680      	mov	r8, r0
 8007574:	4689      	mov	r9, r1
 8007576:	f7f8 fe4b 	bl	8000210 <__aeabi_dsub>
 800757a:	4602      	mov	r2, r0
 800757c:	460b      	mov	r3, r1
 800757e:	4620      	mov	r0, r4
 8007580:	4629      	mov	r1, r5
 8007582:	f7f8 fe45 	bl	8000210 <__aeabi_dsub>
 8007586:	4642      	mov	r2, r8
 8007588:	4606      	mov	r6, r0
 800758a:	460f      	mov	r7, r1
 800758c:	464b      	mov	r3, r9
 800758e:	4640      	mov	r0, r8
 8007590:	4649      	mov	r1, r9
 8007592:	f7f8 fff5 	bl	8000580 <__aeabi_dmul>
 8007596:	a360      	add	r3, pc, #384	@ (adr r3, 8007718 <__ieee754_pow+0xa40>)
 8007598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759c:	4604      	mov	r4, r0
 800759e:	460d      	mov	r5, r1
 80075a0:	f7f8 ffee 	bl	8000580 <__aeabi_dmul>
 80075a4:	a35e      	add	r3, pc, #376	@ (adr r3, 8007720 <__ieee754_pow+0xa48>)
 80075a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075aa:	f7f8 fe31 	bl	8000210 <__aeabi_dsub>
 80075ae:	4622      	mov	r2, r4
 80075b0:	462b      	mov	r3, r5
 80075b2:	f7f8 ffe5 	bl	8000580 <__aeabi_dmul>
 80075b6:	a35c      	add	r3, pc, #368	@ (adr r3, 8007728 <__ieee754_pow+0xa50>)
 80075b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075bc:	f7f8 fe2a 	bl	8000214 <__adddf3>
 80075c0:	4622      	mov	r2, r4
 80075c2:	462b      	mov	r3, r5
 80075c4:	f7f8 ffdc 	bl	8000580 <__aeabi_dmul>
 80075c8:	a359      	add	r3, pc, #356	@ (adr r3, 8007730 <__ieee754_pow+0xa58>)
 80075ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ce:	f7f8 fe1f 	bl	8000210 <__aeabi_dsub>
 80075d2:	4622      	mov	r2, r4
 80075d4:	462b      	mov	r3, r5
 80075d6:	f7f8 ffd3 	bl	8000580 <__aeabi_dmul>
 80075da:	a357      	add	r3, pc, #348	@ (adr r3, 8007738 <__ieee754_pow+0xa60>)
 80075dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e0:	f7f8 fe18 	bl	8000214 <__adddf3>
 80075e4:	4622      	mov	r2, r4
 80075e6:	462b      	mov	r3, r5
 80075e8:	f7f8 ffca 	bl	8000580 <__aeabi_dmul>
 80075ec:	4602      	mov	r2, r0
 80075ee:	460b      	mov	r3, r1
 80075f0:	4640      	mov	r0, r8
 80075f2:	4649      	mov	r1, r9
 80075f4:	f7f8 fe0c 	bl	8000210 <__aeabi_dsub>
 80075f8:	4604      	mov	r4, r0
 80075fa:	460d      	mov	r5, r1
 80075fc:	4602      	mov	r2, r0
 80075fe:	460b      	mov	r3, r1
 8007600:	4640      	mov	r0, r8
 8007602:	4649      	mov	r1, r9
 8007604:	f7f8 ffbc 	bl	8000580 <__aeabi_dmul>
 8007608:	2200      	movs	r2, #0
 800760a:	e9cd 0100 	strd	r0, r1, [sp]
 800760e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007612:	4620      	mov	r0, r4
 8007614:	4629      	mov	r1, r5
 8007616:	f7f8 fdfb 	bl	8000210 <__aeabi_dsub>
 800761a:	4602      	mov	r2, r0
 800761c:	460b      	mov	r3, r1
 800761e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007622:	f7f9 f8d7 	bl	80007d4 <__aeabi_ddiv>
 8007626:	4632      	mov	r2, r6
 8007628:	4604      	mov	r4, r0
 800762a:	460d      	mov	r5, r1
 800762c:	463b      	mov	r3, r7
 800762e:	4640      	mov	r0, r8
 8007630:	4649      	mov	r1, r9
 8007632:	f7f8 ffa5 	bl	8000580 <__aeabi_dmul>
 8007636:	4632      	mov	r2, r6
 8007638:	463b      	mov	r3, r7
 800763a:	f7f8 fdeb 	bl	8000214 <__adddf3>
 800763e:	4602      	mov	r2, r0
 8007640:	460b      	mov	r3, r1
 8007642:	4620      	mov	r0, r4
 8007644:	4629      	mov	r1, r5
 8007646:	f7f8 fde3 	bl	8000210 <__aeabi_dsub>
 800764a:	4642      	mov	r2, r8
 800764c:	464b      	mov	r3, r9
 800764e:	f7f8 fddf 	bl	8000210 <__aeabi_dsub>
 8007652:	460b      	mov	r3, r1
 8007654:	4602      	mov	r2, r0
 8007656:	493b      	ldr	r1, [pc, #236]	@ (8007744 <__ieee754_pow+0xa6c>)
 8007658:	2000      	movs	r0, #0
 800765a:	f7f8 fdd9 	bl	8000210 <__aeabi_dsub>
 800765e:	ec41 0b10 	vmov	d0, r0, r1
 8007662:	ee10 3a90 	vmov	r3, s1
 8007666:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800766a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800766e:	da30      	bge.n	80076d2 <__ieee754_pow+0x9fa>
 8007670:	4650      	mov	r0, sl
 8007672:	f000 f87d 	bl	8007770 <scalbn>
 8007676:	ec51 0b10 	vmov	r0, r1, d0
 800767a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800767e:	f7ff bbd2 	b.w	8006e26 <__ieee754_pow+0x14e>
 8007682:	4c31      	ldr	r4, [pc, #196]	@ (8007748 <__ieee754_pow+0xa70>)
 8007684:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007688:	42a3      	cmp	r3, r4
 800768a:	d91a      	bls.n	80076c2 <__ieee754_pow+0x9ea>
 800768c:	4b2f      	ldr	r3, [pc, #188]	@ (800774c <__ieee754_pow+0xa74>)
 800768e:	440b      	add	r3, r1
 8007690:	4303      	orrs	r3, r0
 8007692:	d009      	beq.n	80076a8 <__ieee754_pow+0x9d0>
 8007694:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007698:	2200      	movs	r2, #0
 800769a:	2300      	movs	r3, #0
 800769c:	f7f9 f9e2 	bl	8000a64 <__aeabi_dcmplt>
 80076a0:	3800      	subs	r0, #0
 80076a2:	bf18      	it	ne
 80076a4:	2001      	movne	r0, #1
 80076a6:	e42b      	b.n	8006f00 <__ieee754_pow+0x228>
 80076a8:	4642      	mov	r2, r8
 80076aa:	464b      	mov	r3, r9
 80076ac:	f7f8 fdb0 	bl	8000210 <__aeabi_dsub>
 80076b0:	4632      	mov	r2, r6
 80076b2:	463b      	mov	r3, r7
 80076b4:	f7f9 f9ea 	bl	8000a8c <__aeabi_dcmpge>
 80076b8:	2800      	cmp	r0, #0
 80076ba:	d1eb      	bne.n	8007694 <__ieee754_pow+0x9bc>
 80076bc:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800775c <__ieee754_pow+0xa84>
 80076c0:	e6f7      	b.n	80074b2 <__ieee754_pow+0x7da>
 80076c2:	469a      	mov	sl, r3
 80076c4:	4b22      	ldr	r3, [pc, #136]	@ (8007750 <__ieee754_pow+0xa78>)
 80076c6:	459a      	cmp	sl, r3
 80076c8:	f63f aef3 	bhi.w	80074b2 <__ieee754_pow+0x7da>
 80076cc:	f8dd a010 	ldr.w	sl, [sp, #16]
 80076d0:	e715      	b.n	80074fe <__ieee754_pow+0x826>
 80076d2:	ec51 0b10 	vmov	r0, r1, d0
 80076d6:	4619      	mov	r1, r3
 80076d8:	e7cf      	b.n	800767a <__ieee754_pow+0x9a2>
 80076da:	491a      	ldr	r1, [pc, #104]	@ (8007744 <__ieee754_pow+0xa6c>)
 80076dc:	2000      	movs	r0, #0
 80076de:	f7ff bb18 	b.w	8006d12 <__ieee754_pow+0x3a>
 80076e2:	2000      	movs	r0, #0
 80076e4:	2100      	movs	r1, #0
 80076e6:	f7ff bb14 	b.w	8006d12 <__ieee754_pow+0x3a>
 80076ea:	4630      	mov	r0, r6
 80076ec:	4639      	mov	r1, r7
 80076ee:	f7ff bb10 	b.w	8006d12 <__ieee754_pow+0x3a>
 80076f2:	460c      	mov	r4, r1
 80076f4:	f7ff bb5e 	b.w	8006db4 <__ieee754_pow+0xdc>
 80076f8:	2400      	movs	r4, #0
 80076fa:	f7ff bb49 	b.w	8006d90 <__ieee754_pow+0xb8>
 80076fe:	bf00      	nop
 8007700:	00000000 	.word	0x00000000
 8007704:	3fe62e43 	.word	0x3fe62e43
 8007708:	fefa39ef 	.word	0xfefa39ef
 800770c:	3fe62e42 	.word	0x3fe62e42
 8007710:	0ca86c39 	.word	0x0ca86c39
 8007714:	be205c61 	.word	0xbe205c61
 8007718:	72bea4d0 	.word	0x72bea4d0
 800771c:	3e663769 	.word	0x3e663769
 8007720:	c5d26bf1 	.word	0xc5d26bf1
 8007724:	3ebbbd41 	.word	0x3ebbbd41
 8007728:	af25de2c 	.word	0xaf25de2c
 800772c:	3f11566a 	.word	0x3f11566a
 8007730:	16bebd93 	.word	0x16bebd93
 8007734:	3f66c16c 	.word	0x3f66c16c
 8007738:	5555553e 	.word	0x5555553e
 800773c:	3fc55555 	.word	0x3fc55555
 8007740:	fff00000 	.word	0xfff00000
 8007744:	3ff00000 	.word	0x3ff00000
 8007748:	4090cbff 	.word	0x4090cbff
 800774c:	3f6f3400 	.word	0x3f6f3400
 8007750:	3fe00000 	.word	0x3fe00000
 8007754:	652b82fe 	.word	0x652b82fe
 8007758:	3c971547 	.word	0x3c971547
 800775c:	4090cc00 	.word	0x4090cc00

08007760 <fabs>:
 8007760:	ec51 0b10 	vmov	r0, r1, d0
 8007764:	4602      	mov	r2, r0
 8007766:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800776a:	ec43 2b10 	vmov	d0, r2, r3
 800776e:	4770      	bx	lr

08007770 <scalbn>:
 8007770:	b570      	push	{r4, r5, r6, lr}
 8007772:	ec55 4b10 	vmov	r4, r5, d0
 8007776:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800777a:	4606      	mov	r6, r0
 800777c:	462b      	mov	r3, r5
 800777e:	b991      	cbnz	r1, 80077a6 <scalbn+0x36>
 8007780:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8007784:	4323      	orrs	r3, r4
 8007786:	d03d      	beq.n	8007804 <scalbn+0x94>
 8007788:	4b35      	ldr	r3, [pc, #212]	@ (8007860 <scalbn+0xf0>)
 800778a:	4620      	mov	r0, r4
 800778c:	4629      	mov	r1, r5
 800778e:	2200      	movs	r2, #0
 8007790:	f7f8 fef6 	bl	8000580 <__aeabi_dmul>
 8007794:	4b33      	ldr	r3, [pc, #204]	@ (8007864 <scalbn+0xf4>)
 8007796:	429e      	cmp	r6, r3
 8007798:	4604      	mov	r4, r0
 800779a:	460d      	mov	r5, r1
 800779c:	da0f      	bge.n	80077be <scalbn+0x4e>
 800779e:	a328      	add	r3, pc, #160	@ (adr r3, 8007840 <scalbn+0xd0>)
 80077a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a4:	e01e      	b.n	80077e4 <scalbn+0x74>
 80077a6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80077aa:	4291      	cmp	r1, r2
 80077ac:	d10b      	bne.n	80077c6 <scalbn+0x56>
 80077ae:	4622      	mov	r2, r4
 80077b0:	4620      	mov	r0, r4
 80077b2:	4629      	mov	r1, r5
 80077b4:	f7f8 fd2e 	bl	8000214 <__adddf3>
 80077b8:	4604      	mov	r4, r0
 80077ba:	460d      	mov	r5, r1
 80077bc:	e022      	b.n	8007804 <scalbn+0x94>
 80077be:	460b      	mov	r3, r1
 80077c0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80077c4:	3936      	subs	r1, #54	@ 0x36
 80077c6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80077ca:	4296      	cmp	r6, r2
 80077cc:	dd0d      	ble.n	80077ea <scalbn+0x7a>
 80077ce:	2d00      	cmp	r5, #0
 80077d0:	a11d      	add	r1, pc, #116	@ (adr r1, 8007848 <scalbn+0xd8>)
 80077d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077d6:	da02      	bge.n	80077de <scalbn+0x6e>
 80077d8:	a11d      	add	r1, pc, #116	@ (adr r1, 8007850 <scalbn+0xe0>)
 80077da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077de:	a31a      	add	r3, pc, #104	@ (adr r3, 8007848 <scalbn+0xd8>)
 80077e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e4:	f7f8 fecc 	bl	8000580 <__aeabi_dmul>
 80077e8:	e7e6      	b.n	80077b8 <scalbn+0x48>
 80077ea:	1872      	adds	r2, r6, r1
 80077ec:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80077f0:	428a      	cmp	r2, r1
 80077f2:	dcec      	bgt.n	80077ce <scalbn+0x5e>
 80077f4:	2a00      	cmp	r2, #0
 80077f6:	dd08      	ble.n	800780a <scalbn+0x9a>
 80077f8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80077fc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007800:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007804:	ec45 4b10 	vmov	d0, r4, r5
 8007808:	bd70      	pop	{r4, r5, r6, pc}
 800780a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800780e:	da08      	bge.n	8007822 <scalbn+0xb2>
 8007810:	2d00      	cmp	r5, #0
 8007812:	a10b      	add	r1, pc, #44	@ (adr r1, 8007840 <scalbn+0xd0>)
 8007814:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007818:	dac1      	bge.n	800779e <scalbn+0x2e>
 800781a:	a10f      	add	r1, pc, #60	@ (adr r1, 8007858 <scalbn+0xe8>)
 800781c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007820:	e7bd      	b.n	800779e <scalbn+0x2e>
 8007822:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007826:	3236      	adds	r2, #54	@ 0x36
 8007828:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800782c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007830:	4620      	mov	r0, r4
 8007832:	4b0d      	ldr	r3, [pc, #52]	@ (8007868 <scalbn+0xf8>)
 8007834:	4629      	mov	r1, r5
 8007836:	2200      	movs	r2, #0
 8007838:	e7d4      	b.n	80077e4 <scalbn+0x74>
 800783a:	bf00      	nop
 800783c:	f3af 8000 	nop.w
 8007840:	c2f8f359 	.word	0xc2f8f359
 8007844:	01a56e1f 	.word	0x01a56e1f
 8007848:	8800759c 	.word	0x8800759c
 800784c:	7e37e43c 	.word	0x7e37e43c
 8007850:	8800759c 	.word	0x8800759c
 8007854:	fe37e43c 	.word	0xfe37e43c
 8007858:	c2f8f359 	.word	0xc2f8f359
 800785c:	81a56e1f 	.word	0x81a56e1f
 8007860:	43500000 	.word	0x43500000
 8007864:	ffff3cb0 	.word	0xffff3cb0
 8007868:	3c900000 	.word	0x3c900000

0800786c <with_errno>:
 800786c:	b510      	push	{r4, lr}
 800786e:	ed2d 8b02 	vpush	{d8}
 8007872:	eeb0 8a40 	vmov.f32	s16, s0
 8007876:	eef0 8a60 	vmov.f32	s17, s1
 800787a:	4604      	mov	r4, r0
 800787c:	f7ff f986 	bl	8006b8c <__errno>
 8007880:	eeb0 0a48 	vmov.f32	s0, s16
 8007884:	eef0 0a68 	vmov.f32	s1, s17
 8007888:	ecbd 8b02 	vpop	{d8}
 800788c:	6004      	str	r4, [r0, #0]
 800788e:	bd10      	pop	{r4, pc}

08007890 <xflow>:
 8007890:	4603      	mov	r3, r0
 8007892:	b507      	push	{r0, r1, r2, lr}
 8007894:	ec51 0b10 	vmov	r0, r1, d0
 8007898:	b183      	cbz	r3, 80078bc <xflow+0x2c>
 800789a:	4602      	mov	r2, r0
 800789c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80078a0:	e9cd 2300 	strd	r2, r3, [sp]
 80078a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078a8:	f7f8 fe6a 	bl	8000580 <__aeabi_dmul>
 80078ac:	ec41 0b10 	vmov	d0, r0, r1
 80078b0:	2022      	movs	r0, #34	@ 0x22
 80078b2:	b003      	add	sp, #12
 80078b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80078b8:	f7ff bfd8 	b.w	800786c <with_errno>
 80078bc:	4602      	mov	r2, r0
 80078be:	460b      	mov	r3, r1
 80078c0:	e7ee      	b.n	80078a0 <xflow+0x10>
 80078c2:	0000      	movs	r0, r0
 80078c4:	0000      	movs	r0, r0
	...

080078c8 <__math_uflow>:
 80078c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80078d0 <__math_uflow+0x8>
 80078cc:	f7ff bfe0 	b.w	8007890 <xflow>
 80078d0:	00000000 	.word	0x00000000
 80078d4:	10000000 	.word	0x10000000

080078d8 <__math_oflow>:
 80078d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80078e0 <__math_oflow+0x8>
 80078dc:	f7ff bfd8 	b.w	8007890 <xflow>
 80078e0:	00000000 	.word	0x00000000
 80078e4:	70000000 	.word	0x70000000

080078e8 <__ieee754_sqrt>:
 80078e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ec:	4a68      	ldr	r2, [pc, #416]	@ (8007a90 <__ieee754_sqrt+0x1a8>)
 80078ee:	ec55 4b10 	vmov	r4, r5, d0
 80078f2:	43aa      	bics	r2, r5
 80078f4:	462b      	mov	r3, r5
 80078f6:	4621      	mov	r1, r4
 80078f8:	d110      	bne.n	800791c <__ieee754_sqrt+0x34>
 80078fa:	4622      	mov	r2, r4
 80078fc:	4620      	mov	r0, r4
 80078fe:	4629      	mov	r1, r5
 8007900:	f7f8 fe3e 	bl	8000580 <__aeabi_dmul>
 8007904:	4602      	mov	r2, r0
 8007906:	460b      	mov	r3, r1
 8007908:	4620      	mov	r0, r4
 800790a:	4629      	mov	r1, r5
 800790c:	f7f8 fc82 	bl	8000214 <__adddf3>
 8007910:	4604      	mov	r4, r0
 8007912:	460d      	mov	r5, r1
 8007914:	ec45 4b10 	vmov	d0, r4, r5
 8007918:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800791c:	2d00      	cmp	r5, #0
 800791e:	dc0e      	bgt.n	800793e <__ieee754_sqrt+0x56>
 8007920:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8007924:	4322      	orrs	r2, r4
 8007926:	d0f5      	beq.n	8007914 <__ieee754_sqrt+0x2c>
 8007928:	b19d      	cbz	r5, 8007952 <__ieee754_sqrt+0x6a>
 800792a:	4622      	mov	r2, r4
 800792c:	4620      	mov	r0, r4
 800792e:	4629      	mov	r1, r5
 8007930:	f7f8 fc6e 	bl	8000210 <__aeabi_dsub>
 8007934:	4602      	mov	r2, r0
 8007936:	460b      	mov	r3, r1
 8007938:	f7f8 ff4c 	bl	80007d4 <__aeabi_ddiv>
 800793c:	e7e8      	b.n	8007910 <__ieee754_sqrt+0x28>
 800793e:	152a      	asrs	r2, r5, #20
 8007940:	d115      	bne.n	800796e <__ieee754_sqrt+0x86>
 8007942:	2000      	movs	r0, #0
 8007944:	e009      	b.n	800795a <__ieee754_sqrt+0x72>
 8007946:	0acb      	lsrs	r3, r1, #11
 8007948:	3a15      	subs	r2, #21
 800794a:	0549      	lsls	r1, r1, #21
 800794c:	2b00      	cmp	r3, #0
 800794e:	d0fa      	beq.n	8007946 <__ieee754_sqrt+0x5e>
 8007950:	e7f7      	b.n	8007942 <__ieee754_sqrt+0x5a>
 8007952:	462a      	mov	r2, r5
 8007954:	e7fa      	b.n	800794c <__ieee754_sqrt+0x64>
 8007956:	005b      	lsls	r3, r3, #1
 8007958:	3001      	adds	r0, #1
 800795a:	02dc      	lsls	r4, r3, #11
 800795c:	d5fb      	bpl.n	8007956 <__ieee754_sqrt+0x6e>
 800795e:	1e44      	subs	r4, r0, #1
 8007960:	1b12      	subs	r2, r2, r4
 8007962:	f1c0 0420 	rsb	r4, r0, #32
 8007966:	fa21 f404 	lsr.w	r4, r1, r4
 800796a:	4323      	orrs	r3, r4
 800796c:	4081      	lsls	r1, r0
 800796e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007972:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8007976:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800797a:	07d2      	lsls	r2, r2, #31
 800797c:	bf5c      	itt	pl
 800797e:	005b      	lslpl	r3, r3, #1
 8007980:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8007984:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007988:	bf58      	it	pl
 800798a:	0049      	lslpl	r1, r1, #1
 800798c:	2600      	movs	r6, #0
 800798e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8007992:	106d      	asrs	r5, r5, #1
 8007994:	0049      	lsls	r1, r1, #1
 8007996:	2016      	movs	r0, #22
 8007998:	4632      	mov	r2, r6
 800799a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800799e:	1917      	adds	r7, r2, r4
 80079a0:	429f      	cmp	r7, r3
 80079a2:	bfde      	ittt	le
 80079a4:	193a      	addle	r2, r7, r4
 80079a6:	1bdb      	suble	r3, r3, r7
 80079a8:	1936      	addle	r6, r6, r4
 80079aa:	0fcf      	lsrs	r7, r1, #31
 80079ac:	3801      	subs	r0, #1
 80079ae:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80079b2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80079b6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80079ba:	d1f0      	bne.n	800799e <__ieee754_sqrt+0xb6>
 80079bc:	4604      	mov	r4, r0
 80079be:	2720      	movs	r7, #32
 80079c0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80079c4:	429a      	cmp	r2, r3
 80079c6:	eb00 0e0c 	add.w	lr, r0, ip
 80079ca:	db02      	blt.n	80079d2 <__ieee754_sqrt+0xea>
 80079cc:	d113      	bne.n	80079f6 <__ieee754_sqrt+0x10e>
 80079ce:	458e      	cmp	lr, r1
 80079d0:	d811      	bhi.n	80079f6 <__ieee754_sqrt+0x10e>
 80079d2:	f1be 0f00 	cmp.w	lr, #0
 80079d6:	eb0e 000c 	add.w	r0, lr, ip
 80079da:	da42      	bge.n	8007a62 <__ieee754_sqrt+0x17a>
 80079dc:	2800      	cmp	r0, #0
 80079de:	db40      	blt.n	8007a62 <__ieee754_sqrt+0x17a>
 80079e0:	f102 0801 	add.w	r8, r2, #1
 80079e4:	1a9b      	subs	r3, r3, r2
 80079e6:	458e      	cmp	lr, r1
 80079e8:	bf88      	it	hi
 80079ea:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80079ee:	eba1 010e 	sub.w	r1, r1, lr
 80079f2:	4464      	add	r4, ip
 80079f4:	4642      	mov	r2, r8
 80079f6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80079fa:	3f01      	subs	r7, #1
 80079fc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8007a00:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007a04:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007a08:	d1dc      	bne.n	80079c4 <__ieee754_sqrt+0xdc>
 8007a0a:	4319      	orrs	r1, r3
 8007a0c:	d01b      	beq.n	8007a46 <__ieee754_sqrt+0x15e>
 8007a0e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8007a94 <__ieee754_sqrt+0x1ac>
 8007a12:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8007a98 <__ieee754_sqrt+0x1b0>
 8007a16:	e9da 0100 	ldrd	r0, r1, [sl]
 8007a1a:	e9db 2300 	ldrd	r2, r3, [fp]
 8007a1e:	f7f8 fbf7 	bl	8000210 <__aeabi_dsub>
 8007a22:	e9da 8900 	ldrd	r8, r9, [sl]
 8007a26:	4602      	mov	r2, r0
 8007a28:	460b      	mov	r3, r1
 8007a2a:	4640      	mov	r0, r8
 8007a2c:	4649      	mov	r1, r9
 8007a2e:	f7f9 f823 	bl	8000a78 <__aeabi_dcmple>
 8007a32:	b140      	cbz	r0, 8007a46 <__ieee754_sqrt+0x15e>
 8007a34:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007a38:	e9da 0100 	ldrd	r0, r1, [sl]
 8007a3c:	e9db 2300 	ldrd	r2, r3, [fp]
 8007a40:	d111      	bne.n	8007a66 <__ieee754_sqrt+0x17e>
 8007a42:	3601      	adds	r6, #1
 8007a44:	463c      	mov	r4, r7
 8007a46:	1072      	asrs	r2, r6, #1
 8007a48:	0863      	lsrs	r3, r4, #1
 8007a4a:	07f1      	lsls	r1, r6, #31
 8007a4c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8007a50:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8007a54:	bf48      	it	mi
 8007a56:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8007a5a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8007a5e:	4618      	mov	r0, r3
 8007a60:	e756      	b.n	8007910 <__ieee754_sqrt+0x28>
 8007a62:	4690      	mov	r8, r2
 8007a64:	e7be      	b.n	80079e4 <__ieee754_sqrt+0xfc>
 8007a66:	f7f8 fbd5 	bl	8000214 <__adddf3>
 8007a6a:	e9da 8900 	ldrd	r8, r9, [sl]
 8007a6e:	4602      	mov	r2, r0
 8007a70:	460b      	mov	r3, r1
 8007a72:	4640      	mov	r0, r8
 8007a74:	4649      	mov	r1, r9
 8007a76:	f7f8 fff5 	bl	8000a64 <__aeabi_dcmplt>
 8007a7a:	b120      	cbz	r0, 8007a86 <__ieee754_sqrt+0x19e>
 8007a7c:	1ca0      	adds	r0, r4, #2
 8007a7e:	bf08      	it	eq
 8007a80:	3601      	addeq	r6, #1
 8007a82:	3402      	adds	r4, #2
 8007a84:	e7df      	b.n	8007a46 <__ieee754_sqrt+0x15e>
 8007a86:	1c63      	adds	r3, r4, #1
 8007a88:	f023 0401 	bic.w	r4, r3, #1
 8007a8c:	e7db      	b.n	8007a46 <__ieee754_sqrt+0x15e>
 8007a8e:	bf00      	nop
 8007a90:	7ff00000 	.word	0x7ff00000
 8007a94:	20000068 	.word	0x20000068
 8007a98:	20000060 	.word	0x20000060

08007a9c <_init>:
 8007a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a9e:	bf00      	nop
 8007aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aa2:	bc08      	pop	{r3}
 8007aa4:	469e      	mov	lr, r3
 8007aa6:	4770      	bx	lr

08007aa8 <_fini>:
 8007aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aaa:	bf00      	nop
 8007aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aae:	bc08      	pop	{r3}
 8007ab0:	469e      	mov	lr, r3
 8007ab2:	4770      	bx	lr
